Index: src/sound.cpp
===================================================================
--- src/sound.cpp	(revision 11813)
+++ src/sound.cpp	(working copy)
@@ -155,7 +155,7 @@
 }
 
 
-static const byte _vol_factor_by_zoom[] = {255, 190, 134, 87};
+static const byte _vol_factor_by_zoom[] = {255, 255, 255, 190, 134, 87};
 assert_compile(lengthof(_vol_factor_by_zoom) == ZOOM_LVL_END - ZOOM_LVL_BEGIN);
 
 static const byte _sound_base_vol[] = {
Index: src/station_cmd.cpp
===================================================================
--- src/station_cmd.cpp	(revision 11813)
+++ src/station_cmd.cpp	(working copy)
@@ -2154,7 +2154,8 @@
 		}
 
 		SpriteID pal;
-		if (!(!HasBit(image, SPRITE_MODIFIER_OPAQUE) && IsTransparencySet(TO_BUILDINGS)) && HasBit(image, PALETTE_MODIFIER_COLOR)) {
+		if (/*(HasBit(image, SPRITE_MODIFIER_OPAQUE) ||!IsTransparencySet(TO_BUILDINGS) ) 
+        &&*/ HasBit(image, PALETTE_MODIFIER_COLOR)) {
 			pal = palette;
 		} else {
 			pal = dtss->pal;
Index: src/spriteloader/grf.cpp
===================================================================
--- src/spriteloader/grf.cpp	(revision 11813)
+++ src/spriteloader/grf.cpp	(working copy)
@@ -9,7 +9,7 @@
 #include "../core/alloc_func.hpp"
 #include "grf.hpp"
 
-bool SpriteLoaderGrf::LoadSprite(SpriteLoader::Sprite *sprite, const char *filename, uint8 file_slot, uint32 file_pos)
+bool SpriteLoaderGrf::LoadSprite(SpriteLoader::Sprite *sprite, const char *filename, uint8 file_slot, uint32 file_pos, ZoomLevel zoom)
 {
 	/* Open the right file and go to the correct position */
 	FioSeekToFile(file_slot, file_pos);
Index: src/spriteloader/spriteloader.hpp
===================================================================
--- src/spriteloader/spriteloader.hpp	(revision 11813)
+++ src/spriteloader/spriteloader.hpp	(working copy)
@@ -26,7 +26,7 @@
 	/**
 	 * Load a sprite from the disk and return a sprite struct which is the same for all loaders.
 	 */
-	virtual bool LoadSprite(SpriteLoader::Sprite *sprite, const char *filename, uint8 file_slot, uint32 file_pos) = 0;
+	virtual bool LoadSprite(SpriteLoader::Sprite *sprite, const char *filename, uint8 file_slot, uint32 file_pos, ZoomLevel zoom) = 0;
 
 	virtual ~SpriteLoader() { }
 };
Index: src/spriteloader/grf.hpp
===================================================================
--- src/spriteloader/grf.hpp	(revision 11813)
+++ src/spriteloader/grf.hpp	(working copy)
@@ -12,7 +12,7 @@
 	/**
 	 * Load a sprite from the disk and return a sprite struct which is the same for all loaders.
 	 */
-	bool LoadSprite(SpriteLoader::Sprite *sprite, const char *filename, uint8 file_slot, uint32 file_pos);
+	bool LoadSprite(SpriteLoader::Sprite *sprite, const char *filename, uint8 file_slot, uint32 file_pos, ZoomLevel zoom);
 };
 
 #endif /* SPRITELOADER_GRF_HPP */
Index: src/spriteloader/png.cpp
===================================================================
--- src/spriteloader/png.cpp	(revision 11813)
+++ src/spriteloader/png.cpp	(working copy)
@@ -31,9 +31,18 @@
 	DEBUG(sprite, 0, "WARNING (libpng): %s - %s", message, (char *)png_get_error_ptr(png_ptr));
 }
 
-static bool OpenPNGFile(const char *filename, uint32 id, bool mask)
+static bool OpenPNGFile(const char *filename, uint32 id, bool mask, ZoomLevel zoom)
 {
 	char png_file[MAX_PATH];
+//   DEBUG(sprite, 1, "GT: openpng file , filename  %s",
+//         filename==NULL?"NULL":filename);
+	snprintf(png_file, sizeof(png_file), "sprites" PATHSEP "%s" PATHSEP "%d_%s%d%s.png", filename, id, "z",zoom,mask ? "m" : "");
+   DEBUG(sprite, 1, "GT: openpng file check file exist  %s", png_file);   
+	if (FioCheckFileExists(png_file)) {
+//      DEBUG( sprite, 1, "GT: openpng file , filename  %s", png_file==NULL?"NULL":png_file);
+		FioOpenFile(PNG_SLOT, png_file);
+		return true;
+	}
 
 	snprintf(png_file, sizeof(png_file), "sprites" PATHSEP "%s" PATHSEP "%d%s.png", filename, id, mask ? "m" : "");
 	if (FioCheckFileExists(png_file)) {
@@ -45,7 +54,7 @@
 	return false;
 }
 
-static bool LoadPNG(SpriteLoader::Sprite *sprite, const char *filename, uint32 id, bool mask)
+static bool LoadPNG(SpriteLoader::Sprite *sprite, const char *filename, uint32 id, bool mask, ZoomLevel zoom)
 {
 	png_byte header[8];
 	png_structp png_ptr;
@@ -54,9 +63,9 @@
 	uint i, pixelsize;
 	png_bytep row_pointer;
 	SpriteLoader::CommonPixel *dst;
-
-	if (!OpenPNGFile(filename, id, mask)) return mask; // If mask is true, and file not found, continue true anyway, as it isn't a show-stopper
-
+//   DEBUG(sprite, 1, "GT: png: load png: openpng file ");
+	if (!OpenPNGFile(filename, id, mask, zoom)) return mask; // If mask is true, and file not found, continue true anyway, as it isn't a show-stopper
+//   DEBUG(sprite, 1, "GT: png: openpng file succeeded ");
 	/* Check the header */
 	FioReadBlock(header, 8);
 	if (png_sig_cmp(header, 0, 8) != 0) return false;
@@ -159,9 +168,10 @@
 		for (uint x = 0; x < info_ptr->width; x++) {
 			if (mask) {
 				if (row_pointer[x * sizeof(uint8)] != 0) {
-					dst[x].b = 0;
-					dst[x].g = 0;
-					dst[x].r = 0;
+/* GeekToo: dont overwrite sprite data if mask is present */
+//					dst[x].b = 0;
+//					dst[x].g = 0;
+//					dst[x].r = 0;
 					/* Alpha channel is used from the original image (to allow transparency in remap colors) */
 					dst[x].m = row_pointer[x * sizeof(uint8)];
 				}
@@ -181,10 +191,10 @@
 	return true;
 }
 
-bool SpriteLoaderPNG::LoadSprite(SpriteLoader::Sprite *sprite, const char *filename, uint8 file_slot, uint32 file_pos)
+bool SpriteLoaderPNG::LoadSprite(SpriteLoader::Sprite *sprite, const char *filename, uint8 file_slot, uint32 file_pos, ZoomLevel zoom)
 {
-	if (!LoadPNG(sprite, filename, file_pos, false)) return false;
-	if (!LoadPNG(sprite, filename, file_pos, true)) return false;
+	if (!LoadPNG(sprite, filename, file_pos, false,zoom)) return false;
+	if (!LoadPNG(sprite, filename, file_pos, true,zoom)) return false;
 	return true;
 }
 
Index: src/spriteloader/png.hpp
===================================================================
--- src/spriteloader/png.hpp	(revision 11813)
+++ src/spriteloader/png.hpp	(working copy)
@@ -12,7 +12,7 @@
 	/**
 	 * Load a sprite from the disk and return a sprite struct which is the same for all loaders.
 	 */
-	bool LoadSprite(SpriteLoader::Sprite *sprite, const char *filename, uint8 file_slot, uint32 file_pos);
+	bool LoadSprite(SpriteLoader::Sprite *sprite, const char *filename, uint8 file_slot, uint32 file_pos, ZoomLevel zoom);
 };
 
 #endif /* SPRITELOADER_PNG_HPP */
Index: src/spritecache.cpp
===================================================================
--- src/spritecache.cpp	(revision 11813)
+++ src/spritecache.cpp	(working copy)
@@ -7,6 +7,7 @@
 #include "variables.h"
 #include "debug.h"
 #include "spritecache.h"
+#include "gfx_func.h"
 #include "table/sprites.h"
 #include "fileio.h"
 #include "spriteloader/grf.hpp"
@@ -16,13 +17,13 @@
 #include "spriteloader/png.hpp"
 #endif /* WITH_PNG */
 #include "blitter/factory.hpp"
-
+#include "blitter/32bpp_optimized.hpp"  /* GT:todo add rescale funcs to blitter */
 /* Default of 4MB spritecache */
-uint _sprite_cache_size = 4;
+//uint _sprite_cache_size = 4;
+uint _sprite_cache_size = 16;
 
-
 struct SpriteCache {
-	void *ptr;
+	void *ptr[ZOOM_LVL_END];
 	uint8 file_slot;
 	uint32 file_pos;
 	int16 lru;
@@ -51,6 +52,10 @@
 
 		_spritecache = ReallocT(_spritecache, items);
 
+		if (_spritecache == NULL) {
+			error("Unable to allocate sprite cache of %d items (%d bytes)", items, items * sizeof(*_spritecache));
+		}
+
 		/* Reset the new items and update the count */
 		memset(_spritecache + _spritecache_items, 0, (items - _spritecache_items) * sizeof(*_spritecache));
 		_spritecache_items = items;
@@ -124,8 +129,13 @@
 {
 	uint8 file_slot = sc->file_slot;
 	uint32 file_pos = sc->file_pos;
+   ZoomLevel zoom = ZOOM_LVL_NORMAL;
 
-	DEBUG(sprite, 9, "Load sprite %d", id);
+   if (_cur_dpi)
+   {
+      zoom = ZoomLevel(_cur_dpi->zoom);
+   }   
+	DEBUG(sprite, 9, "GT: ReadSprite  %d curdpi zoom %d", id, zoom);
 
 	if (!SpriteExists(id)) {
 		DEBUG(sprite, 1, "Tried to load non-existing sprite #%d. Probable cause: Wrong/missing NewGRFs", id);
@@ -140,14 +150,32 @@
 #ifdef WITH_PNG
 		/* Try loading 32bpp graphics in case we are 32bpp output */
 		SpriteLoaderPNG sprite_loader;
-		SpriteLoader::Sprite sprite;
+		SpriteLoader::Sprite sprite, dst_sprite;
+      ZoomLevel zoom_idx = (zoom > ZOOM_LVL_NORMAL ? ZOOM_LVL_NORMAL : zoom);
+      bool found = false;
+		do {
+         found = sprite_loader.LoadSprite(&sprite, sc->grf_name, 0,
+                                          sc->id,zoom_idx); 
+         zoom_idx--;                                 
+		} while ( !found && (zoom_idx >= ZOOM_LVL_MIN ) );
+      if (found) {
+         zoom_idx++;
+         if (zoom > zoom_idx)
+         {
+            Blitter_32bppOptimized *blitter = (Blitter_32bppOptimized *)BlitterFactoryBase::GetCurrentBlitter();
+            do{
+               blitter->RescaleSpriteHalfSize(&sprite, &dst_sprite, true);
+               free(sprite.data);
+               sprite = dst_sprite;
+               zoom_idx++;
+            }while (zoom_idx < zoom);
+         }
+   		sc->ptr[zoom] = BlitterFactoryBase::GetCurrentBlitter()->Encode(&sprite, &AllocSprite);
+	   	free(sprite.data);
+		   return sc->ptr[zoom];
+      }
 
-		if (sprite_loader.LoadSprite(&sprite, sc->grf_name, 0, sc->id)) {
-			sc->ptr = BlitterFactoryBase::GetCurrentBlitter()->Encode(&sprite, &AllocSprite);
-			free(sprite.data);
-
-			return sc->ptr;
-		}
+      
 		/* If the PNG couldn't be loaded, fall back to 8bpp grfs */
 #else
 		static bool show_once = true;
@@ -175,10 +203,10 @@
 
 		byte *dest = (byte *)AllocSprite(num);
 
-		sc->ptr = dest;
+		sc->ptr[zoom] = dest;
 		FioReadBlock(dest, num);
 
-		return sc->ptr;
+		return sc->ptr[zoom];
 	}
 	/* Ugly hack to work around the problem that the old landscape
 	 *  generator assumes that those sprites are stored uncompressed in
@@ -197,7 +225,7 @@
 
 		num = width * height;
 		sprite = (Sprite *)AllocSprite(sizeof(*sprite) + num);
-		sc->ptr = sprite;
+		sc->ptr[zoom] = sprite;
 		sprite->height = height;
 		sprite->width  = width;
 		sprite->x_offs = FioReadWord();
@@ -217,7 +245,7 @@
 			}
 		}
 
-		return sc->ptr;
+		return sc->ptr[zoom];
 	}
 
 	if (!real_sprite) {
@@ -227,14 +255,38 @@
 	}
 
 	SpriteLoaderGrf sprite_loader;
-	SpriteLoader::Sprite sprite;
+	SpriteLoader::Sprite sprite, dst_sprite;
 
-	if (!sprite_loader.LoadSprite(&sprite, sc->grf_name, file_slot, file_pos)) return NULL;
+	if (!sprite_loader.LoadSprite(&sprite, sc->grf_name, file_slot, file_pos,ZOOM_LVL_NORMAL)){ 
+      return NULL;
+   }
+   if (zoom < ZOOM_LVL_NORMAL)
+   {
+      Blitter_32bppOptimized *blitter = (Blitter_32bppOptimized *)BlitterFactoryBase::GetCurrentBlitter();
+      ZoomLevel zoom_idx = zoom;
+      do{
+         blitter->RescaleSpriteDoubleSize(&sprite, &dst_sprite);
+         free(sprite.data);
+         sprite = dst_sprite;
+         zoom_idx++;
+      }while (zoom_idx < ZOOM_LVL_NORMAL);
+   }
+   if (zoom > ZOOM_LVL_NORMAL)
+   {
+      Blitter_32bppOptimized *blitter = (Blitter_32bppOptimized *)BlitterFactoryBase::GetCurrentBlitter();
+      ZoomLevel zoom_idx = zoom;
+      do{
+         blitter->RescaleSpriteHalfSize(&sprite, &dst_sprite, true);
+         free(sprite.data);
+         sprite = dst_sprite;
+         zoom_idx++;
+      }while (zoom_idx < zoom);
+   }
 	if (id == 142) sprite.height = 10; // Compensate for a TTD bug
-	sc->ptr = BlitterFactoryBase::GetCurrentBlitter()->Encode(&sprite, &AllocSprite);
+	sc->ptr[zoom] = BlitterFactoryBase::GetCurrentBlitter()->Encode(&sprite, &AllocSprite);
 	free(sprite.data);
 
-	return sc->ptr;
+	return sc->ptr[zoom];
 }
 
 
@@ -252,7 +304,12 @@
 	sc = AllocateSpriteCache(load_index);
 	sc->file_slot = file_slot;
 	sc->file_pos = file_pos;
-	sc->ptr = NULL;
+	sc->ptr[ZOOM_LVL_IN_4X] = NULL;
+	sc->ptr[ZOOM_LVL_IN_2X] = NULL;
+  	sc->ptr[ZOOM_LVL_NORMAL] = NULL;
+  	sc->ptr[ZOOM_LVL_OUT_2X] = NULL;
+   sc->ptr[ZOOM_LVL_OUT_4X] = NULL;
+   sc->ptr[ZOOM_LVL_OUT_8X] = NULL;
 	sc->lru = 0;
 	sc->id = file_sprite_id;
 
@@ -277,10 +334,12 @@
 {
 	SpriteCache *scold = GetSpriteCache(old_spr);
 	SpriteCache *scnew = AllocateSpriteCache(new_spr);
+   ZoomLevel zoom;
 
 	scnew->file_slot = scold->file_slot;
 	scnew->file_pos = scold->file_pos;
-	scnew->ptr = NULL;
+   zoom = ZoomLevel(_cur_dpi->zoom);
+	scnew->ptr[zoom] = NULL;
 	scnew->id = scold->id;
 	free((char *)scnew->grf_name);
 	scnew->grf_name = strdup(scold->grf_name);
@@ -305,17 +364,26 @@
 static uint32 GetSpriteCacheUsage()
 {
 	uint32 tot_size = 0;
+  	uint32 nof_blocks = 0;
+  	uint32 nof_used_blocks = 0;
 	MemBlock* s;
 
-	for (s = _spritecache_ptr; s->size != 0; s = NextBlock(s))
-		if (!(s->size & S_FREE_MASK)) tot_size += s->size;
-
+	for (s = _spritecache_ptr; s->size != 0; s = NextBlock(s)){
+		if (!(s->size & S_FREE_MASK)){
+         tot_size += s->size;
+         nof_used_blocks++;
+      }
+      nof_blocks++;
+   }
+   DEBUG(sprite, 3, "Sprite usage nof blocks %d used %d",
+         nof_blocks, nof_used_blocks);
 	return tot_size;
 }
 
 
 void IncreaseSpriteLRU()
 {
+   ZoomLevel zoom;
 	/* Increase all LRU values */
 	if (_sprite_lru_counter > 16384) {
 		SpriteID i;
@@ -324,7 +392,8 @@
 
 		for (i = 0; i != _spritecache_items; i++) {
 			SpriteCache *sc = GetSpriteCache(i);
-			if (sc->ptr != NULL) {
+         zoom = ZoomLevel(_cur_dpi->zoom);
+			if (sc->ptr[zoom] != NULL) {
 				if (sc->lru >= 0) {
 					sc->lru = -1;
 				} else if (sc->lru != -32768) {
@@ -347,6 +416,7 @@
 static void CompactSpriteCache()
 {
 	MemBlock *s;
+   ZoomLevel   zoom;
 
 	DEBUG(sprite, 3, "Compacting sprite cache, inuse=%d", GetSpriteCacheUsage());
 
@@ -364,11 +434,16 @@
 				break;
 
 			/* Locate the sprite belonging to the next pointer. */
-			for (i = 0; GetSpriteCache(i)->ptr != next->data; i++) {
-				assert(i != _spritecache_items);
-			}
-
-			GetSpriteCache(i)->ptr = s->data; // Adjust sprite array entry
+         bool found = false;
+         for (zoom = ZOOM_LVL_MIN; 
+              zoom < ZOOM_LVL_END && !found; 
+              zoom= ZoomLevel(zoom+1)){
+			   for (i = 0; i < _spritecache_items && !found; i++) {
+               found = (GetSpriteCache(i)->ptr[zoom] == next->data);
+			   }
+         }
+		   assert(found);
+			GetSpriteCache(i-1)->ptr[zoom-1] = s->data; // Adjust sprite array entry
 			/* Swap this and the next block */
 			temp = *s;
 			memmove(s, next, next->size);
@@ -390,37 +465,53 @@
 	SpriteID i;
 	uint best = UINT_MAX;
 	MemBlock* s;
-	int cur_lru;
+	int16 cur_lru;
+   ZoomLevel zoom;
 
 	DEBUG(sprite, 3, "DeleteEntryFromSpriteCache, inuse=%d", GetSpriteCacheUsage());
 
-	cur_lru = 0xffff;
+	cur_lru = -1;
 	for (i = 0; i != _spritecache_items; i++) {
 		SpriteCache *sc = GetSpriteCache(i);
-		if (sc->ptr != NULL && sc->lru < cur_lru) {
-			cur_lru = sc->lru;
-			best = i;
-		}
+      if (sc->lru < cur_lru) {
+		   for (zoom = ZOOM_LVL_MIN; zoom < ZOOM_LVL_END; zoom ++){
+            if (sc->ptr[zoom]){
+	      		cur_lru = sc->lru;
+			      best = i;
+		      }
+         }
+      }
 	}
 
 	/* Display an error message and die, in case we found no sprite at all.
 	 * This shouldn't really happen, unless all sprites are locked. */
-	if (best == (uint)-1) error("Out of sprite memory");
-
+	if (best == (uint)-1)
+		error("Out of sprite memory");
+  	DEBUG(sprite, 3, "DeleteEntryFromSpriteCache best=%d", best);
+  	DEBUG(sprite, 3, "DeleteEntryFromSpriteCache cur_lru=%d", cur_lru);
+	SpriteCache *sc = GetSpriteCache(best);
 	/* Mark the block as free (the block must be in use) */
-	s = (MemBlock*)GetSpriteCache(best)->ptr - 1;
-	assert(!(s->size & S_FREE_MASK));
-	s->size |= S_FREE_MASK;
-	GetSpriteCache(best)->ptr = NULL;
+   for (zoom = ZOOM_LVL_MIN ; zoom < ZOOM_LVL_END ; zoom = ZoomLevel(zoom+1)){
+      if (sc->ptr[zoom]){
+         s = (MemBlock*)sc->ptr[zoom] - 1;
+  	DEBUG(sprite, 3, "DeleteEntryFromSpriteCache zoom %d removed", zoom);      
+	      assert(!(s->size & S_FREE_MASK));
+	      s->size |= S_FREE_MASK;
+	      sc->ptr[zoom] = NULL;
 
-	/* And coalesce adjacent free blocks */
-	for (s = _spritecache_ptr; s->size != 0; s = NextBlock(s)) {
-		if (s->size & S_FREE_MASK) {
-			while (NextBlock(s)->size & S_FREE_MASK) {
-				s->size += NextBlock(s)->size & ~S_FREE_MASK;
-			}
-		}
+	      /* And coalesce adjacent free blocks */
+	      for (s = _spritecache_ptr; s->size != 0; s = NextBlock(s)) {
+		      if (s->size & S_FREE_MASK) {
+			      while (NextBlock(s)->size & S_FREE_MASK) {
+				      s->size += NextBlock(s)->size & ~S_FREE_MASK;
+			      }
+		      }
+         }
+      }   
 	}
+
+  	DEBUG(sprite, 3, "DeleteEntryFromSpriteCache end, inuse=%d spr lru ctr%d ",
+   GetSpriteCacheUsage(),_sprite_lru_counter);
 }
 
 void* AllocSprite(size_t mem_req)
@@ -430,7 +521,7 @@
 	/* Align this to an uint32 boundary. This also makes sure that the 2 least
 	 * bits are not used, so we could use those for other things. */
 	mem_req = Align(mem_req, sizeof(uint32));
-
+	DEBUG(sprite, 3, "AllocSprite, memreq=%d", mem_req);
 	for (;;) {
 		MemBlock* s;
 
@@ -465,7 +556,8 @@
 {
 	SpriteCache *sc;
 	void* p;
-
+   ZoomLevel zoom;
+//  	DEBUG(sprite, 9, "GT: GetRawSprite %d", sprite);   
 	assert(sprite < _spritecache_items);
 
 	sc = GetSpriteCache(sprite);
@@ -473,10 +565,16 @@
 	/* Update LRU */
 	sc->lru = ++_sprite_lru_counter;
 
-	p = sc->ptr;
 
+
+   zoom = ZoomLevel(_cur_dpi->zoom);
+	p = sc->ptr[zoom];
+
 	/* Load the sprite, if it is not loaded, yet */
 	if (p == NULL) p = ReadSprite(sc, sprite, real_sprite);
+   
+//   const Sprite *spr=(const Sprite*)sc->ptr[zoom];
+//  	DEBUG(sprite, 1, "GT: GetRawSprite height %d",  spr->height);   
 	return p;
 }
 
@@ -484,7 +582,7 @@
 void GfxInitSpriteMem()
 {
 	/* initialize sprite cache heap */
-	if (_spritecache_ptr == NULL) _spritecache_ptr = (MemBlock*)MallocT<byte>(_sprite_cache_size * 1024 * 1024);
+	if (_spritecache_ptr == NULL) _spritecache_ptr = (MemBlock*)malloc(_sprite_cache_size * 1024 * 1024);
 
 	/* A big free block */
 	_spritecache_ptr->size = ((_sprite_cache_size * 1024 * 1024) - sizeof(MemBlock)) | S_FREE_MASK;
@@ -492,10 +590,10 @@
 	NextBlock(_spritecache_ptr)->size = 0;
 
 	/* Reset the spritecache 'pool' */
-	for (uint i = 0; i < _spritecache_items; i++) free((char *)_spritecache[i].grf_name);
-	free(_spritecache);
-	_spritecache_items = 0;
-	_spritecache = NULL;
 
+   for (uint i = 0; i < _spritecache_items; i++) free((char *)_spritecache[i].grf_name);
+   free(_spritecache);
+   _spritecache_items = 0;
+   _spritecache = NULL;
 	_compact_cache_counter = 0;
 }
Index: src/spritecache.h
===================================================================
--- src/spritecache.h	(revision 11813)
+++ src/spritecache.h	(working copy)
@@ -7,8 +7,9 @@
 
 #include "gfx_type.h"
 
+
 struct Sprite {
-	byte height;
+	uint16 height;
 	uint16 width;
 	int16 x_offs;
 	int16 y_offs;
Index: src/texteff.cpp
===================================================================
--- src/texteff.cpp	(revision 11813)
+++ src/texteff.cpp	(working copy)
@@ -383,6 +383,35 @@
 void DrawTextEffects(DrawPixelInfo *dpi)
 {
 	switch (dpi->zoom) {
+		case ZOOM_LVL_IN_4X:
+			for (TextEffectID i = 0; i < _num_text_effects; i++) {
+				TextEffect *te = &_text_effect_list[i];
+				if (te->string_id != INVALID_STRING_ID &&
+						dpi->left <= te->right &&
+						dpi->top  <= te->bottom &&
+						dpi->left + dpi->width  > te->x &&
+						dpi->top  + dpi->height > te->y) {
+					if (te->mode == TE_RISING || (_patches.loading_indicators && !IsTransparencySet(TO_LOADING))) {
+						AddStringToDraw(te->x, te->y, te->string_id, te->params_1, te->params_2);
+					}
+				}
+			}
+			break;
+		case ZOOM_LVL_IN_2X:
+			for (TextEffectID i = 0; i < _num_text_effects; i++) {
+				TextEffect *te = &_text_effect_list[i];
+				if (te->string_id != INVALID_STRING_ID &&
+						dpi->left <= te->right &&
+						dpi->top  <= te->bottom &&
+						dpi->left + dpi->width  > te->x &&
+						dpi->top  + dpi->height > te->y) {
+					if (te->mode == TE_RISING || (_patches.loading_indicators && !IsTransparencySet(TO_LOADING))) {
+						AddStringToDraw(te->x, te->y, te->string_id, te->params_1, te->params_2);
+					}
+				}
+			}
+			break;
+
 		case ZOOM_LVL_NORMAL:
 			for (TextEffectID i = 0; i < _num_text_effects; i++) {
 				TextEffect *te = &_text_effect_list[i];
Index: src/window.cpp
===================================================================
--- src/window.cpp	(revision 11813)
+++ src/window.cpp	(working copy)
@@ -220,7 +220,8 @@
 void DrawOverlappedWindowForAll(int left, int top, int right, int bottom)
 {
 	Window* const *wz;
-	DrawPixelInfo bk;
+	DrawPixelInfo bk, *old_dpi;
+   old_dpi = _cur_dpi;
 	_cur_dpi = &bk;
 
 	FOR_ALL_WINDOWS(wz) {
@@ -232,6 +233,7 @@
 			DrawOverlappedWindow(wz, left, top, right, bottom);
 		}
 	}
+   _cur_dpi = old_dpi;
 }
 
 static void DrawOverlappedWindow(Window* const *wz, int left, int top, int right, int bottom)
Index: src/zoom_type.h
===================================================================
--- src/zoom_type.h	(revision 11813)
+++ src/zoom_type.h	(working copy)
@@ -9,8 +9,10 @@
 
 enum ZoomLevel {
 	/* Our possible zoom-levels */
-	ZOOM_LVL_BEGIN  = 0,
-	ZOOM_LVL_NORMAL = 0,
+   ZOOM_LVL_BEGIN = 0,
+   ZOOM_LVL_IN_4X = 0,
+   ZOOM_LVL_IN_2X,  
+	ZOOM_LVL_NORMAL,
 	ZOOM_LVL_OUT_2X,
 	ZOOM_LVL_OUT_4X,
 	ZOOM_LVL_OUT_8X,
@@ -29,7 +31,7 @@
 
 	ZOOM_LVL_DETAIL   = ZOOM_LVL_OUT_2X, ///< All zoomlevels below or equal to this, will result in details on the screen, like road-work, ...
 
-	ZOOM_LVL_MIN      = ZOOM_LVL_NORMAL,
+	ZOOM_LVL_MIN      = ZOOM_LVL_BEGIN,
 	ZOOM_LVL_MAX      = ZOOM_LVL_OUT_8X,
 };
 DECLARE_POSTFIX_INCREMENT(ZoomLevel)
Index: src/vehicle.cpp
===================================================================
--- src/vehicle.cpp	(revision 11813)
+++ src/vehicle.cpp	(working copy)
@@ -785,11 +785,11 @@
 			const Vehicle *v = _vehicle_position_hash[x + y]; // already masked & 0xFFF
 
 			while (v != NULL) {
-				if (!(v->vehstatus & VS_HIDDEN) &&
-						l <= v->right_coord &&
-						t <= v->bottom_coord &&
-						r >= v->left_coord &&
-						b >= v->top_coord) {
+				if (!(v->vehstatus & VS_HIDDEN) ) { //&&
+//						l <= v->right_coord &&
+//						t <= v->bottom_coord &&
+//						r >= v->left_coord &&
+//						b >= v->top_coord) {
 					DoDrawVehicle(v);
 				}
 				v = v->next_hash;
@@ -1416,8 +1416,8 @@
 			 (uint)(y -= vp->top) >= (uint)vp->height)
 				return NULL;
 
-	x = ScaleByZoom(x, vp->zoom) + vp->virtual_left;
-	y = ScaleByZoom(y, vp->zoom) + vp->virtual_top;
+	x = ScaleByZoom(x+ vp->virtual_left, vp->zoom) ;
+	y = ScaleByZoom(y+ vp->virtual_top, vp->zoom) ;
 
 	FOR_ALL_VEHICLES(v) {
 		if ((v->vehstatus & (VS_HIDDEN|VS_UNCLICKABLE)) == 0 &&
Index: src/viewport.cpp
===================================================================
--- src/viewport.cpp	(revision 11813)
+++ src/viewport.cpp	(working copy)
@@ -135,7 +135,7 @@
 
 struct ViewportDrawer {
 	DrawPixelInfo dpi;
-
+   const ViewPort *vp;
 	byte *spritelist_mem;
 	const byte *eof_spritelist_mem;
 
@@ -308,14 +308,15 @@
 	int i;
 	int left, top, width, height;
 
-	vp->virtual_left = x;
-	vp->virtual_top = y;
+//  	DEBUG(grf, 0, "set viewport pos x %d y %d ",x, y);
+	vp->virtual_left = UnScaleByZoomLower(x, vp->zoom);
+	vp->virtual_top = UnScaleByZoomLower(y, vp->zoom);
 
 	/* viewport is bound to its left top corner, so it must be rounded down (UnScaleByZoomLower)
 	 * else glitch described in FS#1412 will happen (offset by 1 pixel with zoom level > NORMAL)
 	 */
-	old_left = UnScaleByZoomLower(old_left, vp->zoom);
-	old_top = UnScaleByZoomLower(old_top, vp->zoom);
+//	old_left = UnScaleByZoomLower(old_left, vp->zoom);
+//	old_top = UnScaleByZoomLower(old_top, vp->zoom);
 	x = UnScaleByZoomLower(x, vp->zoom);
 	y = UnScaleByZoomLower(y, vp->zoom);
 
@@ -378,12 +379,14 @@
 				return pt;
 	}
 
-	x = (ScaleByZoom(x, vp->zoom) + vp->virtual_left) >> 2;
-	y = (ScaleByZoom(y, vp->zoom) + vp->virtual_top) >> 1;
-
+//	x = (ScaleByZoom(x, vp->zoom) + vp->virtual_left) >> 2;
+//	y = (ScaleByZoom(y, vp->zoom) + vp->virtual_top) >> 1;
+// DEBUG(grf, 0, "viewport trans xy : x %d y %d vl %d vt %d",x,y,vp->virtual_left,vp->virtual_top);
+	x = (ScaleByZoom(x + vp->virtual_left, vp->zoom) ) >> 2;
+	y = (ScaleByZoom(y + vp->virtual_top, vp->zoom) ) >> 1;
 	a = y-x;
 	b = y+x;
-
+// DEBUG(grf, 0, "viewport trans xy : a %d b %d vl %d vt %d", a, b);
 	/* we need to move variables in to the valid range, as the
 	 * GetTileZoomCenterWindow() function can call here with invalid x and/or y,
 	 * when the user tries to zoom out along the sides of the map */
@@ -598,10 +601,13 @@
 	Point pt = RemapCoords(x, y, z);
 	const Sprite* spr = GetSprite(image & SPRITE_MASK);
 
-	if (pt.x + spr->x_offs >= vd->dpi.left + vd->dpi.width ||
-			pt.x + spr->x_offs + spr->width <= vd->dpi.left ||
-			pt.y + spr->y_offs >= vd->dpi.top + vd->dpi.height ||
-			pt.y + spr->y_offs + spr->height <= vd->dpi.top)
+   int xu = UnScaleByZoom(pt.x, vd->dpi.zoom);
+   int yu = UnScaleByZoom(pt.y, vd->dpi.zoom);
+   
+	if (xu + spr->x_offs >= vd->vp->virtual_left + vd->vp->width ||
+       xu + spr->x_offs + spr->width <= vd->vp->virtual_left ||
+		 yu + spr->y_offs >= vd->vp->virtual_top + vd->vp->height ||
+		 yu + spr->y_offs + spr->height <= vd->vp->virtual_top)
 		return;
 
 	AddChildSpriteScreen(image, pal, pt.x - vd->parent_list[-1]->left, pt.y - vd->parent_list[-1]->top, false, sub);
@@ -643,7 +649,7 @@
 	/* make the sprites transparent with the right palette */
 	if (transparent) {
 		SetBit(image, PALETTE_MODIFIER_TRANSPARENT);
-		pal = PALETTE_TO_TRANSPARENT;
+//		pal = PALETTE_TO_TRANSPARENT;
 	}
 
 	if (vd->combine_sprites == 2) {
@@ -682,10 +688,16 @@
 		bottom          = RemapCoords(x + w          , y + h          , z + bb_offset_z).y + 1;
 	} else {
 		const Sprite *spr = GetSprite(image & SPRITE_MASK);
-		left = ps->left = (pt.x += spr->x_offs);
-		right           = (pt.x +  spr->width );
-		top  = ps->top  = (pt.y += spr->y_offs);
-		bottom          = (pt.y +  spr->height);
+      int x_offs, y_offs,swidth, sheight;
+      
+      x_offs = ScaleByZoom(spr->x_offs, vd->vp->zoom);
+      y_offs = ScaleByZoom(spr->y_offs, vd->vp->zoom);
+      swidth = ScaleByZoom(spr->width, vd->vp->zoom);
+      sheight = ScaleByZoom(spr->height, vd->vp->zoom);
+		left = ps->left = (pt.x += x_offs);
+		right           = (pt.x +  swidth );
+		top  = ps->top  = (pt.y += y_offs);
+		bottom          = (pt.y +  sheight);
 	}
 	if (_draw_bounding_boxes && (image != SPR_EMPTY_BOUNDING_BOX)) {
 		/* Compute maximal extents of sprite and it's bounding box */
@@ -695,10 +707,10 @@
 		bottom = max(bottom, RemapCoords(x + w          , y + h          , z + bb_offset_z).y + 1);
 	}
 	/* Do not add the sprite to the viewport, if it is outside */
-	if (left   >= vd->dpi.left + vd->dpi.width ||
-	    right  <= vd->dpi.left ||
-	    top    >= vd->dpi.top + vd->dpi.height ||
-	    bottom <= vd->dpi.top) {
+	if (UnScaleByZoom(left, vd->vp->zoom)   >= vd->vp->virtual_left + vd->vp->width ||
+	    UnScaleByZoom(right, vd->vp->zoom)  <= vd->vp->virtual_left ||
+	    UnScaleByZoom(top, vd->vp->zoom)    >= vd->vp->virtual_top + vd->vp->height  ||
+	    UnScaleByZoom(bottom, vd->vp->zoom) <= vd->vp->virtual_top) {
 		return;
 	}
 
@@ -755,7 +767,7 @@
 	/* make the sprites transparent with the right palette */
 	if (transparent) {
 		SetBit(image, PALETTE_MODIFIER_TRANSPARENT);
-		pal = PALETTE_TO_TRANSPARENT;
+//		pal = PALETTE_TO_TRANSPARENT;
 	}
 
 	if (vd->spritelist_mem >= vd->eof_spritelist_mem) {
@@ -779,8 +791,8 @@
 	cs->image = image;
 	cs->pal = pal;
 	cs->sub = sub;
-	cs->x = x;
-	cs->y = y;
+	cs->x = UnScaleByZoom(x, vd->dpi.zoom);
+	cs->y = UnScaleByZoom(y, vd->dpi.zoom);
 	cs->next = NULL;
 }
 
@@ -999,29 +1011,40 @@
 		return;
 	}
 }
-
+//bool GTdebug = false;
 static void ViewportAddLandscape()
 {
 	ViewportDrawer *vd = _cur_vd;
-	int x, y, width, height;
+	int x, y, x1, y1, width, nof_sprites_drawn;
+   int top, bottom;
 	TileInfo ti;
 	bool direction;
-
+   Point pt;
+   
 	_cur_ti = &ti;
 
-	/* Transform into tile coordinates and round to closest full tile */
-	x = ((vd->dpi.top >> 1) - (vd->dpi.left >> 2)) & ~0xF;
-	y = ((vd->dpi.top >> 1) + (vd->dpi.left >> 2) - 0x10) & ~0xF;
+   x1 = ScaleByZoomLower(vd->vp->virtual_left + vd->dpi.left, vd->vp->zoom)  ;
+   y1 = ScaleByZoomLower(vd->vp->virtual_top + vd->dpi.top, vd->vp->zoom)  ;
+//if (GTdebug)
+//   DEBUG(grf, 1, "viewport add landscape x1 %d  y1 %d" ,x1 ,y1);      
+   x1 = x1 / 4;
+	y1 = y1 / 2;
 
-	/* determine size of area */
-	{
-		Point pt = RemapCoords(x, y, 241);
-		width = (vd->dpi.left + vd->dpi.width - pt.x + 95) >> 6;
-		height = (vd->dpi.top + vd->dpi.height - pt.y) >> 5 << 1;
-	}
-
+	x = ((y1-x1) / TILE_SIZE) * TILE_SIZE ;
+	y = ((y1+x1) / TILE_SIZE) * TILE_SIZE - (TILE_SIZE << 1);
+//if (GTdebug)
+//DEBUG(grf, 1, "viewport add landscape vl  %d  vt %d" ,vd->vp->virtual_left ,vd->vp->virtual_top);      
+//if (GTdebug)
+//DEBUG(grf, 1, "viewport add landscape x %d  y %d" ,x ,y);   
+//if (GTdebug)
+//DEBUG(grf, 1, "viewport add landscape dp width %d  dp height %d" ,vd->dpi.width,vd->dpi.height);   
+   width  = (vd->dpi.width/UnScaleByZoom(64,vd->vp->zoom))+4;
+//if (GTdebug)
+//DEBUG(grf, 1, "viewport add landscape width %d" ,width);
+//GTdebug=false;
+   bottom = ScaleByZoom(vd->vp->virtual_top + vd->dpi.top + vd->dpi.height, vd->vp->zoom) + 128;  
+   top = ScaleByZoom(vd->vp->virtual_top + vd->dpi.top, vd->vp->zoom) ;  
 	assert(width > 0);
-	assert(height > 0);
 
 	direction = false;
 
@@ -1029,7 +1052,7 @@
 		int width_cur = width;
 		int x_cur = x;
 		int y_cur = y;
-
+      nof_sprites_drawn = 0;
 		do {
 			TileType tt;
 
@@ -1048,18 +1071,21 @@
 				ti.z = 0;
 				tt = MP_VOID;
 			}
-
+         
 			y_cur += 0x10;
 			x_cur -= 0x10;
 
-			vd->foundation_part = FOUNDATION_PART_NONE;
-			vd->foundation[0] = NULL;
-			vd->foundation[1] = NULL;
-			vd->last_foundation_child[0] = NULL;
-			vd->last_foundation_child[1] = NULL;
-
-			_tile_type_procs[tt]->draw_tile_proc(&ti);
-			DrawTileSelection(&ti);
+         pt=RemapCoords(ti.x,ti.y,ti.z);
+         if (pt.y < bottom){
+			    vd->foundation_part = FOUNDATION_PART_NONE;
+			    vd->foundation[0] = NULL;
+			    vd->foundation[1] = NULL;
+			    vd->last_foundation_child[0] = NULL;
+			    vd->last_foundation_child[1] = NULL;
+			    _tile_type_procs[tt]->draw_tile_proc(&ti);
+   		    DrawTileSelection(&ti);
+             nof_sprites_drawn++;
+         }
 		} while (--width_cur);
 
 		if ((direction ^= 1) != 0) {
@@ -1067,7 +1093,7 @@
 		} else {
 			x += 0x10;
 		}
-	} while (--height);
+	} while (nof_sprites_drawn || (pt.y < top));
 }
 
 
@@ -1085,6 +1111,30 @@
 	bottom = top + dpi->height;
 
 	switch (dpi->zoom) {
+		case ZOOM_LVL_IN_4X:
+			FOR_ALL_TOWNS(t) {
+				if (bottom > t->sign.top &&
+						top    < t->sign.top + 12 &&
+						right  > t->sign.left &&
+						left   < t->sign.left + t->sign.width_1) {
+					AddStringToDraw(t->sign.left + 1, t->sign.top + 1,
+						_patches.population_in_label ? STR_TOWN_LABEL_POP : STR_TOWN_LABEL,
+						t->index, t->population);
+				}
+			}
+			break;
+		case ZOOM_LVL_IN_2X:
+			FOR_ALL_TOWNS(t) {
+				if (bottom > t->sign.top &&
+						top    < t->sign.top + 12 &&
+						right  > t->sign.left &&
+						left   < t->sign.left + t->sign.width_1) {
+					AddStringToDraw(t->sign.left + 1, t->sign.top + 1,
+						_patches.population_in_label ? STR_TOWN_LABEL_POP : STR_TOWN_LABEL,
+						t->index, t->population);
+				}
+			}
+			break;
 		case ZOOM_LVL_NORMAL:
 			FOR_ALL_TOWNS(t) {
 				if (bottom > t->sign.top &&
@@ -1161,6 +1211,27 @@
 	bottom = top + dpi->height;
 
 	switch (dpi->zoom) {
+		case ZOOM_LVL_IN_4X:
+			FOR_ALL_STATIONS(st) {
+				if (bottom > st->sign.top &&
+						top    < st->sign.top + 12 &&
+						right  > st->sign.left &&
+						left   < st->sign.left + st->sign.width_1) {
+					AddStation(st, STR_305C_0, st->sign.width_1);
+				}
+			}
+			break;
+		case ZOOM_LVL_IN_2X:
+			FOR_ALL_STATIONS(st) {
+				if (bottom > st->sign.top &&
+						top    < st->sign.top + 12 &&
+						right  > st->sign.left &&
+						left   < st->sign.left + st->sign.width_1) {
+					AddStation(st, STR_305C_0, st->sign.width_1);
+				}
+			}
+			break;
+
 		case ZOOM_LVL_NORMAL:
 			FOR_ALL_STATIONS(st) {
 				if (bottom > st->sign.top &&
@@ -1231,6 +1302,26 @@
 	bottom = top + dpi->height;
 
 	switch (dpi->zoom) {
+		case ZOOM_LVL_IN_4X:
+			FOR_ALL_SIGNS(si) {
+				if (bottom > si->sign.top &&
+						top    < si->sign.top + 12 &&
+						right  > si->sign.left &&
+						left   < si->sign.left + si->sign.width_1) {
+					AddSign(si, STR_2806, si->sign.width_1);
+				}
+			}
+			break;
+		case ZOOM_LVL_IN_2X:
+			FOR_ALL_SIGNS(si) {
+				if (bottom > si->sign.top &&
+						top    < si->sign.top + 12 &&
+						right  > si->sign.left &&
+						left   < si->sign.left + si->sign.width_1) {
+					AddSign(si, STR_2806, si->sign.width_1);
+				}
+			}
+			break;
 		case ZOOM_LVL_NORMAL:
 			FOR_ALL_SIGNS(si) {
 				if (bottom > si->sign.top &&
@@ -1301,6 +1392,26 @@
 	bottom = top + dpi->height;
 
 	switch (dpi->zoom) {
+		case ZOOM_LVL_IN_4X:
+			FOR_ALL_WAYPOINTS(wp) {
+				if (bottom > wp->sign.top &&
+						top    < wp->sign.top + 12 &&
+						right  > wp->sign.left &&
+						left   < wp->sign.left + wp->sign.width_1) {
+					AddWaypoint(wp, STR_WAYPOINT_VIEWPORT, wp->sign.width_1);
+				}
+			}
+			break;
+		case ZOOM_LVL_IN_2X:
+			FOR_ALL_WAYPOINTS(wp) {
+				if (bottom > wp->sign.top &&
+						top    < wp->sign.top + 12 &&
+						right  > wp->sign.left &&
+						left   < wp->sign.left + wp->sign.width_1) {
+					AddWaypoint(wp, STR_WAYPOINT_VIEWPORT, wp->sign.width_1);
+				}
+			}
+			break;
 		case ZOOM_LVL_NORMAL:
 			FOR_ALL_WAYPOINTS(wp) {
 				if (bottom > wp->sign.top &&
@@ -1368,7 +1479,23 @@
 {
 	do {
 		Point pt = RemapCoords(ts->x, ts->y, ts->z);
-		DrawSprite(ts->image, ts->pal, pt.x, pt.y, ts->sub);
+      int left = UnScaleByZoom(pt.x,_cur_vd->vp->zoom);
+      int top =  UnScaleByZoom(pt.y,_cur_vd->vp->zoom);
+
+      
+      left -= _cur_vd->vp->virtual_left;
+      top  -= _cur_vd->vp->virtual_top;
+
+		DrawSprite(ts->image, ts->pal, left, top, ts->sub);
+//      if (ts){
+//      if ((ts->image == 3981)&&(_cur_vd->vp->zoom==0))
+//      {
+//      DEBUG(grf, 1, "viewport draw tile sprites tsx %d tsy %d tsz %d left %d top %d",
+//      ts->x, ts->y, ts->z, left, top);
+//      DEBUG(grf, 1, "viewport draw tile sprites virt left %d virt top %d",
+//      _cur_vd->vp->virtual_left, _cur_vd->vp->virtual_top);
+//      }
+//      }      
 		ts = ts->next;
 	} while (ts != NULL);
 }
@@ -1435,14 +1562,18 @@
 
 static void ViewportDrawParentSprites(ParentSpriteToDraw *psd[])
 {
+   int  x,y, left, top;
 	for (; *psd != NULL; psd++) {
 		const ParentSpriteToDraw* ps = *psd;
 		const ChildScreenSpriteToDraw* cs;
+      x = UnScaleByZoom(ps->x, _cur_dpi->zoom) - _cur_vd->vp->virtual_left;      
+      y = UnScaleByZoom(ps->y, _cur_dpi->zoom) - _cur_vd->vp->virtual_top;      
+      left = UnScaleByZoom(ps->left, _cur_dpi->zoom) - _cur_vd->vp->virtual_left;
+      top = UnScaleByZoom(ps->top, _cur_dpi->zoom) - _cur_vd->vp->virtual_top;      
+		if (ps->image != SPR_EMPTY_BOUNDING_BOX) DrawSprite(ps->image, ps->pal, x, y, ps->sub);
 
-		if (ps->image != SPR_EMPTY_BOUNDING_BOX) DrawSprite(ps->image, ps->pal, ps->x, ps->y, ps->sub);
-
 		for (cs = ps->child; cs != NULL; cs = cs->next) {
-			DrawSprite(cs->image, cs->pal, ps->left + cs->x, ps->top + cs->y, cs->sub);
+			DrawSprite(cs->image, cs->pal, left + cs->x, top + cs->y, cs->sub);
 		}
 	}
 }
@@ -1478,17 +1609,17 @@
 	zoom = dp.zoom;
 	dp.zoom = ZOOM_LVL_NORMAL;
 
-	dp.left   = UnScaleByZoom(dp.left,   zoom);
-	dp.top    = UnScaleByZoom(dp.top,    zoom);
-	dp.width  = UnScaleByZoom(dp.width,  zoom);
-	dp.height = UnScaleByZoom(dp.height, zoom);
+//	dp.left   = UnScaleByZoom(dp.left,   zoom);
+//	dp.top    = UnScaleByZoom(dp.top,    zoom);
+//	dp.width  = UnScaleByZoom(dp.width,  zoom);
+//	dp.height = UnScaleByZoom(dp.height, zoom);
 
 	do {
 		uint16 colour;
 
 		if (ss->width != 0) {
-			int x = UnScaleByZoom(ss->x, zoom) - 1;
-			int y = UnScaleByZoom(ss->y, zoom) - 1;
+			int x = UnScaleByZoom(ss->x, zoom) - 1 - _cur_vd->vp->virtual_left;
+			int y = UnScaleByZoom(ss->y, zoom) - 1 - _cur_vd->vp->virtual_top;
 			int bottom = y + 11;
 			int w = ss->width;
 
@@ -1521,7 +1652,7 @@
 			colour = TC_BLACK;
 		}
 		DrawString(
-			UnScaleByZoom(ss->x, zoom), UnScaleByZoom(ss->y, zoom) - (ss->width & 0x8000 ? 2 : 0),
+			UnScaleByZoom(ss->x, zoom) - _cur_vd->vp->virtual_left, UnScaleByZoom(ss->y, zoom) - (ss->width & 0x8000 ? 2 : 0)- _cur_vd->vp->virtual_top,
 			ss->string, colour
 		);
 
@@ -1532,32 +1663,39 @@
 void ViewportDoDraw(const ViewPort *vp, int left, int top, int right, int bottom)
 {
 	ViewportDrawer vd;
-	int mask;
 	int x;
 	int y;
 	DrawPixelInfo *old_dpi;
-
+	DrawPixelInfo tmp_dpi;
+   
 	byte mem[VIEWPORT_DRAW_MEM];
 	ParentSpriteToDraw *parent_list[6144];
+	left = left - vp->left;
+	top  = top - vp->top; 
+	right= right - vp->left;
+	bottom = bottom - vp->top; 
 
 	_cur_vd = &vd;
 
 	old_dpi = _cur_dpi;
 	_cur_dpi = &vd.dpi;
-
+//DEBUG(grf, 1, "viewport do draw vp zoom %d", vp->zoom);
+//if ((top <25 )&& (left < 100)){
+//DEBUG(grf, 0, "viewport do draw left %d  top %d right %d bottom %d",left, top,
+//right, bottom);
+//   GTdebug=true;
+//}
+   vd.vp = vp;
 	vd.dpi.zoom = vp->zoom;
-	mask = ScaleByZoom(-1, vp->zoom);
-
 	vd.combine_sprites = 0;
-
-	vd.dpi.width = (right - left) & mask;
-	vd.dpi.height = (bottom - top) & mask;
-	vd.dpi.left = left & mask;
-	vd.dpi.top = top & mask;
+	vd.dpi.width = right - left;
+	vd.dpi.height = bottom - top;
+	vd.dpi.left = left;
+	vd.dpi.top = top;
 	vd.dpi.pitch = old_dpi->pitch;
 
-	x = UnScaleByZoom(vd.dpi.left - (vp->virtual_left & mask), vp->zoom) + vp->left;
-	y = UnScaleByZoom(vd.dpi.top - (vp->virtual_top & mask), vp->zoom) + vp->top;
+	x = left + vp->left;
+	y = top  + vp->top;
 
 	vd.dpi.dst_ptr = BlitterFactoryBase::GetCurrentBlitter()->MoveTo(old_dpi->dst_ptr, x - old_dpi->left, y - old_dpi->top);
 
@@ -1571,11 +1709,17 @@
 	vd.first_tile = NULL;
 
 	ViewportAddLandscape();
-	ViewportAddVehicles(&vd.dpi);
-	DrawTextEffects(&vd.dpi);
+   tmp_dpi = vd.dpi;
+   tmp_dpi.left = ScaleByZoom(vd.vp->virtual_left, vd.vp->zoom);
+   tmp_dpi.top = ScaleByZoom(vd.vp->virtual_top, vd.vp->zoom);
+   tmp_dpi.width = ScaleByZoom(vd.vp->width, vd.vp->zoom);
+   tmp_dpi.height = ScaleByZoom(vd.vp->height, vd.vp->zoom);
 
-	ViewportAddTownNames(&vd.dpi);
-	ViewportAddStationNames(&vd.dpi);
+	ViewportAddVehicles(&tmp_dpi);
+	DrawTextEffects(&tmp_dpi);
+
+	ViewportAddTownNames(&tmp_dpi);
+	ViewportAddStationNames(&tmp_dpi);
 	ViewportAddSigns(&vd.dpi);
 	ViewportAddWaypoints(&vd.dpi);
 
@@ -1601,7 +1745,11 @@
  * If we do, the sprite memory will overflow. */
 static void ViewportDrawChk(const ViewPort *vp, int left, int top, int right, int bottom)
 {
-	if (ScaleByZoom(bottom - top, vp->zoom) * ScaleByZoom(right - left, vp->zoom) > 180000) {
+//	DEBUG(grf, 1, "viewport draw chk left %d  vp left %d vp virt left %d",left, vp->left, vp->virtual_left);
+//DEBUG(grf, 1, "viewport draw chk area: %d", 
+//  (ScaleByZoom(bottom - top,vp->zoom) * ScaleByZoom(right - left, vp->zoom)));
+	if (ScaleByZoom(bottom - top, vp->zoom) * ScaleByZoom(right - left, vp->zoom)
+   > 50000) {
 		if ((bottom - top) > (right - left)) {
 			int t = (top + bottom) >> 1;
 			ViewportDrawChk(vp, left, top, right, t);
@@ -1612,17 +1760,13 @@
 			ViewportDrawChk(vp, t, top, right, bottom);
 		}
 	} else {
-		ViewportDoDraw(vp,
-			ScaleByZoom(left - vp->left, vp->zoom) + vp->virtual_left,
-			ScaleByZoom(top - vp->top, vp->zoom) + vp->virtual_top,
-			ScaleByZoom(right - vp->left, vp->zoom) + vp->virtual_left,
-			ScaleByZoom(bottom - vp->top, vp->zoom) + vp->virtual_top
-		);
+		ViewportDoDraw(vp, left, top,	right, bottom);
 	}
 }
 
 static inline void ViewportDraw(const ViewPort *vp, int left, int top, int right, int bottom)
 {
+//	DEBUG(grf, 0, "viewport draw  left %d vp left %d ",left,vp->left);
 	if (right <= vp->left || bottom <= vp->top) return;
 
 	if (left >= vp->left + vp->width) return;
@@ -1634,7 +1778,7 @@
 
 	if (top < vp->top) top = vp->top;
 	if (bottom > vp->top + vp->height) bottom = vp->top + vp->height;
-
+//	DEBUG(grf, 0, "viewport draw 2 left %d right %d top %d bottom %d",left,right,top,bottom);
 	ViewportDrawChk(vp, left, top, right, bottom);
 }
 
@@ -1644,7 +1788,7 @@
 
 	dpi->left += w->left;
 	dpi->top += w->top;
-
+//	DEBUG(grf, 1, "viewport drawwindow view  dpi left %d top %d",dpi->left,dpi->left);
 	ViewportDraw(w->viewport, dpi->left, dpi->top, dpi->left + dpi->width, dpi->top + dpi->height);
 
 	dpi->left -= w->left;
@@ -1704,6 +1848,7 @@
 		}
 
 		ClampViewportToMap(vp, WP(w, vp_d).scrollpos_x, WP(w, vp_d).scrollpos_y);
+//     	DEBUG(grf, 0, "update viewport pos pt.x %d pt.y %d ",WP(w, vp_d).scrollpos_x, WP(w, vp_d).scrollpos_y);
 		SetViewportPosition(w, WP(w, vp_d).scrollpos_x, WP(w, vp_d).scrollpos_y);
 	}
 }
@@ -1718,26 +1863,32 @@
  */
 static void MarkViewportDirty(const ViewPort *vp, int left, int top, int right, int bottom)
 {
-	right -= vp->virtual_left;
-	if (right <= 0) return;
+   int vt, vl, w, h;
 
-	bottom -= vp->virtual_top;
-	if (bottom <= 0) return;
+ 
+   left = UnScaleByZoom(left, vp->zoom);
+   top  = UnScaleByZoom(top, vp->zoom);
+   right = UnScaleByZoom(right, vp->zoom);
+   bottom = UnScaleByZoom(bottom, vp->zoom);
 
-	left = max(0, left - vp->virtual_left);
+   vl = vp->virtual_left;
+   vt = vp->virtual_top;
+   w = vp->width;
+   h = vp->height;
 
-	if (left >= vp->virtual_width) return;
+   left = max(0, left - vl);
+	if (left >= w) return;
 
-	top = max(0, top - vp->virtual_top);
+	top = max(0, top - vt);
+	if (top >= h ) return;
 
-	if (top >= vp->virtual_height) return;
+	right -= vl;
+	if (right <= 0) return;
 
-	SetDirtyBlocks(
-		UnScaleByZoom(left, vp->zoom) + vp->left,
-		UnScaleByZoom(top, vp->zoom) + vp->top,
-		UnScaleByZoom(right, vp->zoom) + vp->left,
-		UnScaleByZoom(bottom, vp->zoom) + vp->top
-	);
+	bottom -= vt;
+	if (bottom <= 0) return;
+	
+	SetDirtyBlocks(left + vp->left, top + vp->top, right + vp->left, bottom + vp->top);
 }
 
 void MarkAllViewportsDirty(int left, int top, int right, int bottom)
@@ -1835,6 +1986,32 @@
 	if (!HasBit(_display_opt, DO_SHOW_TOWN_NAMES)) return false;
 
 	switch (vp->zoom) {
+   	case ZOOM_LVL_IN_4X:
+			x = x - vp->left + vp->virtual_left;
+			y = y - vp->top  + vp->virtual_top;
+			FOR_ALL_TOWNS(t) {
+				if (y >= t->sign.top &&
+						y < t->sign.top + 12 &&
+						x >= t->sign.left &&
+						x < t->sign.left + t->sign.width_1) {
+					ShowTownViewWindow(t->index);
+					return true;
+				}
+			}
+			break;
+   	case ZOOM_LVL_IN_2X:
+			x = x - vp->left + vp->virtual_left;
+			y = y - vp->top  + vp->virtual_top;
+			FOR_ALL_TOWNS(t) {
+				if (y >= t->sign.top &&
+						y < t->sign.top + 12 &&
+						x >= t->sign.left &&
+						x < t->sign.left + t->sign.width_1) {
+					ShowTownViewWindow(t->index);
+					return true;
+				}
+			}
+			break;
 		case ZOOM_LVL_NORMAL:
 			x = x - vp->left + vp->virtual_left;
 			y = y - vp->top  + vp->virtual_top;
@@ -1893,6 +2070,32 @@
 	if (!HasBit(_display_opt, DO_SHOW_STATION_NAMES)) return false;
 
 	switch (vp->zoom) {
+		case ZOOM_LVL_IN_4X:
+			x = x - vp->left + vp->virtual_left;
+			y = y - vp->top  + vp->virtual_top;
+			FOR_ALL_STATIONS(st) {
+				if (y >= st->sign.top &&
+						y < st->sign.top + 12 &&
+						x >= st->sign.left &&
+						x < st->sign.left + st->sign.width_1) {
+					ShowStationViewWindow(st->index);
+					return true;
+				}
+			}
+			break;
+		case ZOOM_LVL_IN_2X:
+			x = x - vp->left + vp->virtual_left;
+			y = y - vp->top  + vp->virtual_top;
+			FOR_ALL_STATIONS(st) {
+				if (y >= st->sign.top &&
+						y < st->sign.top + 12 &&
+						x >= st->sign.left &&
+						x < st->sign.left + st->sign.width_1) {
+					ShowStationViewWindow(st->index);
+					return true;
+				}
+			}
+			break;
 		case ZOOM_LVL_NORMAL:
 			x = x - vp->left + vp->virtual_left;
 			y = y - vp->top  + vp->virtual_top;
@@ -1951,6 +2154,32 @@
 	if (!HasBit(_display_opt, DO_SHOW_SIGNS) || _current_player == PLAYER_SPECTATOR) return false;
 
 	switch (vp->zoom) {
+		case ZOOM_LVL_IN_4X:
+			x = x - vp->left + vp->virtual_left;
+			y = y - vp->top  + vp->virtual_top;
+			FOR_ALL_SIGNS(si) {
+				if (y >= si->sign.top &&
+						y <  si->sign.top + 12 &&
+						x >= si->sign.left &&
+						x <  si->sign.left + si->sign.width_1) {
+					ShowRenameSignWindow(si);
+					return true;
+				}
+			}
+			break;
+		case ZOOM_LVL_IN_2X:
+			x = x - vp->left + vp->virtual_left;
+			y = y - vp->top  + vp->virtual_top;
+			FOR_ALL_SIGNS(si) {
+				if (y >= si->sign.top &&
+						y <  si->sign.top + 12 &&
+						x >= si->sign.left &&
+						x <  si->sign.left + si->sign.width_1) {
+					ShowRenameSignWindow(si);
+					return true;
+				}
+			}
+			break;            
 		case ZOOM_LVL_NORMAL:
 			x = x - vp->left + vp->virtual_left;
 			y = y - vp->top  + vp->virtual_top;
@@ -2009,6 +2238,32 @@
 	if (!HasBit(_display_opt, DO_WAYPOINTS)) return false;
 
 	switch (vp->zoom) {
+		case ZOOM_LVL_IN_4X:
+			x = x - vp->left + vp->virtual_left;
+			y = y - vp->top  + vp->virtual_top;
+			FOR_ALL_WAYPOINTS(wp) {
+				if (y >= wp->sign.top &&
+						y < wp->sign.top + 12 &&
+						x >= wp->sign.left &&
+						x < wp->sign.left + wp->sign.width_1) {
+					ShowRenameWaypointWindow(wp);
+					return true;
+				}
+			}
+			break;
+		case ZOOM_LVL_IN_2X:
+			x = x - vp->left + vp->virtual_left;
+			y = y - vp->top  + vp->virtual_top;
+			FOR_ALL_WAYPOINTS(wp) {
+				if (y >= wp->sign.top &&
+						y < wp->sign.top + 12 &&
+						x >= wp->sign.left &&
+						x < wp->sign.left + wp->sign.width_1) {
+					ShowRenameWaypointWindow(wp);
+					return true;
+				}
+			}
+			break;
 		case ZOOM_LVL_NORMAL:
 			x = x - vp->left + vp->virtual_left;
 			y = y - vp->top  + vp->virtual_top;
Index: src/blitter/32bpp_optimized.cpp
===================================================================
--- src/blitter/32bpp_optimized.cpp	(revision 11813)
+++ src/blitter/32bpp_optimized.cpp	(working copy)
@@ -1,6 +1,7 @@
 /* $Id$ */
 
 #include "../stdafx.h"
+#include "../core/alloc_func.hpp"
 #include "../zoom_func.h"
 #include "../gfx_func.h"
 #include "../debug.h"
@@ -15,7 +16,8 @@
 	uint32 *dst, *dst_line;
 
 	/* Find where to start reading in the source sprite */
-	src_line = (const SpriteLoader::CommonPixel *)bp->sprite + (bp->skip_top * bp->sprite_width + bp->skip_left) * ScaleByZoom(1, zoom);
+
+	src_line = (const SpriteLoader::CommonPixel *)bp->sprite + (bp->skip_top *  bp->sprite_width + bp->skip_left); 
 	dst_line = (uint32 *)bp->dst + bp->top * bp->pitch + bp->left;
 
 	for (int y = 0; y < bp->height; y++) {
@@ -23,16 +25,19 @@
 		dst_line += bp->pitch;
 
 		src = src_line;
-		src_line += bp->sprite_width * ScaleByZoom(1, zoom);
+		src_line += bp->sprite_width ; 
 
 		for (int x = 0; x < bp->width; x++) {
 			if (src->a == 0) {
 				/* src->r is 'misused' here to indicate how much more pixels are following with an alpha of 0 */
-				int skip = UnScaleByZoom(src->r, zoom);
-
+        	  
+				int skip = src->r; 
+//            DEBUG(driver, 1, "Draw blitter r %d skip %d",src->r,skip);  
+            if (skip==0)
+               continue;
 				dst += skip;
 				x   += skip - 1;
-				src += ScaleByZoom(1, zoom) * skip;
+				src += skip; 
 				continue;
 			}
 
@@ -42,17 +47,36 @@
 					if (src->m == 0) {
 						*dst = ComposeColourRGBA(src->r, src->g, src->b, src->a, *dst);
 					} else {
+						if (bp->remap[src->m] != 0) {
+                     *dst = ComposeColourRGBA(src->r, src->g, src->b, src->a, *dst);
+                     *dst = ComposeColourMultiply(this->LookupColourInPalette(bp->remap[src->m]), *dst);                     
+                  }
+					}
+					break;
+            case BM_COLOUR_OPAQUE:
+              	/* In case the m-channel is zero, do not remap this pixel in any way */
+					if (src->m == 0) {
+						*dst = ComposeColourRGBA(src->r, src->g, src->b, src->a, *dst);
+					} else {
 						if (bp->remap[src->m] != 0) *dst = ComposeColourPA(this->LookupColourInPalette(bp->remap[src->m]), src->a, *dst);
 					}
 					break;
-
 				case BM_TRANSPARENT:
-					/* TODO -- We make an assumption here that the remap in fact is transparency, not some color.
-					 *  This is never a problem with the code we produce, but newgrfs can make it fail... or at least:
-					 *  we produce a result the newgrf maker didn't expect ;) */
-
-					/* Make the current color a bit more black, so it looks like this image is transparent */
-					*dst = MakeTransparent(*dst, 192);
+               /* GeekToo: for 32bpp remap of colours and transparency are not 
+                  mutual exclusive. For now, check the remap ptr to check for 
+                  remapping, in the future a cleaner solution will be to create
+                  an extra blitter mode
+               */    
+//					*dst = MakeTransparent(*dst, 192);
+  					if (src->m == 0) {
+						*dst = ComposeColourRGBA(src->r, src->g, src->b, src->a/2, *dst);
+					} else {
+                  if(bp->remap){               
+						   if (bp->remap[src->m] != 0) *dst =
+                       ComposeColourPA(this->LookupColourInPalette(bp->remap[src->m]), src->a/2, *dst);
+                  } else      
+     						*dst = ComposeColourRGBA(src->r, src->g, src->b, src->a/2, *dst);
+					}
 					break;
 
 				default:
@@ -60,7 +84,7 @@
 					break;
 			}
 			dst++;
-			src += ScaleByZoom(1, zoom);
+			src += 1; 
 		}
 	}
 }
@@ -97,10 +121,14 @@
 				trans = 0;
 				if (dst->m != 0) {
 					/* Pre-convert the mapping channel to a RGB value */
-					uint color = this->LookupColourInPalette(dst->m);
-					dst->r = GB(color, 16, 8);
-					dst->g = GB(color, 8,  8);
-					dst->b = GB(color, 0,  8);
+               /* GeekToo: only do this when the source data is 8bpp ) */
+               if ( !dst->r && !dst->g && !dst->b )
+					{
+                  uint color = this->LookupColourInPalette(dst->m);
+					   dst->r = GB(color, 16, 8);
+					   dst->g = GB(color, 8,  8);
+					   dst->b = GB(color, 0,  8);
+               }
 				}
 			}
 			dst--;
@@ -108,3 +136,122 @@
 	}
 	return dest_sprite;
 }
+
+void Blitter_32bppOptimized::RescaleSpriteHalfSize(const SpriteLoader::Sprite *src_sprite,
+                                                         SpriteLoader::Sprite *dest_sprite, 
+                                                         bool                 prevent_alpha_bleeding)
+{
+   SpriteLoader::CommonPixel *dst;
+   SpriteLoader::CommonPixel *src;
+	int width, height;
+	int x, y;
+
+	width = (src_sprite->width + 1) / 2;
+	height = (src_sprite->height + 1) / 2;
+	dest_sprite->data = CallocT<SpriteLoader::CommonPixel>(height * width);   
+   dst = (SpriteLoader::CommonPixel *)dest_sprite->data;
+   src = (SpriteLoader::CommonPixel *)src_sprite->data;
+	
+	dest_sprite->width = width;
+	dest_sprite->height = height;
+
+	dest_sprite->x_offs = src_sprite->x_offs / 2;
+	dest_sprite->y_offs = src_sprite->y_offs / 2;
+
+//	dest_sprite->mask = (uint8*) (data + sizeof(Sprite) + imgsz);
+
+	for (y = 0; y < height; y++) {
+		for (x = 0; x < width; x++) {
+//			byte mask   = src->mask[ 2 * y      * src->wpitch +  2 * x     ];
+//			byte mask01 = src->mask[(2 * y + 1) * src->wpitch +  2 * x     ];
+//			byte mask10 = src->mask[ 2 * y      * src->wpitch + (2 * x + 1)];
+//			byte mask11 = src->mask[(2 * y + 1) * src->wpitch + (2 * x + 1)];
+
+//			dest_sprite->mask[y * wpitch + x] = mask;
+//			if (mask == mask01 && mask == mask10 && mask == mask11) {
+				uint ma = 0;
+				uint a = 0;
+				uint r = 0;
+				uint g = 0;
+				uint b = 0;
+				uint i;
+				uint j;
+            SpriteLoader::CommonPixel clr;
+				for (i = 0; i < 2; i++) {
+					for (j = 0; j < 2; j++) {
+						clr = src[((2 * y ) * src_sprite->width) + (2 * x + i )];
+                  
+						uint ca = clr.a;
+						uint cr = clr.r;
+						uint cg = clr.g;
+						uint cb = clr.b;
+                  
+						a += ca;
+						r += ca * cr;
+						g += ca * cg;
+						b += ca * cb;
+						if (prevent_alpha_bleeding) {
+							if (ca > ma) ma = ca;
+						} else {
+							ma += ca;
+						}
+					}
+				}
+
+				if (a == 0) {
+
+  					dst[y * width + x].r = 0;
+  					dst[y * width + x].g = 0;
+  					dst[y * width + x].b = 0;
+  					dst[y * width + x].a = 0;
+  					dst[y * width + x].m = 0;  /* to do: color remap */
+				} else {
+					r /= a;
+					g /= a;
+					b /= a;
+					if (prevent_alpha_bleeding) {
+						a = ma;
+					} else {
+						a /= 4;
+					}
+  					dst[y * width + x].r = r;
+  					dst[y * width + x].g = g;
+  					dst[y * width + x].b = b;
+  					dst[y * width + x].a = a;
+  					dst[y * width + x].m = clr.m;  /* to do: color remap */
+
+				}
+//			} else {
+//				dst[y * width + x] = src->image[2 * y * src->wpitch + 2 * x];
+//			}
+		}
+	}
+}
+
+void Blitter_32bppOptimized::RescaleSpriteDoubleSize(const SpriteLoader::Sprite *src_sprite,
+                                                           SpriteLoader::Sprite *dest_sprite)
+{
+	int width, height;
+	int x, y;
+   SpriteLoader::CommonPixel *dst;
+   SpriteLoader::CommonPixel *src;
+
+	width = src_sprite->width * 2;
+	height = src_sprite->height * 2;
+
+	dest_sprite->data = CallocT<SpriteLoader::CommonPixel>(height * width);   
+	dst = (SpriteLoader::CommonPixel *)dest_sprite->data;
+   src = (SpriteLoader::CommonPixel *)src_sprite->data;
+
+	dest_sprite->width = width;
+	dest_sprite->height = height;
+	dest_sprite->x_offs = src_sprite->x_offs * 2;
+	dest_sprite->y_offs = src_sprite->y_offs * 2;
+
+	for (y = 0; y < height; y++) {
+		for (x = 0; x < width; x++) {
+			dst[y * width + x] = src[(y / 2) * src_sprite->width + (x / 2)];
+//			dst_sprite->mask[y * dest_sprite->wpitch + x] = src->mask[(y / 2) * src->wpitch + (x / 2)];
+		}
+	}
+}
Index: src/blitter/base.hpp
===================================================================
--- src/blitter/base.hpp	(revision 11813)
+++ src/blitter/base.hpp	(working copy)
@@ -11,6 +11,7 @@
 	BM_NORMAL,
 	BM_COLOUR_REMAP,
 	BM_TRANSPARENT,
+   BM_COLOUR_OPAQUE
 };
 
 /**
Index: src/blitter/32bpp_optimized.hpp
===================================================================
--- src/blitter/32bpp_optimized.hpp	(revision 11813)
+++ src/blitter/32bpp_optimized.hpp	(working copy)
@@ -12,6 +12,11 @@
 public:
 	/* virtual */ void Draw(Blitter::BlitterParams *bp, BlitterMode mode, ZoomLevel zoom);
 	/* virtual */ Sprite *Encode(SpriteLoader::Sprite *sprite, Blitter::AllocatorProc *allocator);
+                 void RescaleSpriteHalfSize(const SpriteLoader::Sprite *src_sprite, 
+                                                  SpriteLoader::Sprite *dest_sprite,
+                                                  bool                 prevent_alpha_bleeding);
+                 void RescaleSpriteDoubleSize(const SpriteLoader::Sprite *src_sprite,
+                                                    SpriteLoader::Sprite *dest_sprite);                                               
 
 	/* virtual */ const char *GetName() { return "32bpp-optimized"; }
 };
Index: src/blitter/32bpp_base.hpp
===================================================================
--- src/blitter/32bpp_base.hpp	(revision 11813)
+++ src/blitter/32bpp_base.hpp	(working copy)
@@ -7,6 +7,7 @@
 
 #include "base.hpp"
 #include "../core/bitmath_func.hpp"
+#include "../core/math_func.hpp"
 
 class Blitter_32bppBase : public Blitter {
 public:
@@ -87,6 +88,79 @@
 												(b * a + cb * (256 - a)) / 256);
 	}
 
+/**
+	* Compose a colour based on Pixel value, alpha value, and the current pixel value.
+	*/
+	static inline uint ComposeColourMultiply(uint colour, uint current)
+	{
+		uint r, g, b, cr, cg, cb, lm, ls, max_m, min_m, max_s, min_s, mid_s;
+
+      if (colour == current) {
+         return colour;
+      }
+
+		r  = GB(colour,  16, 8);
+		g  = GB(colour,  8,  8);
+		b  = GB(colour,  0,  8);
+      
+		cr = GB(current, 16, 8);
+		cg = GB(current, 8,  8);
+		cb = GB(current, 0,  8);
+
+      if (cr < cg)
+         Swap(cr,cg);
+      if (cg < cb)
+         Swap(cg,cb);
+      if (cr < cg)
+         Swap(cr,cg);
+      if (r>g)
+         if(r>b)
+            if(b>g)
+               mid_s=3;
+            else
+               mid_s=2;
+         else
+               mid_s=1;
+      else
+         if(r>b)
+            mid_s=1;
+         else
+            if(b>g)
+               mid_s=2;
+            else
+               mid_s=3;   
+                     
+                        
+      
+      max_s = max(max(cr,cg),cb);
+      min_s = max(max(cr,cg),cb);
+      max_m = max(max(r,g),b);
+      min_m = min(min(r,g),b);
+
+      lm = r + g + b;  
+      ls = cr + cg + cb;    
+      if (r==max_m)
+         r=cr;
+      if (g==max_m)
+         g=cr;   
+      if (b==max_m)
+         b=cr;   
+      if (r==min_m)
+         r=cb;
+      if (g==min_m)
+         g=cb;   
+      if (b==min_m)
+         b=cb;
+      if(mid_s==1)
+         r=cg;         
+      if(mid_s==2)
+         g=cg;            
+      if(mid_s==3)
+         b=cg;            
+  		return ComposeColour(0xff,r,g,b);      
+	}
+
+
 	/**
 	* Make a pixel looks like it is transparent.
 	* @param colour the colour already on the screen.
@@ -95,12 +169,14 @@
 	*/
 	static inline uint MakeTransparent(uint colour, uint amount)
 	{
-		uint r, g, b;
+		uint r, g, b, a;
+ 		a = GB(colour, 24, 8);
 		r = GB(colour, 16, 8);
 		g = GB(colour, 8,  8);
 		b = GB(colour, 0,  8);
 
-		return ComposeColour(0xFF, r * amount / 256, g * amount / 256, b * amount / 256);
+//		return ComposeColour(0xFF, r * amount / 256, g * amount / 256, b * amount / 256);
+		return ComposeColour(a * amount / 256, r , g , b );
 	}
 
 	/**
Index: src/blitter/32bpp_anim.cpp
===================================================================
--- src/blitter/32bpp_anim.cpp	(revision 11813)
+++ src/blitter/32bpp_anim.cpp	(working copy)
@@ -78,8 +78,10 @@
 					 *  we produce a result the newgrf maker didn't expect ;) */
 
 					/* Make the current color a bit more black, so it looks like this image is transparent */
-					*dst = MakeTransparent(*dst, 192);
-					*anim = bp->remap[*anim];
+//					*dst = MakeTransparent(*dst, 192);
+     				*dst = ComposeColourRGBA(src->r, src->g, src->b, src->a * 100/256, *dst);
+//					*anim = bp->remap[*anim];
+					*anim = src->m;
 					break;
 
 				default:
Index: src/gfx.cpp
===================================================================
--- src/gfx.cpp	(revision 11813)
+++ src/gfx.cpp	(working copy)
@@ -617,7 +617,7 @@
 		if (IsPrintable(c)) {
 			if (x >= dpi->left + dpi->width) goto skip_char;
 			if (x + 26 >= dpi->left) {
-				GfxMainBlitter(GetGlyph(size, c), x, y, BM_COLOUR_REMAP);
+				GfxMainBlitter(GetGlyph(size, c), x, y, BM_COLOUR_OPAQUE);
 			}
 			x += GetCharacterWidth(size, c);
 		} else if (c == '\n') { // newline = {}
@@ -657,9 +657,16 @@
 void DrawSprite(SpriteID img, SpriteID pal, int x, int y, const SubSprite *sub)
 {
 	if (HasBit(img, PALETTE_MODIFIER_TRANSPARENT)) {
-		_color_remap_ptr = GetNonSprite(GB(pal, 0, PALETTE_WIDTH)) + 1;
+      if (pal != PAL_NONE) {
+	   	_color_remap_ptr = GetNonSprite(GB(pal, 0, PALETTE_WIDTH)) + 1;
+		}
+      else
+      {
+         _color_remap_ptr = NULL;
+      }
 		GfxMainBlitter(GetSprite(GB(img, 0, SPRITE_WIDTH)), x, y, BM_TRANSPARENT, sub);
-	} else if (pal != PAL_NONE) {
+	} else 
+   if (pal != PAL_NONE) {
 		_color_remap_ptr = GetNonSprite(GB(pal, 0, PALETTE_WIDTH)) + 1;
 		GfxMainBlitter(GetSprite(GB(img, 0, SPRITE_WIDTH)), x, y, BM_COLOUR_REMAP, sub);
 	} else {
@@ -689,15 +696,17 @@
 	bp.sprite = sprite->data;
 	bp.sprite_width = sprite->width;
 	bp.sprite_height = sprite->height;
-	bp.width = UnScaleByZoom(sprite->width - clip_left - clip_right, dpi->zoom);
-	bp.height = UnScaleByZoom(sprite->height - clip_top - clip_bottom, dpi->zoom);
+
+
+	bp.width = (sprite->width - clip_left - clip_right) ;
+	bp.height = (sprite->height - clip_top - clip_bottom) ;
 	bp.top = 0;
 	bp.left = 0;
-	bp.skip_left = UnScaleByZoom(clip_left, dpi->zoom);
-	bp.skip_top = UnScaleByZoom(clip_top, dpi->zoom);
+	bp.skip_left = clip_left ; 
+	bp.skip_top = clip_top ; 
 
-	x += ScaleByZoom(bp.skip_left, dpi->zoom);
-	y += ScaleByZoom(bp.skip_top, dpi->zoom);
+	x += bp.skip_left; 
+	y += bp.skip_top; 
 
 	bp.dst = dpi->dst_ptr;
 	bp.pitch = dpi->pitch;
@@ -711,37 +720,40 @@
 
 	y -= dpi->top;
 	/* Check for top overflow */
-	if (y < 0) {
-		bp.height -= -UnScaleByZoom(y, dpi->zoom);
+
+	if (y < 0) { 
+		bp.height -= -y; 
 		if (bp.height <= 0) return;
-		bp.skip_top += -UnScaleByZoom(y, dpi->zoom);
+		bp.skip_top += -y; 
 		y = 0;
 	} else {
-		bp.top = UnScaleByZoom(y, dpi->zoom);
+		bp.top = y; 
 	}
 
 	/* Check for bottom overflow */
-	y += ScaleByZoom(bp.height, dpi->zoom) - dpi->height;
-	if (y > 0) {
-		bp.height -= UnScaleByZoom(y, dpi->zoom);
+   
+	y += bp.height - dpi->height; 
+
+	if (y > 0) {    
+		bp.height -= y; //UnScaleByZoom(y, dpi->zoom);
 		if (bp.height <= 0) return;
 	}
 
 	x -= dpi->left;
 	/* Check for left overflow */
 	if (x < 0) {
-		bp.width -= -UnScaleByZoom(x, dpi->zoom);
+		bp.width -= -x; 
 		if (bp.width <= 0) return;
-		bp.skip_left += -UnScaleByZoom(x, dpi->zoom);
+		bp.skip_left += -x ;
 		x = 0;
 	} else {
-		bp.left = UnScaleByZoom(x, dpi->zoom);
+		bp.left = x; 
 	}
 
 	/* Check for right overflow */
-	x += ScaleByZoom(bp.width, dpi->zoom) - dpi->width;
+	x += bp.width - dpi->width; 
 	if (x > 0) {
-		bp.width -= UnScaleByZoom(x, dpi->zoom);
+		bp.width -= x; 
 		if (bp.width <= 0) return;
 	}
 
@@ -1118,7 +1130,10 @@
 	byte *b;
 	int width;
 	int height;
-
+   left -=7;
+   right += 7;
+   top -= 7;
+   bottom += 7;
 	if (left < 0) left = 0;
 	if (top < 0) top = 0;
 	if (right > _screen.width) right = _screen.width;
Index: src/player_gui.cpp
===================================================================
--- src/player_gui.cpp	(revision 11813)
+++ src/player_gui.cpp	(working copy)
@@ -28,6 +28,7 @@
 #include "window_func.h"
 #include "date_func.h"
 #include "string_func.h"
+#include "zoom_type.h"
 
 static void DoShowPlayerFinances(PlayerID player, bool show_small, bool show_stickied);
 static void DoSelectPlayerFace(PlayerID player, bool show_big);
@@ -523,6 +524,7 @@
 		}
 		DrawSprite(GetPlayerFaceSprite(pf, pfv, ge), (pfv == PFV_EYEBROWS) ? pal : PAL_NONE, x, y);
 	}
+
 }
 
 /**
@@ -584,67 +586,67 @@
 /** Widget description for the normal/simple player face selection dialog */
 static const Widget _select_player_face_widgets[] = {
 {   WWT_CLOSEBOX,   RESIZE_NONE,    14,     0,    10,     0,    13, STR_00C5,                STR_018B_CLOSE_WINDOW},              // PFW_WIDGET_CLOSEBOX
-{    WWT_CAPTION,   RESIZE_NONE,    14,    11,   174,     0,    13, STR_7043_FACE_SELECTION, STR_018C_WINDOW_TITLE_DRAG_THIS},    // PFW_WIDGET_CAPTION
-{     WWT_IMGBTN,   RESIZE_NONE,    14,   175,   189,     0,    13, SPR_LARGE_SMALL_WINDOW,  STR_FACE_ADVANCED_TIP},              // PFW_WIDGET_TOGGLE_LARGE_SMALL
-{      WWT_PANEL,   RESIZE_NONE,    14,     0,   189,    14,   150, 0x0,                     STR_NULL},                           // PFW_WIDGET_SELECT_FACE
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,     0,    94,   151,   162, STR_012E_CANCEL,         STR_7047_CANCEL_NEW_FACE_SELECTION}, // PFW_WIDGET_CANCEL
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,    95,   189,   151,   162, STR_012F_OK,             STR_7048_ACCEPT_NEW_FACE_SELECTION}, // PFW_WIDGET_ACCEPT
-{    WWT_TEXTBTN,   RESIZE_NONE,    14,    95,   187,    75,    86, STR_7044_MALE,           STR_7049_SELECT_MALE_FACES},         // PFW_WIDGET_MALE
-{    WWT_TEXTBTN,   RESIZE_NONE,    14,    95,   187,    87,    98, STR_7045_FEMALE,         STR_704A_SELECT_FEMALE_FACES},       // PFW_WIDGET_FEMALE
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,     2,    93,   137,   148, STR_7046_NEW_FACE,       STR_704B_GENERATE_RANDOM_NEW_FACE},  // PFW_WIDGET_RANDOM_NEW_FACE
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,    95,   187,    16,    27, STR_FACE_ADVANCED,       STR_FACE_ADVANCED_TIP},              // PFW_WIDGET_TOGGLE_LARGE_SMALL_BUTTON
+{    WWT_CAPTION,   RESIZE_NONE,    14,    11,   292,     0,    13, STR_7043_FACE_SELECTION, STR_018C_WINDOW_TITLE_DRAG_THIS},    // PFW_WIDGET_CAPTION
+{     WWT_IMGBTN,   RESIZE_NONE,    14,   293,   307,     0,    13, SPR_LARGE_SMALL_WINDOW,  STR_FACE_ADVANCED_TIP},              // PFW_WIDGET_TOGGLE_LARGE_SMALL
+{      WWT_PANEL,   RESIZE_NONE,    14,     0,   307,    14,   311, 0x0,                     STR_NULL},                           // PFW_WIDGET_SELECT_FACE
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,     0,   154,   312,   323, STR_012E_CANCEL,         STR_7047_CANCEL_NEW_FACE_SELECTION}, // PFW_WIDGET_CANCEL
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,    155,  307,   312,   323, STR_012F_OK,             STR_7048_ACCEPT_NEW_FACE_SELECTION}, // PFW_WIDGET_ACCEPT
+{    WWT_TEXTBTN,   RESIZE_NONE,    14,    201,  303,    75,    86, STR_7044_MALE,           STR_7049_SELECT_MALE_FACES},         // PFW_WIDGET_MALE
+{    WWT_TEXTBTN,   RESIZE_NONE,    14,    201,  303,    87,    98, STR_7045_FEMALE,         STR_704A_SELECT_FEMALE_FACES},       // PFW_WIDGET_FEMALE
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,     2,    93,   277,   288, STR_7046_NEW_FACE,       STR_704B_GENERATE_RANDOM_NEW_FACE},  // PFW_WIDGET_RANDOM_NEW_FACE
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,    201,  303,    16,    27, STR_FACE_ADVANCED,       STR_FACE_ADVANCED_TIP},              // PFW_WIDGET_TOGGLE_LARGE_SMALL_BUTTON
 {   WIDGETS_END},
 };
 
 /** Widget description for the advanced player face selection dialog */
 static const Widget _select_player_face_adv_widgets[] = {
 {   WWT_CLOSEBOX,   RESIZE_NONE,    14,     0,    10,     0,    13, STR_00C5,                STR_018B_CLOSE_WINDOW},              // PFW_WIDGET_CLOSEBOX
-{    WWT_CAPTION,   RESIZE_NONE,    14,    11,   204,     0,    13, STR_7043_FACE_SELECTION, STR_018C_WINDOW_TITLE_DRAG_THIS},    // PFW_WIDGET_CAPTION
-{     WWT_IMGBTN,   RESIZE_NONE,    14,   205,   219,     0,    13, SPR_LARGE_SMALL_WINDOW,  STR_FACE_SIMPLE_TIP},                // PFW_WIDGET_TOGGLE_LARGE_SMALL
-{      WWT_PANEL,   RESIZE_NONE,    14,     0,   219,    14,   207, 0x0,                     STR_NULL},                           // PFW_WIDGET_SELECT_FACE
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,     0,    94,   208,   219, STR_012E_CANCEL,         STR_7047_CANCEL_NEW_FACE_SELECTION}, // PFW_WIDGET_CANCEL
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,    95,   219,   208,   219, STR_012F_OK,             STR_7048_ACCEPT_NEW_FACE_SELECTION}, // PFW_WIDGET_ACCEPT
-{    WWT_TEXTBTN,   RESIZE_NONE,    14,    96,   156,    32,    43, STR_7044_MALE,           STR_7049_SELECT_MALE_FACES},         // PFW_WIDGET_MALE
-{    WWT_TEXTBTN,   RESIZE_NONE,    14,   157,   217,    32,    43, STR_7045_FEMALE,         STR_704A_SELECT_FEMALE_FACES},       // PFW_WIDGET_FEMALE
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,     2,    93,   137,   148, STR_RANDOM,              STR_704B_GENERATE_RANDOM_NEW_FACE},  // PFW_WIDGET_RANDOM_NEW_FACE
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,    95,   217,    16,    27, STR_FACE_SIMPLE,         STR_FACE_SIMPLE_TIP},                // PFW_WIDGET_TOGGLE_LARGE_SMALL_BUTTON
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,     2,    93,   158,   169, STR_FACE_LOAD,           STR_FACE_LOAD_TIP},                  // PFW_WIDGET_LOAD
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,     2,    93,   170,   181, STR_FACE_FACECODE,       STR_FACE_FACECODE_TIP},              // PFW_WIDGET_FACECODE
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,     2,    93,   182,   193, STR_FACE_SAVE,           STR_FACE_SAVE_TIP},                  // PFW_WIDGET_SAVE
-{    WWT_TEXTBTN,   RESIZE_NONE,    14,    96,   156,    46,    57, STR_FACE_EUROPEAN,       STR_FACE_SELECT_EUROPEAN},           // PFW_WIDGET_ETHNICITY_EUR
-{    WWT_TEXTBTN,   RESIZE_NONE,    14,   157,   217,    46,    57, STR_FACE_AFRICAN,        STR_FACE_SELECT_AFRICAN},            // PFW_WIDGET_ETHNICITY_AFR
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,   175,   217,    60,    71, STR_EMPTY,               STR_FACE_MOUSTACHE_EARRING_TIP},     // PFW_WIDGET_HAS_MOUSTACHE_EARRING
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,   175,   217,    72,    83, STR_EMPTY,               STR_FACE_GLASSES_TIP},               // PFW_WIDGET_HAS_GLASSES
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    175,  183,   110,   121, SPR_ARROW_LEFT,          STR_FACE_EYECOLOUR_TIP},             // PFW_WIDGET_EYECOLOUR_L
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,    184,  208,   110,   121, STR_EMPTY,               STR_FACE_EYECOLOUR_TIP},             // PFW_WIDGET_EYECOLOUR
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    209,  217,   110,   121, SPR_ARROW_RIGHT,         STR_FACE_EYECOLOUR_TIP},             // PFW_WIDGET_EYECOLOUR_R
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    175,  183,   158,   169, SPR_ARROW_LEFT,          STR_FACE_CHIN_TIP},                  // PFW_WIDGET_CHIN_L
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,    184,  208,   158,   169, STR_EMPTY,               STR_FACE_CHIN_TIP},                  // PFW_WIDGET_CHIN
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    209,  217,   158,   169, SPR_ARROW_RIGHT,         STR_FACE_CHIN_TIP},                  // PFW_WIDGET_CHIN_R
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    175,  183,    98,   109, SPR_ARROW_LEFT,          STR_FACE_EYEBROWS_TIP},              // PFW_WIDGET_EYEBROWS_L
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,    184,  208,    98,   109, STR_EMPTY,               STR_FACE_EYEBROWS_TIP},              // PFW_WIDGET_EYEBROWS
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    209,  217,    98,   109, SPR_ARROW_RIGHT,         STR_FACE_EYEBROWS_TIP},              // PFW_WIDGET_EYEBROWS_R
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    175,  183,   146,   157, SPR_ARROW_LEFT,          STR_FACE_LIPS_MOUSTACHE_TIP},        // PFW_WIDGET_LIPS_MOUSTACHE_L
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,    184,  208,   146,   157, STR_EMPTY,               STR_FACE_LIPS_MOUSTACHE_TIP},        // PFW_WIDGET_LIPS_MOUSTACHE
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    209,  217,   146,   157, SPR_ARROW_RIGHT,         STR_FACE_LIPS_MOUSTACHE_TIP},        // PFW_WIDGET_LIPS_MOUSTACHE_R
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    175,  183,   134,   145, SPR_ARROW_LEFT,          STR_FACE_NOSE_TIP},                  // PFW_WIDGET_NOSE_L
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,    184,  208,   134,   145, STR_EMPTY,               STR_FACE_NOSE_TIP},                  // PFW_WIDGET_NOSE
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    209,  217,   134,   145, SPR_ARROW_RIGHT,         STR_FACE_NOSE_TIP},                  // PFW_WIDGET_NOSE_R
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    175,  183,    86,    97, SPR_ARROW_LEFT,          STR_FACE_HAIR_TIP},                  // PFW_WIDGET_HAIR_L
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,    184,  208,    86,    97, STR_EMPTY,               STR_FACE_HAIR_TIP},                  // PFW_WIDGET_HAIR
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    209,  217,    86,    97, SPR_ARROW_RIGHT,         STR_FACE_HAIR_TIP},                  // PFW_WIDGET_HAIR_R
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    175,  183,   170,   181, SPR_ARROW_LEFT,          STR_FACE_JACKET_TIP},                // PFW_WIDGET_JACKET_L
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,    184,  208,   170,   181, STR_EMPTY,               STR_FACE_JACKET_TIP},                // PFW_WIDGET_JACKET
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    209,  217,   170,   181, SPR_ARROW_RIGHT,         STR_FACE_JACKET_TIP},                // PFW_WIDGET_JACKET_R
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    175,  183,   182,   193, SPR_ARROW_LEFT,          STR_FACE_COLLAR_TIP},                // PFW_WIDGET_COLLAR_L
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,    184,  208,   182,   193, STR_EMPTY,               STR_FACE_COLLAR_TIP},                // PFW_WIDGET_COLLAR
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    209,  217,   182,   193, SPR_ARROW_RIGHT,         STR_FACE_COLLAR_TIP},                // PFW_WIDGET_COLLAR_R
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    175,  183,   194,   205, SPR_ARROW_LEFT,          STR_FACE_TIE_EARRING_TIP},           // PFW_WIDGET_TIE_EARRING_L
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,    184,  208,   194,   205, STR_EMPTY,               STR_FACE_TIE_EARRING_TIP},           // PFW_WIDGET_TIE_EARRING
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    209,  217,   194,   205, SPR_ARROW_RIGHT,         STR_FACE_TIE_EARRING_TIP},           // PFW_WIDGET_TIE_EARRING_R
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    175,  183,   122,   133, SPR_ARROW_LEFT,          STR_FACE_GLASSES_TIP_2},             // PFW_WIDGET_GLASSES_L
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,    184,  208,   122,   133, STR_EMPTY,               STR_FACE_GLASSES_TIP_2},             // PFW_WIDGET_GLASSES
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    209,  217,   122,   133, SPR_ARROW_RIGHT,         STR_FACE_GLASSES_TIP_2},             // PFW_WIDGET_GLASSES_R
+{    WWT_CAPTION,   RESIZE_NONE,    14,    11,   313,     0,    13, STR_7043_FACE_SELECTION, STR_018C_WINDOW_TITLE_DRAG_THIS},    // PFW_WIDGET_CAPTION
+{     WWT_IMGBTN,   RESIZE_NONE,    14,   313,   327,     0,    13, SPR_LARGE_SMALL_WINDOW,  STR_FACE_SIMPLE_TIP},                // PFW_WIDGET_TOGGLE_LARGE_SMALL
+{      WWT_PANEL,   RESIZE_NONE,    14,     0,   327,    14,   311, 0x0,                     STR_NULL},                           // PFW_WIDGET_SELECT_FACE
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,     0,   163,   312,   323, STR_012E_CANCEL,         STR_7047_CANCEL_NEW_FACE_SELECTION}, // PFW_WIDGET_CANCEL
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,   164,   327,   312,   323, STR_012F_OK,             STR_7048_ACCEPT_NEW_FACE_SELECTION}, // PFW_WIDGET_ACCEPT
+{    WWT_TEXTBTN,   RESIZE_NONE,    14,   202,   262,    32,    43, STR_7044_MALE,           STR_7049_SELECT_MALE_FACES},         // PFW_WIDGET_MALE
+{    WWT_TEXTBTN,   RESIZE_NONE,    14,   263,   323,    32,    43, STR_7045_FEMALE,         STR_704A_SELECT_FEMALE_FACES},       // PFW_WIDGET_FEMALE
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,     2,    93,   257,   268, STR_RANDOM,              STR_704B_GENERATE_RANDOM_NEW_FACE},  // PFW_WIDGET_RANDOM_NEW_FACE
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,   201,   323,    16,    27, STR_FACE_SIMPLE,         STR_FACE_SIMPLE_TIP},                // PFW_WIDGET_TOGGLE_LARGE_SMALL_BUTTON
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,     2,    93,   273,   284, STR_FACE_LOAD,           STR_FACE_LOAD_TIP},                  // PFW_WIDGET_LOAD
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,     2,    93,   285,   296, STR_FACE_FACECODE,       STR_FACE_FACECODE_TIP},              // PFW_WIDGET_FACECODE
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,     2,    93,   297,   308, STR_FACE_SAVE,           STR_FACE_SAVE_TIP},                  // PFW_WIDGET_SAVE
+{    WWT_TEXTBTN,   RESIZE_NONE,    14,   202,   262,    46,    57, STR_FACE_EUROPEAN,       STR_FACE_SELECT_EUROPEAN},           // PFW_WIDGET_ETHNICITY_EUR
+{    WWT_TEXTBTN,   RESIZE_NONE,    14,   263,   323,    46,    57, STR_FACE_AFRICAN,        STR_FACE_SELECT_AFRICAN},            // PFW_WIDGET_ETHNICITY_AFR
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,   281,   323,    60,    71, STR_EMPTY,               STR_FACE_MOUSTACHE_EARRING_TIP},     // PFW_WIDGET_HAS_MOUSTACHE_EARRING
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,   281,   323,    72,    83, STR_EMPTY,               STR_FACE_GLASSES_TIP},               // PFW_WIDGET_HAS_GLASSES
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    281,  289,   110,   121, SPR_ARROW_LEFT,          STR_FACE_EYECOLOUR_TIP},             // PFW_WIDGET_EYECOLOUR_L
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,    290,  314,   110,   121, STR_EMPTY,               STR_FACE_EYECOLOUR_TIP},             // PFW_WIDGET_EYECOLOUR
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    315,  323,   110,   121, SPR_ARROW_RIGHT,         STR_FACE_EYECOLOUR_TIP},             // PFW_WIDGET_EYECOLOUR_R
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    281,  289,   158,   169, SPR_ARROW_LEFT,          STR_FACE_CHIN_TIP},                  // PFW_WIDGET_CHIN_L
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,    290,  314,   158,   169, STR_EMPTY,               STR_FACE_CHIN_TIP},                  // PFW_WIDGET_CHIN
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    315,  323,   158,   169, SPR_ARROW_RIGHT,         STR_FACE_CHIN_TIP},                  // PFW_WIDGET_CHIN_R
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    281,  289,    98,   109, SPR_ARROW_LEFT,          STR_FACE_EYEBROWS_TIP},              // PFW_WIDGET_EYEBROWS_L
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,    290,  314,    98,   109, STR_EMPTY,               STR_FACE_EYEBROWS_TIP},              // PFW_WIDGET_EYEBROWS
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    315,  323,    98,   109, SPR_ARROW_RIGHT,         STR_FACE_EYEBROWS_TIP},              // PFW_WIDGET_EYEBROWS_R
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    281,  289,   146,   157, SPR_ARROW_LEFT,          STR_FACE_LIPS_MOUSTACHE_TIP},        // PFW_WIDGET_LIPS_MOUSTACHE_L
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,    290,  314,   146,   157, STR_EMPTY,               STR_FACE_LIPS_MOUSTACHE_TIP},        // PFW_WIDGET_LIPS_MOUSTACHE
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    315,  323,   146,   157, SPR_ARROW_RIGHT,         STR_FACE_LIPS_MOUSTACHE_TIP},        // PFW_WIDGET_LIPS_MOUSTACHE_R
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    281,  289,   134,   145, SPR_ARROW_LEFT,          STR_FACE_NOSE_TIP},                  // PFW_WIDGET_NOSE_L
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,    290,  314,   134,   145, STR_EMPTY,               STR_FACE_NOSE_TIP},                  // PFW_WIDGET_NOSE
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    315,  323,   134,   145, SPR_ARROW_RIGHT,         STR_FACE_NOSE_TIP},                  // PFW_WIDGET_NOSE_R
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    281,  289,    86,    97, SPR_ARROW_LEFT,          STR_FACE_HAIR_TIP},                  // PFW_WIDGET_HAIR_L
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,    290,  314,    86,    97, STR_EMPTY,               STR_FACE_HAIR_TIP},                  // PFW_WIDGET_HAIR
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    315,  323,    86,    97, SPR_ARROW_RIGHT,         STR_FACE_HAIR_TIP},                  // PFW_WIDGET_HAIR_R
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    281,  289,   170,   181, SPR_ARROW_LEFT,          STR_FACE_JACKET_TIP},                // PFW_WIDGET_JACKET_L
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,    290,  314,   170,   181, STR_EMPTY,               STR_FACE_JACKET_TIP},                // PFW_WIDGET_JACKET
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    315,  323,   170,   181, SPR_ARROW_RIGHT,         STR_FACE_JACKET_TIP},                // PFW_WIDGET_JACKET_R
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    281,  289,   182,   193, SPR_ARROW_LEFT,          STR_FACE_COLLAR_TIP},                // PFW_WIDGET_COLLAR_L
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,    290,  314,   182,   193, STR_EMPTY,               STR_FACE_COLLAR_TIP},                // PFW_WIDGET_COLLAR
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    315,  323,   182,   193, SPR_ARROW_RIGHT,         STR_FACE_COLLAR_TIP},                // PFW_WIDGET_COLLAR_R
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    281,  289,   194,   205, SPR_ARROW_LEFT,          STR_FACE_TIE_EARRING_TIP},           // PFW_WIDGET_TIE_EARRING_L
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,    290,  314,   194,   205, STR_EMPTY,               STR_FACE_TIE_EARRING_TIP},           // PFW_WIDGET_TIE_EARRING
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    315,  323,   194,   205, SPR_ARROW_RIGHT,         STR_FACE_TIE_EARRING_TIP},           // PFW_WIDGET_TIE_EARRING_R
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    281,  289,   122,   133, SPR_ARROW_LEFT,          STR_FACE_GLASSES_TIP_2},             // PFW_WIDGET_GLASSES_L
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,    14,    290,  314,   122,   133, STR_EMPTY,               STR_FACE_GLASSES_TIP_2},             // PFW_WIDGET_GLASSES
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,    14,    315,  323,   122,   133, SPR_ARROW_RIGHT,         STR_FACE_GLASSES_TIP_2},             // PFW_WIDGET_GLASSES_R
 {   WIDGETS_END},
 };
 
@@ -782,8 +784,15 @@
 				DrawFaceStringLabel(w, PFW_WIDGET_COLLAR,                STR_FACE_COLLAR,      GetPlayerFaceBits(*pf, PFV_COLLAR,          ge), false);
 			}
 
+      	DrawPixelInfo bk, *old_dpi;
+         old_dpi = _cur_dpi;
+      	_cur_dpi = &bk;
+         *_cur_dpi = *old_dpi;
+         _cur_dpi->zoom = ZOOM_LVL_IN_2X;
+
 			/* Draw the player face picture */
 			DrawPlayerFace(*pf, GetPlayer((PlayerID)w->window_number)->player_color, 2, 16);
+         _cur_dpi = old_dpi;
 			break;
 
 		case WE_CLICK:
@@ -907,7 +916,7 @@
 
 /** normal/simple player face selection window description */
 static const WindowDesc _select_player_face_desc = {
-	WDP_AUTO, WDP_AUTO, 190, 163, 190, 163,
+	WDP_AUTO, WDP_AUTO, 307, 323, 307, 323,
 	WC_PLAYER_FACE, WC_NONE,
 	WDF_STD_TOOLTIPS | WDF_STD_BTN | WDF_DEF_WIDGET | WDF_UNCLICK_BUTTONS,
 	_select_player_face_widgets,
@@ -916,7 +925,7 @@
 
 /** advanced player face selection window description */
 static const WindowDesc _select_player_face_adv_desc = {
-	WDP_AUTO, WDP_AUTO, 220, 220, 220, 220,
+	WDP_AUTO, WDP_AUTO, 327, 324, 327, 324,
 	WC_PLAYER_FACE, WC_NONE,
 	WDF_STD_TOOLTIPS | WDF_STD_BTN | WDF_DEF_WIDGET | WDF_UNCLICK_BUTTONS,
 	_select_player_face_adv_widgets,
Index: src/openttd.cpp
===================================================================
--- src/openttd.cpp	(revision 11813)
+++ src/openttd.cpp	(working copy)
@@ -356,7 +356,9 @@
 		"f"
 #endif
 	;
-
+   DrawPixelInfo dpi;
+   _cur_dpi = &dpi;
+   _cur_dpi->zoom=ZOOM_LVL_NORMAL;
 	MyGetOptData mgo(argc - 1, argv + 1, optformat);
 
 	while ((i = MyGetOpt(&mgo)) != -1) {
@@ -1265,7 +1267,8 @@
 	WP(w, vp_d).dest_scrollpos_y = _saved_scrollpos_y;
 
 	ViewPort *vp = w->viewport;
-	vp->zoom = min(_saved_scrollpos_zoom, ZOOM_LVL_MAX);
+//	vp->zoom = min(_saved_scrollpos_zoom, ZOOM_LVL_MAX);
+   vp->zoom = ZOOM_LVL_NORMAL;
 	vp->virtual_width = ScaleByZoom(vp->width, vp->zoom);
 	vp->virtual_height = ScaleByZoom(vp->height, vp->zoom);
 
