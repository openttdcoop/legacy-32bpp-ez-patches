Index: src/sound.cpp
===================================================================
--- src/sound.cpp	(revision 15770)
+++ src/sound.cpp	(working copy)
@@ -156,7 +156,7 @@
 }
 
 
-static const byte _vol_factor_by_zoom[] = {255, 190, 134, 87};
+static const byte _vol_factor_by_zoom[] = {255, 255, 255, 190, 134, 87};
 assert_compile(lengthof(_vol_factor_by_zoom) == ZOOM_LVL_COUNT);
 
 static const byte _sound_base_vol[] = {
Index: src/table/sprites.h
===================================================================
--- src/table/sprites.h	(revision 15770)
+++ src/table/sprites.h	(working copy)
@@ -1411,7 +1411,7 @@
 	RECOLOUR_BIT = 30,          ///< toggles recolouring in the sprite
 	OFFSET_BIT = 29,
 	OPAQUE_BIT = 28,
-
+	SHADOW_BIT = 27,
 	PALETTE_WIDTH = 24,         ///< number of bits of the sprite containing the recolour palette
 	SPRITE_WIDTH = 24,          ///< number of bits for the sprite number
 };
@@ -1432,6 +1432,7 @@
 	PALETTE_MODIFIER_TRANSPARENT  = TRANSPARENT_BIT,
 	/** this bit is set when a recolouring process is in action */
 	PALETTE_MODIFIER_COLOUR       = RECOLOUR_BIT,
+  	PALETTE_MODIFIER_SHADOW        = SHADOW_BIT,
 };
 
 /** Masks needed for sprite operations.
Index: src/spriteloader/grf.cpp
===================================================================
--- src/spriteloader/grf.cpp	(revision 15770)
+++ src/spriteloader/grf.cpp	(working copy)
@@ -32,7 +32,7 @@
 	return false;
 }
 
-bool SpriteLoaderGrf::LoadSprite(SpriteLoader::Sprite *sprite, uint8 file_slot, size_t file_pos, SpriteType sprite_type)
+bool SpriteLoaderGrf::LoadSprite(SpriteLoader::Sprite *sprite, uint8 file_slot, size_t file_pos, SpriteType sprite_type, ZoomLevel zoom)
 {
 	/* Open the right file and go to the correct position */
 	FioSeekToFile(file_slot, file_pos);
Index: src/spriteloader/spriteloader.hpp
===================================================================
--- src/spriteloader/spriteloader.hpp	(revision 15770)
+++ src/spriteloader/spriteloader.hpp	(working copy)
@@ -43,8 +43,9 @@
 	/**
 	 * Load a sprite from the disk and return a sprite struct which is the same for all loaders.
 	 */
-	virtual bool LoadSprite(SpriteLoader::Sprite *sprite, uint8 file_slot, size_t file_pos, SpriteType sprite_type) = 0;
 
+	virtual bool LoadSprite(SpriteLoader::Sprite *sprite, uint8 file_slot, size_t file_pos, SpriteType sprite_type, ZoomLevel zoom) = 0;
+
 	virtual ~SpriteLoader() { }
 };
 
Index: src/spriteloader/grf.hpp
===================================================================
--- src/spriteloader/grf.hpp	(revision 15770)
+++ src/spriteloader/grf.hpp	(working copy)
@@ -12,7 +12,7 @@
 	/**
 	 * Load a sprite from the disk and return a sprite struct which is the same for all loaders.
 	 */
-	bool LoadSprite(SpriteLoader::Sprite *sprite, uint8 file_slot, size_t file_pos, SpriteType sprite_type);
+	bool LoadSprite(SpriteLoader::Sprite *sprite, uint8 file_slot, size_t file_pos, SpriteType sprite_type, ZoomLevel zoom);
 };
 
 #endif /* SPRITELOADER_GRF_HPP */
Index: src/spriteloader/png.cpp
===================================================================
--- src/spriteloader/png.cpp	(revision 15770)
+++ src/spriteloader/png.cpp	(working copy)
@@ -30,21 +30,29 @@
 	DEBUG(sprite, 0, "WARNING (libpng): %s - %s", message, (char *)png_get_error_ptr(png_ptr));
 }
 
-static bool OpenPNGFile(const char *filename, uint32 id, bool mask)
+static bool OpenPNGFile(const char *filename, uint32 id, bool mask, ZoomLevel zoom)
 {
 	char png_file[MAX_PATH];
 
-	snprintf(png_file, sizeof(png_file), "sprites" PATHSEP "%s" PATHSEP "%d%s.png", filename, id, mask ? "m" : "");
+	snprintf(png_file, sizeof(png_file), "sprites" PATHSEP "%s" PATHSEP "%d_%s%d%s.png", filename, id, "z",zoom,mask ? "m" : "");
 	if (FioCheckFileExists(png_file)) {
 		FioOpenFile(PNG_SLOT, png_file);
 		return true;
 	}
-
+	/* if failed, try to find it in the trunk tars, only for default zoom */
+	if ( zoom == ZOOM_LVL_NORMAL) {
+		snprintf(png_file, sizeof(png_file), "sprites" PATHSEP "%s" PATHSEP "%d%s.png", filename, id, mask ? "m" : "");
+		if (FioCheckFileExists(png_file)) {
+			FioOpenFile(PNG_SLOT, png_file);
+			return true;
+		}
+	}
 	/* TODO -- Add TAR support */
 	return false;
 }
 
-static bool LoadPNG(SpriteLoader::Sprite *sprite, const char *filename, uint32 id, volatile bool mask)
+
+static bool LoadPNG(SpriteLoader::Sprite *sprite, const char *filename, uint32 id, volatile bool mask, ZoomLevel zoom)
 {
 	png_byte header[8];
 	png_structp png_ptr;
@@ -53,7 +61,7 @@
 	uint i, pixelsize;
 	SpriteLoader::CommonPixel *dst;
 
-	if (!OpenPNGFile(filename, id, mask)) return mask; // If mask is true, and file not found, continue true anyway, as it isn't a show-stopper
+	if (!OpenPNGFile(filename, id, mask, zoom)) return mask; // If mask is true, and file not found, continue true anyway, as it isn't a show-stopper
 
 	/* Check the header */
 	FioReadBlock(header, 8);
@@ -143,9 +151,7 @@
 		for (uint x = 0; x < info_ptr->width; x++) {
 			if (mask) {
 				if (row_pointer[x * sizeof(uint8)] != 0) {
-					dst[x].r = 0;
-					dst[x].g = 0;
-					dst[x].b = 0;
+					/* GeekToo: dont overwrite sprite rgb data if mask is present */
 					/* Alpha channel is used from the original image (to allow transparency in remap colours) */
 					dst[x].m = row_pointer[x * sizeof(uint8)];
 				}
@@ -164,11 +170,13 @@
 	return true;
 }
 
-bool SpriteLoaderPNG::LoadSprite(SpriteLoader::Sprite *sprite, uint8 file_slot, size_t file_pos, SpriteType sprite_type)
+bool SpriteLoaderPNG::LoadSprite(SpriteLoader::Sprite *sprite, uint8 file_slot, size_t file_pos, SpriteType sprite_type, ZoomLevel zoom)
 {
 	const char *filename = FioGetFilename(file_slot);
-	if (!LoadPNG(sprite, filename, (uint32)file_pos, false)) return false;
-	if (!LoadPNG(sprite, filename, (uint32)file_pos, true)) return false;
+
+	if (!LoadPNG(sprite, filename, file_pos, false, zoom)) return false;
+	if (!LoadPNG(sprite, filename, file_pos, true, zoom)) return false;
+
 	return true;
 }
 
Index: src/spriteloader/png.hpp
===================================================================
--- src/spriteloader/png.hpp	(revision 15770)
+++ src/spriteloader/png.hpp	(working copy)
@@ -12,7 +12,7 @@
 	/**
 	 * Load a sprite from the disk and return a sprite struct which is the same for all loaders.
 	 */
-	bool LoadSprite(SpriteLoader::Sprite *sprite, uint8 file_slot, size_t file_pos, SpriteType sprite_type);
+	bool LoadSprite(SpriteLoader::Sprite *sprite, uint8 file_slot, size_t file_pos, SpriteType sprite_type, ZoomLevel zoom);
 };
 
 #endif /* SPRITELOADER_PNG_HPP */
Index: src/spritecache.cpp
===================================================================
--- src/spritecache.cpp	(revision 15770)
+++ src/spritecache.cpp	(working copy)
@@ -4,6 +4,8 @@
 
 #include "stdafx.h"
 #include "gfx_type.h"
+#include "gfx_func.h"
+#include "table/sprites.h"
 #include "fileio_func.h"
 #include "spriteloader/grf.hpp"
 #include "core/alloc_func.hpp"
@@ -12,6 +14,8 @@
 #include "spriteloader/png.hpp"
 #endif /* WITH_PNG */
 #include "blitter/factory.hpp"
+#include "blitter/32bpp_optimized.hpp"
+
 #include "core/math_func.hpp"
 
 #include "table/sprites.h"
@@ -22,7 +26,7 @@
 typedef SimpleTinyEnumT<SpriteType, byte> SpriteTypeByte;
 
 struct SpriteCache {
-	void *ptr;
+	void *ptr[ZOOM_LVL_END];
 	size_t file_pos;
 	uint32 id;
 	uint16 file_slot;
@@ -56,6 +60,10 @@
 
 		_spritecache = ReallocT(_spritecache, items);
 
+		if (_spritecache == NULL) {
+			error("Unable to allocate sprite cache of %d items (%d bytes)", items, items * sizeof(*_spritecache));
+		}
+
 		/* Reset the new items and update the count */
 		memset(_spritecache + _spritecache_items, 0, (items - _spritecache_items) * sizeof(*_spritecache));
 		_spritecache_items = items;
@@ -142,6 +150,13 @@
 	uint8 file_slot = sc->file_slot;
 	size_t file_pos = sc->file_pos;
 
+ 	ZoomLevel zoom = ZOOM_LVL_NORMAL;
+  
+ 	if (_cur_dpi) {
+ 		zoom = ZoomLevel(_cur_dpi->zoom);
+ 	}	
+ 
+
 	assert(IsMapgenSpriteID(id) == (sprite_type == ST_MAPGEN));
 	assert(sc->type == sprite_type);
 
@@ -151,12 +166,28 @@
 #ifdef WITH_PNG
 		/* Try loading 32bpp graphics in case we are 32bpp output */
 		SpriteLoaderPNG sprite_loader;
-		SpriteLoader::Sprite sprite;
+		SpriteLoader::Sprite sprite, dst_sprite;
 
-		if (sprite_loader.LoadSprite(&sprite, file_slot, sc->id, sprite_type)) {
-			sc->ptr = BlitterFactoryBase::GetCurrentBlitter()->Encode(&sprite, &AllocSprite);
-
-			return sc->ptr;
+		ZoomLevel zoom_idx = (zoom > ZOOM_LVL_NORMAL ? ZOOM_LVL_NORMAL : zoom);
+		bool found = false;
+		do {
+			found = sprite_loader.LoadSprite(&sprite, sc->file_slot,
+														 sc->id, sprite_type, zoom_idx);
+			zoom_idx--;											
+		} while ( !found && (zoom_idx >= ZOOM_LVL_MIN ) );
+		if (found) {
+			zoom_idx++;
+			if (zoom > zoom_idx)	{
+				Blitter_32bppOptimized *blitter = (Blitter_32bppOptimized *)BlitterFactoryBase::GetCurrentBlitter();
+				do {
+					blitter->RescaleSpriteHalfSize(&sprite, &dst_sprite, true);
+					sprite = dst_sprite;
+					zoom_idx++;
+				} while (zoom_idx < zoom);
+			}
+			sc->ptr[zoom] = BlitterFactoryBase::GetCurrentBlitter()->Encode(&sprite, &AllocSprite);
+		
+			return sc->ptr[zoom];
 		}
 		/* If the PNG couldn't be loaded, fall back to 8bpp grfs */
 #else
@@ -184,8 +215,7 @@
 		static const int RECOLOUR_SPRITE_SIZE = 257;
 		byte *dest = (byte *)AllocSprite(max(RECOLOUR_SPRITE_SIZE, num));
 
-		sc->ptr = dest;
-
+		sc->ptr[zoom] = dest;
 		if (_palette_remap_grf[sc->file_slot]) {
 			byte *dest_tmp = AllocaM(byte, max(RECOLOUR_SPRITE_SIZE, num));
 
@@ -201,7 +231,7 @@
 			FioReadBlock(dest, num);
 		}
 
-		return sc->ptr;
+		return sc->ptr[zoom];
 	}
 
 	/* Ugly hack to work around the problem that the old landscape
@@ -221,7 +251,7 @@
 
 		num = width * height;
 		sprite = (Sprite *)AllocSprite(sizeof(*sprite) + num);
-		sc->ptr = sprite;
+		sc->ptr[zoom] = sprite;
 		sprite->height = height;
 		sprite->width  = width;
 		sprite->x_offs = FioReadWord();
@@ -243,21 +273,44 @@
 
 		sc->type = sprite_type;
 
-		return sc->ptr;
+		return sc->ptr[zoom];
 	}
 
 	assert(sprite_type == ST_NORMAL || sprite_type == ST_FONT);
 
 	SpriteLoaderGrf sprite_loader;
-	SpriteLoader::Sprite sprite;
+	SpriteLoader::Sprite sprite, dst_sprite;
 
-	if (!sprite_loader.LoadSprite(&sprite, file_slot, file_pos, sprite_type)) {
-		if (id == SPR_IMG_QUERY) usererror("Okay... something went horribly wrong. I couldn't load the fallback sprite. What should I do?");
-		return (void*)GetRawSprite(SPR_IMG_QUERY, ST_NORMAL);
+  
+	sc->type = sprite_type;
+	if (!sprite_loader.LoadSprite(&sprite, file_slot, file_pos, sprite_type, ZOOM_LVL_NORMAL)) {
+		return NULL;
+  	}
+
+	Blitter_32bppOptimized *blitter = (Blitter_32bppOptimized *)BlitterFactoryBase::GetCurrentBlitter();
+	if (BlitterFactoryBase::GetCurrentBlitter()->GetScreenDepth() == 32) {
+		blitter->FillRGBFromPalette(&sprite);
 	}
-	sc->ptr = BlitterFactoryBase::GetCurrentBlitter()->Encode(&sprite, &AllocSprite);
+	if (zoom < ZOOM_LVL_NORMAL) {
+		ZoomLevel zoom_idx = zoom;
+		do {
+			blitter->RescaleSpriteDoubleSize(&sprite, &dst_sprite);
+			sprite = dst_sprite;
+			zoom_idx++;
+		} while (zoom_idx < ZOOM_LVL_NORMAL);
+	}
+	if (zoom > ZOOM_LVL_NORMAL) {
+		ZoomLevel zoom_idx = ZOOM_LVL_NORMAL;
+		do {
+			blitter->RescaleSpriteHalfSize(&sprite, &dst_sprite, true);
+			sprite = dst_sprite;
+			zoom_idx++;
+		} while (zoom_idx < zoom);
+	}
 
-	return sc->ptr;
+	sc->ptr[zoom] = BlitterFactoryBase::GetCurrentBlitter()->Encode(&sprite, &AllocSprite);
+
+	return sc->ptr[zoom];
 }
 
 
@@ -283,7 +336,12 @@
 	SpriteCache *sc = AllocateSpriteCache(load_index);
 	sc->file_slot = file_slot;
 	sc->file_pos = file_pos;
-	sc->ptr = NULL;
+	sc->ptr[ZOOM_LVL_IN_4X] = NULL;
+	sc->ptr[ZOOM_LVL_IN_2X] = NULL;
+  	sc->ptr[ZOOM_LVL_NORMAL] = NULL;
+  	sc->ptr[ZOOM_LVL_OUT_2X] = NULL;
+	sc->ptr[ZOOM_LVL_OUT_4X] = NULL;
+	sc->ptr[ZOOM_LVL_OUT_8X] = NULL;
 	sc->lru = 0;
 	sc->id = file_sprite_id;
 	sc->type = type;
@@ -297,10 +355,12 @@
 {
 	SpriteCache *scnew = AllocateSpriteCache(new_spr); // may reallocate: so put it first
 	SpriteCache *scold = GetSpriteCache(old_spr);
+	ZoomLevel zoom;
 
 	scnew->file_slot = scold->file_slot;
 	scnew->file_pos = scold->file_pos;
-	scnew->ptr = NULL;
+	zoom = ZoomLevel(_cur_dpi->zoom);
+	scnew->ptr[zoom] = NULL;
 	scnew->id = scold->id;
 	scnew->type = scold->type;
 	scnew->warned = false;
@@ -329,6 +389,7 @@
 
 void IncreaseSpriteLRU()
 {
+	ZoomLevel zoom;
 	/* Increase all LRU values */
 	if (_sprite_lru_counter > 16384) {
 		SpriteID i;
@@ -337,7 +398,8 @@
 
 		for (i = 0; i != _spritecache_items; i++) {
 			SpriteCache *sc = GetSpriteCache(i);
-			if (sc->ptr != NULL) {
+			zoom = ZoomLevel(_cur_dpi->zoom);
+			if (sc->ptr[zoom] != NULL) {
 				if (sc->lru >= 0) {
 					sc->lru = -1;
 				} else if (sc->lru != -32768) {
@@ -360,6 +422,7 @@
 static void CompactSpriteCache()
 {
 	MemBlock *s;
+	ZoomLevel	zoom;
 
 	DEBUG(sprite, 3, "Compacting sprite cache, inuse=%d", GetSpriteCacheUsage());
 
@@ -376,11 +439,16 @@
 			if (next->size == 0) break;
 
 			/* Locate the sprite belonging to the next pointer. */
-			for (i = 0; GetSpriteCache(i)->ptr != next->data; i++) {
-				assert(i != _spritecache_items);
+			bool found = false;
+			for (zoom = ZOOM_LVL_MIN;
+				  (zoom < ZOOM_LVL_END) && (!found);
+				  zoom = ZoomLevel(zoom + 1)) {
+				for (i = 0; i < _spritecache_items && !found; i++) {
+					found = (GetSpriteCache(i)->ptr[zoom] == next->data);
+				}
 			}
-
-			GetSpriteCache(i)->ptr = s->data; // Adjust sprite array entry
+			assert(found);
+			GetSpriteCache(i - 1)->ptr[zoom - 1] = s->data; // Adjust sprite array entry
 			/* Swap this and the next block */
 			temp = *s;
 			memmove(s, next, next->size);
@@ -402,16 +470,21 @@
 	SpriteID i;
 	uint best = UINT_MAX;
 	MemBlock *s;
-	int cur_lru;
+	int16 cur_lru;
+	ZoomLevel zoom;
 
 	DEBUG(sprite, 3, "DeleteEntryFromSpriteCache, inuse=%d", GetSpriteCacheUsage());
 
-	cur_lru = 0xffff;
+	cur_lru = -1;
 	for (i = 0; i != _spritecache_items; i++) {
 		SpriteCache *sc = GetSpriteCache(i);
-		if (sc->ptr != NULL && sc->lru < cur_lru) {
-			cur_lru = sc->lru;
-			best = i;
+		if (sc->lru < cur_lru) {
+			for (zoom = ZOOM_LVL_MIN; zoom < ZOOM_LVL_END; zoom ++) {
+				if (sc->ptr[zoom]) {
+					cur_lru = sc->lru;
+					best = i;
+				}
+			}
 		}
 	}
 
@@ -419,19 +492,24 @@
 	 * This shouldn't really happen, unless all sprites are locked. */
 	if (best == UINT_MAX) error("Out of sprite memory");
 
+	SpriteCache *sc = GetSpriteCache(best);
 	/* Mark the block as free (the block must be in use) */
-	s = (MemBlock*)GetSpriteCache(best)->ptr - 1;
-	assert(!(s->size & S_FREE_MASK));
-	s->size |= S_FREE_MASK;
-	GetSpriteCache(best)->ptr = NULL;
+	for (zoom = ZOOM_LVL_MIN ; zoom < ZOOM_LVL_END ; zoom = ZoomLevel(zoom + 1)) {
+		if (sc->ptr[zoom]) {
+			s = (MemBlock*)sc->ptr[zoom] - 1;
+			assert(!(s->size & S_FREE_MASK));
+			s->size |= S_FREE_MASK;
+			sc->ptr[zoom] = NULL;
 
-	/* And coalesce adjacent free blocks */
-	for (s = _spritecache_ptr; s->size != 0; s = NextBlock(s)) {
-		if (s->size & S_FREE_MASK) {
-			while (NextBlock(s)->size & S_FREE_MASK) {
-				s->size += NextBlock(s)->size & ~S_FREE_MASK;
+			/* And coalesce adjacent free blocks */
+			for (s = _spritecache_ptr; s->size != 0; s = NextBlock(s)) {
+				if (s->size & S_FREE_MASK) {
+					while (NextBlock(s)->size & S_FREE_MASK) {
+						s->size += NextBlock(s)->size & ~S_FREE_MASK;
+					}
+				}
 			}
-		}
+		}	
 	}
 }
 
@@ -442,7 +520,7 @@
 	/* Align this to an uint32 boundary. This also makes sure that the 2 least
 	 * bits are not used, so we could use those for other things. */
 	mem_req = Align(mem_req, sizeof(uint32));
-
+	DEBUG(sprite, 3, "AllocSprite, memreq=%d", mem_req);
 	for (;;) {
 		MemBlock *s;
 
@@ -519,6 +597,7 @@
 {
 	assert(IsMapgenSpriteID(sprite) == (type == ST_MAPGEN));
 	assert(type < ST_INVALID);
+	ZoomLevel zoom;
 
 	if (!SpriteExists(sprite)) {
 		DEBUG(sprite, 1, "Tried to load non-existing sprite #%d. Probable cause: Wrong/missing NewGRFs", sprite);
@@ -534,7 +613,8 @@
 	/* Update LRU */
 	sc->lru = ++_sprite_lru_counter;
 
-	void *p = sc->ptr;
+	zoom = ZoomLevel(_cur_dpi->zoom);
+	void *p = sc->ptr[zoom];
 
 	/* Load the sprite, if it is not loaded, yet */
 	if (p == NULL) p = ReadSprite(sc, sprite, type);
@@ -546,7 +626,7 @@
 void GfxInitSpriteMem()
 {
 	/* initialize sprite cache heap */
-	if (_spritecache_ptr == NULL) _spritecache_ptr = (MemBlock*)MallocT<byte>(_sprite_cache_size * 1024 * 1024);
+	if (_spritecache_ptr == NULL) _spritecache_ptr = (MemBlock*)malloc(_sprite_cache_size * 1024 * 1024);
 
 	/* A big free block */
 	_spritecache_ptr->size = ((_sprite_cache_size * 1024 * 1024) - sizeof(MemBlock)) | S_FREE_MASK;
@@ -557,7 +637,6 @@
 	free(_spritecache);
 	_spritecache_items = 0;
 	_spritecache = NULL;
-
 	_compact_cache_counter = 0;
 }
 
Index: src/spritecache.h
===================================================================
--- src/spritecache.h	(revision 15770)
+++ src/spritecache.h	(working copy)
@@ -7,11 +7,14 @@
 
 #include "gfx_type.h"
 
+
 struct Sprite {
-	byte height;
+	uint16 height;
 	uint16 width;
 	int16 x_offs;
 	int16 y_offs;
+	int16 hue;
+	int16 m;
 	byte data[VARARRAY_SIZE];
 };
 
Index: src/texteff.cpp
===================================================================
--- src/texteff.cpp	(revision 15770)
+++ src/texteff.cpp	(working copy)
@@ -162,6 +162,35 @@
 void DrawTextEffects(DrawPixelInfo *dpi)
 {
 	switch (dpi->zoom) {
+		case ZOOM_LVL_IN_4X:
+			for (TextEffectID i = 0; i < _num_text_effects; i++) {
+				TextEffect *te = &_text_effect_list[i];
+				if (te->string_id != INVALID_STRING_ID &&
+						dpi->left <= te->right &&
+						dpi->top  <= te->bottom &&
+						dpi->left + dpi->width  > te->x &&
+						dpi->top  + dpi->height > te->y) {
+					if (te->mode == TE_RISING || (_settings_client.gui.loading_indicators && !IsTransparencySet(TO_LOADING))) {
+						AddStringToDraw(te->x, te->y, te->string_id, te->params_1, te->params_2);
+					}
+				}
+			}
+			break;
+		case ZOOM_LVL_IN_2X:
+			for (TextEffectID i = 0; i < _num_text_effects; i++) {
+				TextEffect *te = &_text_effect_list[i];
+				if (te->string_id != INVALID_STRING_ID &&
+						dpi->left <= te->right &&
+						dpi->top  <= te->bottom &&
+						dpi->left + dpi->width  > te->x &&
+						dpi->top  + dpi->height > te->y) {
+					if (te->mode == TE_RISING || (_settings_client.gui.loading_indicators && !IsTransparencySet(TO_LOADING))) {
+						AddStringToDraw(te->x, te->y, te->string_id, te->params_1, te->params_2);
+					}
+				}
+			}
+			break;
+
 		case ZOOM_LVL_NORMAL:
 			for (TextEffectID i = 0; i < _num_text_effects; i++) {
 				TextEffect *te = &_text_effect_list[i];
Index: src/window.cpp
===================================================================
--- src/window.cpp	(revision 15770)
+++ src/window.cpp	(working copy)
@@ -402,6 +402,7 @@
 	}
 }
 
+
 /**
  * Generate repaint events for the visible part of window w within the rectangle.
  *
@@ -465,6 +466,8 @@
 	w->OnPaint();
 }
 
+
+
 /**
  * From a rectangle that needs redrawing, find the windows that intersect with the rectangle.
  * These windows should be re-painted.
@@ -476,7 +479,8 @@
 void DrawOverlappedWindowForAll(int left, int top, int right, int bottom)
 {
 	Window *w;
-	DrawPixelInfo bk;
+	DrawPixelInfo bk, *old_dpi;
+	old_dpi = _cur_dpi;
 	_cur_dpi = &bk;
 
 	FOR_ALL_WINDOWS_FROM_BACK(w) {
@@ -488,6 +492,7 @@
 			DrawOverlappedWindow(w, left, top, right, bottom);
 		}
 	}
+	_cur_dpi = old_dpi;
 }
 
 /**
Index: src/company_gui.cpp
===================================================================
--- src/company_gui.cpp	(revision 15770)
+++ src/company_gui.cpp	(working copy)
@@ -24,7 +24,7 @@
 #include "widgets/dropdown_type.h"
 #include "tilehighlight_func.h"
 #include "settings_type.h"
-
+#include "zoom_type.h"
 #include "table/strings.h"
 
 enum {
@@ -679,68 +679,69 @@
 
 /** Widget description for the normal/simple company manager face selection dialog */
 static const Widget _select_company_manager_face_widgets[] = {
-{   WWT_CLOSEBOX,   RESIZE_NONE,  COLOUR_GREY,     0,    10,     0,    13, STR_00C5,                STR_018B_CLOSE_WINDOW},              // SCMFW_WIDGET_CLOSEBOX
-{    WWT_CAPTION,   RESIZE_NONE,  COLOUR_GREY,    11,   174,     0,    13, STR_7043_FACE_SELECTION, STR_018C_WINDOW_TITLE_DRAG_THIS},    // SCMFW_WIDGET_CAPTION
-{     WWT_IMGBTN,   RESIZE_NONE,  COLOUR_GREY,   175,   189,     0,    13, SPR_LARGE_SMALL_WINDOW,  STR_FACE_ADVANCED_TIP},              // SCMFW_WIDGET_TOGGLE_LARGE_SMALL
-{      WWT_PANEL,   RESIZE_NONE,  COLOUR_GREY,     0,   189,    14,   150, 0x0,                     STR_NULL},                           // SCMFW_WIDGET_SELECT_FACE
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,     0,    94,   151,   162, STR_012E_CANCEL,         STR_7047_CANCEL_NEW_FACE_SELECTION}, // SCMFW_WIDGET_CANCEL
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,    95,   189,   151,   162, STR_012F_OK,             STR_7048_ACCEPT_NEW_FACE_SELECTION}, // SCMFW_WIDGET_ACCEPT
-{    WWT_TEXTBTN,   RESIZE_NONE,  COLOUR_GREY,    95,   187,    75,    86, STR_7044_MALE,           STR_7049_SELECT_MALE_FACES},         // SCMFW_WIDGET_MALE
-{    WWT_TEXTBTN,   RESIZE_NONE,  COLOUR_GREY,    95,   187,    87,    98, STR_7045_FEMALE,         STR_704A_SELECT_FEMALE_FACES},       // SCMFW_WIDGET_FEMALE
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,     2,    93,   137,   148, STR_7046_NEW_FACE,       STR_704B_GENERATE_RANDOM_NEW_FACE},  // SCMFW_WIDGET_RANDOM_NEW_FACE
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,    95,   187,    16,    27, STR_FACE_ADVANCED,       STR_FACE_ADVANCED_TIP},              // SCMFW_WIDGET_TOGGLE_LARGE_SMALL_BUTTON
+
+{   WWT_CLOSEBOX,   RESIZE_NONE, COLOUR_GREY,     0,    10,     0,    13, STR_00C5,                STR_018B_CLOSE_WINDOW},              // PFW_WIDGET_CLOSEBOX
+{    WWT_CAPTION,   RESIZE_NONE, COLOUR_GREY,    11,   292,     0,    13, STR_7043_FACE_SELECTION, STR_018C_WINDOW_TITLE_DRAG_THIS},    // PFW_WIDGET_CAPTION
+{     WWT_IMGBTN,   RESIZE_NONE, COLOUR_GREY,   293,   307,     0,    13, SPR_LARGE_SMALL_WINDOW,  STR_FACE_ADVANCED_TIP},              // PFW_WIDGET_TOGGLE_LARGE_SMALL
+{      WWT_PANEL,   RESIZE_NONE, COLOUR_GREY,     0,   307,    14,   311, 0x0,                     STR_NULL},                           // PFW_WIDGET_SELECT_FACE
+{ WWT_PUSHTXTBTN,   RESIZE_NONE, COLOUR_GREY,     0,   154,   312,   323, STR_012E_CANCEL,         STR_7047_CANCEL_NEW_FACE_SELECTION}, // PFW_WIDGET_CANCEL
+{ WWT_PUSHTXTBTN,   RESIZE_NONE, COLOUR_GREY,    155,  307,   312,   323, STR_012F_OK,             STR_7048_ACCEPT_NEW_FACE_SELECTION}, // PFW_WIDGET_ACCEPT
+{    WWT_TEXTBTN,   RESIZE_NONE, COLOUR_GREY,    201,  303,    75,    86, STR_7044_MALE,           STR_7049_SELECT_MALE_FACES},         // PFW_WIDGET_MALE
+{    WWT_TEXTBTN,   RESIZE_NONE, COLOUR_GREY,    201,  303,    87,    98, STR_7045_FEMALE,         STR_704A_SELECT_FEMALE_FACES},       // PFW_WIDGET_FEMALE
+{ WWT_PUSHTXTBTN,   RESIZE_NONE, COLOUR_GREY,     2,    93,   277,   288, STR_7046_NEW_FACE,       STR_704B_GENERATE_RANDOM_NEW_FACE},  // PFW_WIDGET_RANDOM_NEW_FACE
+{ WWT_PUSHTXTBTN,   RESIZE_NONE, COLOUR_GREY,    201,  303,    16,    27, STR_FACE_ADVANCED,       STR_FACE_ADVANCED_TIP},              // PFW_WIDGET_TOGGLE_LARGE_SMALL_BUTTON
 {   WIDGETS_END},
 };
 
 /** Widget description for the advanced company manager face selection dialog */
 static const Widget _select_company_manager_face_adv_widgets[] = {
-{   WWT_CLOSEBOX,   RESIZE_NONE,  COLOUR_GREY,     0,    10,     0,    13, STR_00C5,                STR_018B_CLOSE_WINDOW},              // SCMFW_WIDGET_CLOSEBOX
-{    WWT_CAPTION,   RESIZE_NONE,  COLOUR_GREY,    11,   204,     0,    13, STR_7043_FACE_SELECTION, STR_018C_WINDOW_TITLE_DRAG_THIS},    // SCMFW_WIDGET_CAPTION
-{     WWT_IMGBTN,   RESIZE_NONE,  COLOUR_GREY,   205,   219,     0,    13, SPR_LARGE_SMALL_WINDOW,  STR_FACE_SIMPLE_TIP},                // SCMFW_WIDGET_TOGGLE_LARGE_SMALL
-{      WWT_PANEL,   RESIZE_NONE,  COLOUR_GREY,     0,   219,    14,   207, 0x0,                     STR_NULL},                           // SCMFW_WIDGET_SELECT_FACE
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,     0,    94,   208,   219, STR_012E_CANCEL,         STR_7047_CANCEL_NEW_FACE_SELECTION}, // SCMFW_WIDGET_CANCEL
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,    95,   219,   208,   219, STR_012F_OK,             STR_7048_ACCEPT_NEW_FACE_SELECTION}, // SCMFW_WIDGET_ACCEPT
-{    WWT_TEXTBTN,   RESIZE_NONE,  COLOUR_GREY,    96,   156,    32,    43, STR_7044_MALE,           STR_7049_SELECT_MALE_FACES},         // SCMFW_WIDGET_MALE
-{    WWT_TEXTBTN,   RESIZE_NONE,  COLOUR_GREY,   157,   217,    32,    43, STR_7045_FEMALE,         STR_704A_SELECT_FEMALE_FACES},       // SCMFW_WIDGET_FEMALE
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,     2,    93,   137,   148, STR_RANDOM,              STR_704B_GENERATE_RANDOM_NEW_FACE},  // SCMFW_WIDGET_RANDOM_NEW_FACE
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,    95,   217,    16,    27, STR_FACE_SIMPLE,         STR_FACE_SIMPLE_TIP},                // SCMFW_WIDGET_TOGGLE_LARGE_SMALL_BUTTON
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,     2,    93,   158,   169, STR_FACE_LOAD,           STR_FACE_LOAD_TIP},                  // SCMFW_WIDGET_LOAD
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,     2,    93,   170,   181, STR_FACE_FACECODE,       STR_FACE_FACECODE_TIP},              // SCMFW_WIDGET_FACECODE
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,     2,    93,   182,   193, STR_FACE_SAVE,           STR_FACE_SAVE_TIP},                  // SCMFW_WIDGET_SAVE
-{    WWT_TEXTBTN,   RESIZE_NONE,  COLOUR_GREY,    96,   156,    46,    57, STR_FACE_EUROPEAN,       STR_FACE_SELECT_EUROPEAN},           // SCMFW_WIDGET_ETHNICITY_EUR
-{    WWT_TEXTBTN,   RESIZE_NONE,  COLOUR_GREY,   157,   217,    46,    57, STR_FACE_AFRICAN,        STR_FACE_SELECT_AFRICAN},            // SCMFW_WIDGET_ETHNICITY_AFR
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,   175,   217,    60,    71, STR_EMPTY,               STR_FACE_MOUSTACHE_EARRING_TIP},     // SCMFW_WIDGET_HAS_MOUSTACHE_EARRING
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,   175,   217,    72,    83, STR_EMPTY,               STR_FACE_GLASSES_TIP},               // SCMFW_WIDGET_HAS_GLASSES
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    175,  183,   110,   121, SPR_ARROW_LEFT,          STR_FACE_EYECOLOUR_TIP},             // SCMFW_WIDGET_EYECOLOUR_L
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,    184,  208,   110,   121, STR_EMPTY,               STR_FACE_EYECOLOUR_TIP},             // SCMFW_WIDGET_EYECOLOUR
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    209,  217,   110,   121, SPR_ARROW_RIGHT,         STR_FACE_EYECOLOUR_TIP},             // SCMFW_WIDGET_EYECOLOUR_R
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    175,  183,   158,   169, SPR_ARROW_LEFT,          STR_FACE_CHIN_TIP},                  // SCMFW_WIDGET_CHIN_L
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,    184,  208,   158,   169, STR_EMPTY,               STR_FACE_CHIN_TIP},                  // SCMFW_WIDGET_CHIN
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    209,  217,   158,   169, SPR_ARROW_RIGHT,         STR_FACE_CHIN_TIP},                  // SCMFW_WIDGET_CHIN_R
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    175,  183,    98,   109, SPR_ARROW_LEFT,          STR_FACE_EYEBROWS_TIP},              // SCMFW_WIDGET_EYEBROWS_L
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,    184,  208,    98,   109, STR_EMPTY,               STR_FACE_EYEBROWS_TIP},              // SCMFW_WIDGET_EYEBROWS
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    209,  217,    98,   109, SPR_ARROW_RIGHT,         STR_FACE_EYEBROWS_TIP},              // SCMFW_WIDGET_EYEBROWS_R
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    175,  183,   146,   157, SPR_ARROW_LEFT,          STR_FACE_LIPS_MOUSTACHE_TIP},        // SCMFW_WIDGET_LIPS_MOUSTACHE_L
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,    184,  208,   146,   157, STR_EMPTY,               STR_FACE_LIPS_MOUSTACHE_TIP},        // SCMFW_WIDGET_LIPS_MOUSTACHE
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    209,  217,   146,   157, SPR_ARROW_RIGHT,         STR_FACE_LIPS_MOUSTACHE_TIP},        // SCMFW_WIDGET_LIPS_MOUSTACHE_R
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    175,  183,   134,   145, SPR_ARROW_LEFT,          STR_FACE_NOSE_TIP},                  // SCMFW_WIDGET_NOSE_L
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,    184,  208,   134,   145, STR_EMPTY,               STR_FACE_NOSE_TIP},                  // SCMFW_WIDGET_NOSE
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    209,  217,   134,   145, SPR_ARROW_RIGHT,         STR_FACE_NOSE_TIP},                  // SCMFW_WIDGET_NOSE_R
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    175,  183,    86,    97, SPR_ARROW_LEFT,          STR_FACE_HAIR_TIP},                  // SCMFW_WIDGET_HAIR_L
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,    184,  208,    86,    97, STR_EMPTY,               STR_FACE_HAIR_TIP},                  // SCMFW_WIDGET_HAIR
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    209,  217,    86,    97, SPR_ARROW_RIGHT,         STR_FACE_HAIR_TIP},                  // SCMFW_WIDGET_HAIR_R
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    175,  183,   170,   181, SPR_ARROW_LEFT,          STR_FACE_JACKET_TIP},                // SCMFW_WIDGET_JACKET_L
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,    184,  208,   170,   181, STR_EMPTY,               STR_FACE_JACKET_TIP},                // SCMFW_WIDGET_JACKET
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    209,  217,   170,   181, SPR_ARROW_RIGHT,         STR_FACE_JACKET_TIP},                // SCMFW_WIDGET_JACKET_R
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    175,  183,   182,   193, SPR_ARROW_LEFT,          STR_FACE_COLLAR_TIP},                // SCMFW_WIDGET_COLLAR_L
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,    184,  208,   182,   193, STR_EMPTY,               STR_FACE_COLLAR_TIP},                // SCMFW_WIDGET_COLLAR
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    209,  217,   182,   193, SPR_ARROW_RIGHT,         STR_FACE_COLLAR_TIP},                // SCMFW_WIDGET_COLLAR_R
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    175,  183,   194,   205, SPR_ARROW_LEFT,          STR_FACE_TIE_EARRING_TIP},           // SCMFW_WIDGET_TIE_EARRING_L
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,    184,  208,   194,   205, STR_EMPTY,               STR_FACE_TIE_EARRING_TIP},           // SCMFW_WIDGET_TIE_EARRING
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    209,  217,   194,   205, SPR_ARROW_RIGHT,         STR_FACE_TIE_EARRING_TIP},           // SCMFW_WIDGET_TIE_EARRING_R
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    175,  183,   122,   133, SPR_ARROW_LEFT,          STR_FACE_GLASSES_TIP_2},             // SCMFW_WIDGET_GLASSES_L
-{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,    184,  208,   122,   133, STR_EMPTY,               STR_FACE_GLASSES_TIP_2},             // SCMFW_WIDGET_GLASSES
-{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    209,  217,   122,   133, SPR_ARROW_RIGHT,         STR_FACE_GLASSES_TIP_2},             // SCMFW_WIDGET_GLASSES_R
+{   WWT_CLOSEBOX,   RESIZE_NONE,  COLOUR_GREY,     0,    10,     0,    13, STR_00C5,                STR_018B_CLOSE_WINDOW},              // PFW_WIDGET_CLOSEBOX
+{    WWT_CAPTION,   RESIZE_NONE,  COLOUR_GREY,    11,   313,     0,    13, STR_7043_FACE_SELECTION, STR_018C_WINDOW_TITLE_DRAG_THIS},    // PFW_WIDGET_CAPTION
+{     WWT_IMGBTN,   RESIZE_NONE,  COLOUR_GREY,   313,   327,     0,    13, SPR_LARGE_SMALL_WINDOW,  STR_FACE_SIMPLE_TIP},                // PFW_WIDGET_TOGGLE_LARGE_SMALL
+{      WWT_PANEL,   RESIZE_NONE,  COLOUR_GREY,     0,   327,    14,   311, 0x0,                     STR_NULL},                           // PFW_WIDGET_SELECT_FACE
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,     0,   163,   312,   323, STR_012E_CANCEL,         STR_7047_CANCEL_NEW_FACE_SELECTION}, // PFW_WIDGET_CANCEL
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,   164,   327,   312,   323, STR_012F_OK,             STR_7048_ACCEPT_NEW_FACE_SELECTION}, // PFW_WIDGET_ACCEPT
+{    WWT_TEXTBTN,   RESIZE_NONE,  COLOUR_GREY,   202,   262,    32,    43, STR_7044_MALE,           STR_7049_SELECT_MALE_FACES},         // PFW_WIDGET_MALE
+{    WWT_TEXTBTN,   RESIZE_NONE,  COLOUR_GREY,   263,   323,    32,    43, STR_7045_FEMALE,         STR_704A_SELECT_FEMALE_FACES},       // PFW_WIDGET_FEMALE
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,     2,    93,   257,   268, STR_RANDOM,              STR_704B_GENERATE_RANDOM_NEW_FACE},  // PFW_WIDGET_RANDOM_NEW_FACE
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,   201,   323,    16,    27, STR_FACE_SIMPLE,         STR_FACE_SIMPLE_TIP},                // PFW_WIDGET_TOGGLE_LARGE_SMALL_BUTTON
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,     2,    93,   273,   284, STR_FACE_LOAD,           STR_FACE_LOAD_TIP},                  // PFW_WIDGET_LOAD
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,     2,    93,   285,   296, STR_FACE_FACECODE,       STR_FACE_FACECODE_TIP},              // PFW_WIDGET_FACECODE
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,     2,    93,   297,   308, STR_FACE_SAVE,           STR_FACE_SAVE_TIP},                  // PFW_WIDGET_SAVE
+{    WWT_TEXTBTN,   RESIZE_NONE,  COLOUR_GREY,   202,   262,    46,    57, STR_FACE_EUROPEAN,       STR_FACE_SELECT_EUROPEAN},           // PFW_WIDGET_ETHNICITY_EUR
+{    WWT_TEXTBTN,   RESIZE_NONE,  COLOUR_GREY,   263,   323,    46,    57, STR_FACE_AFRICAN,        STR_FACE_SELECT_AFRICAN},            // PFW_WIDGET_ETHNICITY_AFR
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,   281,   323,    60,    71, STR_EMPTY,               STR_FACE_MOUSTACHE_EARRING_TIP},     // PFW_WIDGET_HAS_MOUSTACHE_EARRING
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,   281,   323,    72,    83, STR_EMPTY,               STR_FACE_GLASSES_TIP},               // PFW_WIDGET_HAS_GLASSES
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    281,  289,   110,   121, SPR_ARROW_LEFT,          STR_FACE_EYECOLOUR_TIP},             // PFW_WIDGET_EYECOLOUR_L
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,    290,  314,   110,   121, STR_EMPTY,               STR_FACE_EYECOLOUR_TIP},             // PFW_WIDGET_EYECOLOUR
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    315,  323,   110,   121, SPR_ARROW_RIGHT,         STR_FACE_EYECOLOUR_TIP},             // PFW_WIDGET_EYECOLOUR_R
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    281,  289,   158,   169, SPR_ARROW_LEFT,          STR_FACE_CHIN_TIP},                  // PFW_WIDGET_CHIN_L
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,    290,  314,   158,   169, STR_EMPTY,               STR_FACE_CHIN_TIP},                  // PFW_WIDGET_CHIN
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    315,  323,   158,   169, SPR_ARROW_RIGHT,         STR_FACE_CHIN_TIP},                  // PFW_WIDGET_CHIN_R
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    281,  289,    98,   109, SPR_ARROW_LEFT,          STR_FACE_EYEBROWS_TIP},              // PFW_WIDGET_EYEBROWS_L
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,    290,  314,    98,   109, STR_EMPTY,               STR_FACE_EYEBROWS_TIP},              // PFW_WIDGET_EYEBROWS
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    315,  323,    98,   109, SPR_ARROW_RIGHT,         STR_FACE_EYEBROWS_TIP},              // PFW_WIDGET_EYEBROWS_R
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    281,  289,   146,   157, SPR_ARROW_LEFT,          STR_FACE_LIPS_MOUSTACHE_TIP},        // PFW_WIDGET_LIPS_MOUSTACHE_L
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,    290,  314,   146,   157, STR_EMPTY,               STR_FACE_LIPS_MOUSTACHE_TIP},        // PFW_WIDGET_LIPS_MOUSTACHE
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    315,  323,   146,   157, SPR_ARROW_RIGHT,         STR_FACE_LIPS_MOUSTACHE_TIP},        // PFW_WIDGET_LIPS_MOUSTACHE_R
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    281,  289,   134,   145, SPR_ARROW_LEFT,          STR_FACE_NOSE_TIP},                  // PFW_WIDGET_NOSE_L
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,    290,  314,   134,   145, STR_EMPTY,               STR_FACE_NOSE_TIP},                  // PFW_WIDGET_NOSE
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    315,  323,   134,   145, SPR_ARROW_RIGHT,         STR_FACE_NOSE_TIP},                  // PFW_WIDGET_NOSE_R
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    281,  289,    86,    97, SPR_ARROW_LEFT,          STR_FACE_HAIR_TIP},                  // PFW_WIDGET_HAIR_L
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,    290,  314,    86,    97, STR_EMPTY,               STR_FACE_HAIR_TIP},                  // PFW_WIDGET_HAIR
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    315,  323,    86,    97, SPR_ARROW_RIGHT,         STR_FACE_HAIR_TIP},                  // PFW_WIDGET_HAIR_R
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    281,  289,   170,   181, SPR_ARROW_LEFT,          STR_FACE_JACKET_TIP},                // PFW_WIDGET_JACKET_L
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,    290,  314,   170,   181, STR_EMPTY,               STR_FACE_JACKET_TIP},                // PFW_WIDGET_JACKET
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    315,  323,   170,   181, SPR_ARROW_RIGHT,         STR_FACE_JACKET_TIP},                // PFW_WIDGET_JACKET_R
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    281,  289,   182,   193, SPR_ARROW_LEFT,          STR_FACE_COLLAR_TIP},                // PFW_WIDGET_COLLAR_L
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,    290,  314,   182,   193, STR_EMPTY,               STR_FACE_COLLAR_TIP},                // PFW_WIDGET_COLLAR
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    315,  323,   182,   193, SPR_ARROW_RIGHT,         STR_FACE_COLLAR_TIP},                // PFW_WIDGET_COLLAR_R
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    281,  289,   194,   205, SPR_ARROW_LEFT,          STR_FACE_TIE_EARRING_TIP},           // PFW_WIDGET_TIE_EARRING_L
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,    290,  314,   194,   205, STR_EMPTY,               STR_FACE_TIE_EARRING_TIP},           // PFW_WIDGET_TIE_EARRING
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    315,  323,   194,   205, SPR_ARROW_RIGHT,         STR_FACE_TIE_EARRING_TIP},           // PFW_WIDGET_TIE_EARRING_R
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    281,  289,   122,   133, SPR_ARROW_LEFT,          STR_FACE_GLASSES_TIP_2},             // PFW_WIDGET_GLASSES_L
+{ WWT_PUSHTXTBTN,   RESIZE_NONE,  COLOUR_GREY,    290,  314,   122,   133, STR_EMPTY,               STR_FACE_GLASSES_TIP_2},             // PFW_WIDGET_GLASSES
+{ WWT_PUSHIMGBTN,   RESIZE_NONE,  COLOUR_GREY,    315,  323,   122,   133, SPR_ARROW_RIGHT,         STR_FACE_GLASSES_TIP_2},             // PFW_WIDGET_GLASSES_R
 {   WIDGETS_END},
 };
 
@@ -953,9 +954,15 @@
 			this->DrawFaceStringLabel(SCMFW_WIDGET_JACKET,                STR_FACE_JACKET,      GetCompanyManagerFaceBits(this->face, CMFV_JACKET,          this->ge), false);
 			this->DrawFaceStringLabel(SCMFW_WIDGET_COLLAR,                STR_FACE_COLLAR,      GetCompanyManagerFaceBits(this->face, CMFV_COLLAR,          this->ge), false);
 		}
+		DrawPixelInfo bk, *old_dpi;
+		old_dpi = _cur_dpi;
+		_cur_dpi = &bk;
+		*_cur_dpi = *old_dpi;
+		_cur_dpi->zoom = ZOOM_LVL_IN_2X;
 
 		/* Draw the company manager face picture */
 		DrawCompanyManagerFace(this->face, GetCompany((CompanyID)this->window_number)->colour, 2, 16);
+		_cur_dpi = old_dpi;
 	}
 
 	virtual void OnClick(Point pt, int widget)
@@ -1094,7 +1101,7 @@
 
 /** normal/simple company manager face selection window description */
 static const WindowDesc _select_company_manager_face_desc(
-	WDP_AUTO, WDP_AUTO, 190, 163, 190, 163,
+	WDP_AUTO, WDP_AUTO, 307, 323, 307, 323,
 	WC_COMPANY_MANAGER_FACE, WC_NONE,
 	WDF_STD_TOOLTIPS | WDF_STD_BTN | WDF_DEF_WIDGET | WDF_UNCLICK_BUTTONS | WDF_CONSTRUCTION,
 	_select_company_manager_face_widgets
@@ -1102,7 +1109,7 @@
 
 /** advanced company manager face selection window description */
 static const WindowDesc _select_company_manager_face_adv_desc(
-	WDP_AUTO, WDP_AUTO, 220, 220, 220, 220,
+	WDP_AUTO, WDP_AUTO, 327, 324, 327, 324,
 	WC_COMPANY_MANAGER_FACE, WC_NONE,
 	WDF_STD_TOOLTIPS | WDF_STD_BTN | WDF_DEF_WIDGET | WDF_UNCLICK_BUTTONS | WDF_CONSTRUCTION,
 	_select_company_manager_face_adv_widgets
Index: src/saveload/misc_sl.cpp
===================================================================
--- src/saveload/misc_sl.cpp	(revision 15770)
+++ src/saveload/misc_sl.cpp	(working copy)
@@ -45,7 +45,8 @@
 	w->viewport->dest_scrollpos_y = _saved_scrollpos_y;
 
 	ViewPort *vp = w->viewport;
-	vp->zoom = min(_saved_scrollpos_zoom, ZOOM_LVL_MAX);
+//	vp->zoom = min(_saved_scrollpos_zoom, ZOOM_LVL_MAX);
+	vp->zoom = ZOOM_LVL_NORMAL;
 	vp->virtual_width = ScaleByZoom(vp->width, vp->zoom);
 	vp->virtual_height = ScaleByZoom(vp->height, vp->zoom);
 
@@ -53,7 +54,6 @@
 	MarkWholeScreenDirty();
 }
 
-
 static const SaveLoadGlobVarList _date_desc[] = {
 	SLEG_CONDVAR(_date,                   SLE_FILE_U16 | SLE_VAR_I32,  0,  30),
 	SLEG_CONDVAR(_date,                   SLE_INT32,                  31, SL_MAX_VERSION),
Index: src/roadveh_cmd.cpp
===================================================================
--- src/roadveh_cmd.cpp	(revision 15770)
+++ src/roadveh_cmd.cpp	(working copy)
@@ -490,14 +490,14 @@
 {
 #define MKIT(a, b, c, d) ((a & 0xFF) << 24) | ((b & 0xFF) << 16) | ((c & 0xFF) << 8) | ((d & 0xFF) << 0)
 	static const uint32 _delta_xy_table[8] = {
-		MKIT(3, 3, -1, -1),
-		MKIT(3, 7, -1, -3),
-		MKIT(3, 3, -1, -1),
-		MKIT(7, 3, -3, -1),
-		MKIT(3, 3, -1, -1),
-		MKIT(3, 7, -1, -3),
-		MKIT(3, 3, -1, -1),
-		MKIT(7, 3, -3, -1),
+		MKIT(3, 3, -1, -1),   // N
+		MKIT(3, 14, -1, -3),   // NE
+		MKIT(3, 3, -1, -1),   // E
+		MKIT(7, 3, -3, -1),   // SE
+		MKIT(3, 3, -1, -1),   // S
+		MKIT(3, 14, -1, -3),   // SW
+		MKIT(3, 3, -1, -1),   // W
+		MKIT(7, 3, -3, -1),   // NW
 	};
 #undef MKIT
 
Index: src/zoom_type.h
===================================================================
--- src/zoom_type.h	(revision 15770)
+++ src/zoom_type.h	(working copy)
@@ -9,8 +9,10 @@
 
 enum ZoomLevel {
 	/* Our possible zoom-levels */
-	ZOOM_LVL_BEGIN  = 0,
-	ZOOM_LVL_NORMAL = 0,
+	ZOOM_LVL_BEGIN = 0,
+	ZOOM_LVL_IN_4X = 0,
+	ZOOM_LVL_IN_2X,  
+	ZOOM_LVL_NORMAL,
 	ZOOM_LVL_OUT_2X,
 	ZOOM_LVL_OUT_4X,
 	ZOOM_LVL_OUT_8X,
@@ -32,7 +34,7 @@
 
 	ZOOM_LVL_DETAIL   = ZOOM_LVL_OUT_2X, ///< All zoomlevels below or equal to this, will result in details on the screen, like road-work, ...
 
-	ZOOM_LVL_MIN      = ZOOM_LVL_NORMAL,
+	ZOOM_LVL_MIN      = ZOOM_LVL_BEGIN,
 	ZOOM_LVL_MAX      = ZOOM_LVL_OUT_8X,
 };
 DECLARE_POSTFIX_INCREMENT(ZoomLevel)
Index: src/vehicle.cpp
===================================================================
--- src/vehicle.cpp	(revision 15770)
+++ src/vehicle.cpp	(working copy)
@@ -760,9 +760,12 @@
 	SpriteID pal = PAL_NONE;
 
 	if (v->vehstatus & VS_DEFPAL) pal = (v->vehstatus & VS_CRASHED) ? PALETTE_CRASH : GetVehiclePalette(v);
-
+   if ((v->vehstatus & VS_SHADOW) != 0)
+   {
+      SetBit(image, PALETTE_MODIFIER_SHADOW);
+   }
 	AddSortableSpriteToDraw(image, pal, v->x_pos + v->x_offs, v->y_pos + v->y_offs,
-		v->x_extent, v->y_extent, v->z_extent, v->z_pos, (v->vehstatus & VS_SHADOW) != 0);
+		v->x_extent, v->y_extent, v->z_extent, v->z_pos, false);
 }
 
 void ViewportAddVehicles(DrawPixelInfo *dpi)
@@ -799,11 +802,11 @@
 			const Vehicle *v = _vehicle_position_hash[x + y]; // already masked & 0xFFF
 
 			while (v != NULL) {
-				if (!(v->vehstatus & VS_HIDDEN) &&
-						l <= v->coord.right &&
-						t <= v->coord.bottom &&
-						r >= v->coord.left &&
-						b >= v->coord.top) {
+				if (!(v->vehstatus & VS_HIDDEN) ) { //&&
+//						l <= v->coord.right &&
+//						t <= v->coord.bottom &&
+//						r >= v->coord.left &&
+//						b >= v->coord.top) {
 					DoDrawVehicle(v);
 				}
 				v = v->next_hash;
@@ -823,8 +826,8 @@
 
 	if ((uint)(x -= vp->left) >= (uint)vp->width || (uint)(y -= vp->top) >= (uint)vp->height) return NULL;
 
-	x = ScaleByZoom(x, vp->zoom) + vp->virtual_left;
-	y = ScaleByZoom(y, vp->zoom) + vp->virtual_top;
+	x = ScaleByZoom(x+ vp->virtual_left, vp->zoom) ;
+	y = ScaleByZoom(y+ vp->virtual_top, vp->zoom) ;
 
 	FOR_ALL_VEHICLES(v) {
 		if ((v->vehstatus & (VS_HIDDEN | VS_UNCLICKABLE)) == 0 &&
Index: src/viewport.cpp
===================================================================
--- src/viewport.cpp	(revision 15770)
+++ src/viewport.cpp	(working copy)
@@ -114,7 +114,7 @@
 /** Data structure storing rendering information */
 struct ViewportDrawer {
 	DrawPixelInfo dpi;
-
+	const ViewPort *vp;
 	StringSpriteToDrawVector string_sprites_to_draw;
 	TileSpriteToDrawVector tile_sprites_to_draw;
 	ParentSpriteToDrawVector parent_sprites_to_draw;
@@ -281,17 +281,17 @@
 	int i;
 	int left, top, width, height;
 
-	vp->virtual_left = x;
-	vp->virtual_top = y;
 
 	/* viewport is bound to its left top corner, so it must be rounded down (UnScaleByZoomLower)
 	 * else glitch described in FS#1412 will happen (offset by 1 pixel with zoom level > NORMAL)
 	 */
-	old_left = UnScaleByZoomLower(old_left, vp->zoom);
-	old_top = UnScaleByZoomLower(old_top, vp->zoom);
-	x = UnScaleByZoomLower(x, vp->zoom);
-	y = UnScaleByZoomLower(y, vp->zoom);
 
+	x = UnScaleByZoom(x, vp->zoom);
+	y = UnScaleByZoom(y, vp->zoom);
+
+	vp->virtual_left = x;
+	vp->virtual_top  = y;
+
 	old_left -= x;
 	old_top -= y;
 
@@ -364,9 +364,8 @@
 				return pt;
 	}
 
-	x = (ScaleByZoom(x, vp->zoom) + vp->virtual_left) >> 2;
-	y = (ScaleByZoom(y, vp->zoom) + vp->virtual_top) >> 1;
-
+	x = (ScaleByZoom(x + vp->virtual_left, vp->zoom) ) >> 2;
+	y = (ScaleByZoom(y + vp->virtual_top, vp->zoom) ) >> 1;
 	a = y - x;
 	b = y + x;
 
@@ -568,10 +567,13 @@
 	Point pt = RemapCoords(x, y, z);
 	const Sprite *spr = GetSprite(image & SPRITE_MASK, ST_NORMAL);
 
-	if (pt.x + spr->x_offs >= _vd.dpi.left + _vd.dpi.width ||
-			pt.x + spr->x_offs + spr->width <= _vd.dpi.left ||
-			pt.y + spr->y_offs >= _vd.dpi.top + _vd.dpi.height ||
-			pt.y + spr->y_offs + spr->height <= _vd.dpi.top)
+	int xu = UnScaleByZoom(pt.x, _vd.dpi.zoom);
+	int yu = UnScaleByZoom(pt.y, _vd.dpi.zoom);
+
+	if (xu + spr->x_offs >= _vd.vp->virtual_left + _vd.vp->width ||
+		 xu + spr->x_offs + spr->width <= _vd.vp->virtual_left ||
+		 yu + spr->y_offs >= _vd.vp->virtual_top + _vd.vp->height ||
+		 yu + spr->y_offs + spr->height <= _vd.vp->virtual_top)
 		return;
 
 	const ParentSpriteToDraw *pstd = _vd.parent_sprites_to_draw.End() - 1;
@@ -611,7 +613,7 @@
 	/* make the sprites transparent with the right palette */
 	if (transparent) {
 		SetBit(image, PALETTE_MODIFIER_TRANSPARENT);
-		pal = PALETTE_TO_TRANSPARENT;
+//		pal = PALETTE_TO_TRANSPARENT;
 	}
 
 	if (_vd.combine_sprites == 2) {
@@ -626,31 +628,37 @@
 
 	/* Compute screen extents of sprite */
 	if (image == SPR_EMPTY_BOUNDING_BOX) {
-		left = tmp_left = RemapCoords(x + w          , y + bb_offset_y, z + bb_offset_z).x;
-		right           = RemapCoords(x + bb_offset_x, y + h          , z + bb_offset_z).x + 1;
-		top  = tmp_top  = RemapCoords(x + bb_offset_x, y + bb_offset_y, z + dz         ).y;
-		bottom          = RemapCoords(x + w          , y + h          , z + bb_offset_z).y + 1;
+		left = tmp_left = RemapCoords(x + w				, y + bb_offset_y, z + bb_offset_z).x;
+		right				 = RemapCoords(x + bb_offset_x, y + h			  , z + bb_offset_z).x + 1;
+		top  = tmp_top  = RemapCoords(x + bb_offset_x, y + bb_offset_y, z + dz	  		 ).y;
+		bottom			 = RemapCoords(x + w				, y + h			  , z + bb_offset_z).y + 1;
 	} else {
 		const Sprite *spr = GetSprite(image & SPRITE_MASK, ST_NORMAL);
-		left = tmp_left = (pt.x += spr->x_offs);
-		right           = (pt.x +  spr->width );
-		top  = tmp_top  = (pt.y += spr->y_offs);
-		bottom          = (pt.y +  spr->height);
+		int x_offs, y_offs,swidth, sheight;
+
+		x_offs = ScaleByZoom(spr->x_offs, _vd.vp->zoom);
+		y_offs = ScaleByZoom(spr->y_offs, _vd.vp->zoom);
+		swidth = ScaleByZoom(spr->width, _vd.vp->zoom);
+		sheight = ScaleByZoom(spr->height, _vd.vp->zoom);
+		left = tmp_left = (pt.x += x_offs);
+		right				 = (pt.x +  swidth );
+		top  = tmp_top  = (pt.y += y_offs);
+		bottom			 = (pt.y +  sheight);
 	}
 
 	if (_draw_bounding_boxes && (image != SPR_EMPTY_BOUNDING_BOX)) {
 		/* Compute maximal extents of sprite and it's bounding box */
-		left   = min(left  , RemapCoords(x + w          , y + bb_offset_y, z + bb_offset_z).x);
-		right  = max(right , RemapCoords(x + bb_offset_x, y + h          , z + bb_offset_z).x + 1);
-		top    = min(top   , RemapCoords(x + bb_offset_x, y + bb_offset_y, z + dz         ).y);
-		bottom = max(bottom, RemapCoords(x + w          , y + h          , z + bb_offset_z).y + 1);
+		left	 = min(left  , RemapCoords(x + w				, y + bb_offset_y, z + bb_offset_z).x);
+		right  = max(right , RemapCoords(x + bb_offset_x, y + h			  , z + bb_offset_z).x + 1);
+		top	 = min(top	 , RemapCoords(x + bb_offset_x, y + bb_offset_y, z + dz			 ).y);
+		bottom = max(bottom, RemapCoords(x + w		 		, y + h			  , z + bb_offset_z).y + 1);
 	}
 
 	/* Do not add the sprite to the viewport, if it is outside */
-	if (left   >= _vd.dpi.left + _vd.dpi.width ||
-	    right  <= _vd.dpi.left                 ||
-	    top    >= _vd.dpi.top + _vd.dpi.height ||
-	    bottom <= _vd.dpi.top) {
+	if (UnScaleByZoom(left, _vd.vp->zoom)	 >= _vd.vp->virtual_left + _vd.vp->width ||
+		 UnScaleByZoom(right, _vd.vp->zoom)  <= _vd.vp->virtual_left ||
+		 UnScaleByZoom(top, _vd.vp->zoom)	 >= _vd.vp->virtual_top + _vd.vp->height  ||
+		 UnScaleByZoom(bottom, _vd.vp->zoom) <= _vd.vp->virtual_top) {
 		return;
 	}
 
@@ -711,7 +719,6 @@
 	/* make the sprites transparent with the right palette */
 	if (transparent) {
 		SetBit(image, PALETTE_MODIFIER_TRANSPARENT);
-		pal = PALETTE_TO_TRANSPARENT;
 	}
 
 	*_vd.last_child = _vd.child_screen_sprites_to_draw.Length();
@@ -720,8 +727,8 @@
 	cs->image = image;
 	cs->pal = pal;
 	cs->sub = sub;
-	cs->x = x;
-	cs->y = y;
+	cs->x = UnScaleByZoom(x, _vd.dpi.zoom);
+	cs->y = UnScaleByZoom(y, _vd.dpi.zoom);
 	cs->next = -1;
 
 	/* Append the sprite to the active ChildSprite list.
@@ -935,25 +942,28 @@
 
 static void ViewportAddLandscape()
 {
-	int x, y, width, height;
+	int x, y, x1, y1, width, nof_sprites_drawn;
+	int top, bottom;
 	TileInfo ti;
 	bool direction;
+	Point pt;
 
 	_cur_ti = &ti;
 
-	/* Transform into tile coordinates and round to closest full tile */
-	x = ((_vd.dpi.top >> 1) - (_vd.dpi.left >> 2)) & ~0xF;
-	y = ((_vd.dpi.top >> 1) + (_vd.dpi.left >> 2) - 0x10) & ~0xF;
+	x1 = ScaleByZoomLower(_vd.vp->virtual_left + _vd.dpi.left, _vd.vp->zoom)  ;
+	y1 = ScaleByZoomLower(_vd.vp->virtual_top + _vd.dpi.top, _vd.vp->zoom)  ;
 
-	/* determine size of area */
-	{
-		Point pt = RemapCoords(x, y, 241);
-		width = (_vd.dpi.left + _vd.dpi.width - pt.x + 95) >> 6;
-		height = (_vd.dpi.top + _vd.dpi.height - pt.y) >> 5 << 1;
-	}
+	x1 = x1 / 4;
+	y1 = y1 / 2;
 
+	x = ((y1-x1) / TILE_SIZE) * TILE_SIZE ;
+	y = ((y1+x1) / TILE_SIZE) * TILE_SIZE - (TILE_SIZE << 1);
+
+	width  = (_vd.dpi.width / UnScaleByZoom(64, _vd.vp->zoom)) + 4;
+
+	bottom = ScaleByZoom(_vd.vp->virtual_top + _vd.dpi.top + _vd.dpi.height, _vd.vp->zoom) + 128;
+	top = ScaleByZoom(_vd.vp->virtual_top + _vd.dpi.top, _vd.vp->zoom) ;
 	assert(width > 0);
-	assert(height > 0);
 
 	direction = false;
 
@@ -961,7 +971,7 @@
 		int width_cur = width;
 		int x_cur = x;
 		int y_cur = y;
-
+		nof_sprites_drawn = 0;
 		do {
 			TileType tt = MP_VOID;
 
@@ -990,24 +1000,17 @@
 					tt = GetTileType(tile);
 				}
 			}
-
-			_vd.foundation_part = FOUNDATION_PART_NONE;
-			_vd.foundation[0] = -1;
-			_vd.foundation[1] = -1;
-			_vd.last_foundation_child[0] = NULL;
-			_vd.last_foundation_child[1] = NULL;
-
-			_tile_type_procs[tt]->draw_tile_proc(&ti);
-
-			if ((x_cur == (int)MapMaxX() * TILE_SIZE && IsInsideMM(y_cur, 0, MapMaxY() * TILE_SIZE + 1)) ||
-				(y_cur == (int)MapMaxY() * TILE_SIZE && IsInsideMM(x_cur, 0, MapMaxX() * TILE_SIZE + 1))) {
-				TileIndex tile = TileVirtXY(x_cur, y_cur);
-				ti.tile = tile;
-				ti.tileh = GetTileSlope(tile, &ti.z);
-				tt = GetTileType(tile);
+			pt = RemapCoords(ti.x,ti.y,ti.z);
+			if (pt.y < bottom) {
+				_vd.foundation_part = FOUNDATION_PART_NONE;
+				_vd.foundation[0] = -1;
+				_vd.foundation[1] = -1;
+				_vd.last_foundation_child[0] = NULL;
+				_vd.last_foundation_child[1] = NULL;
+				_tile_type_procs[tt]->draw_tile_proc(&ti);
+				if (ti.tile != INVALID_TILE) DrawTileSelection(&ti);
+				nof_sprites_drawn++;
 			}
-			if (ti.tile != INVALID_TILE) DrawTileSelection(&ti);
-
 			y_cur += 0x10;
 			x_cur -= 0x10;
 		} while (--width_cur);
@@ -1017,7 +1020,7 @@
 		} else {
 			x += 0x10;
 		}
-	} while (--height);
+	} while (nof_sprites_drawn || (pt.y < top));
 }
 
 
@@ -1029,18 +1032,44 @@
 	if (!HasBit(_display_opt, DO_SHOW_TOWN_NAMES) || _game_mode == GM_MENU)
 		return;
 
-	left = dpi->left;
-	top = dpi->top;
-	right = left + dpi->width;
-	bottom = top + dpi->height;
 
+	left = ScaleByZoom(_vd.vp->virtual_left + dpi->left, dpi->zoom);
+	top =  ScaleByZoom(_vd.vp->virtual_top + dpi->top, dpi->zoom);
+	right = left + ScaleByZoom(dpi->width, dpi->zoom);
+	bottom = top + ScaleByZoom(dpi->height, dpi->zoom);
+
 	switch (dpi->zoom) {
+		case ZOOM_LVL_IN_4X:
+			FOR_ALL_TOWNS(t) {
+
+				if (bottom > t->sign.top &&
+						top	< t->sign.top + 12 &&
+						right > t->sign.left &&
+						left	< t->sign.left + t->sign.width_1) {
+					AddStringToDraw(t->sign.left + 1, t->sign.top + 1,
+						_settings_client.gui.population_in_label ? STR_TOWN_LABEL_POP : STR_TOWN_LABEL,
+						t->index, t->population);
+				}
+			}
+			break;
+		case ZOOM_LVL_IN_2X:
+			FOR_ALL_TOWNS(t) {
+				if (bottom	 > t->sign.top &&
+						top	 < t->sign.top + 12 &&
+						right  > t->sign.left &&
+						left	 < t->sign.left + t->sign.width_1) {
+					AddStringToDraw(t->sign.left + 1, t->sign.top + 1,
+						_settings_client.gui.population_in_label ? STR_TOWN_LABEL_POP : STR_TOWN_LABEL,
+						t->index, t->population);
+				}
+			}
+			break;
 		case ZOOM_LVL_NORMAL:
 			FOR_ALL_TOWNS(t) {
 				if (bottom > t->sign.top &&
-						top    < t->sign.top + 12 &&
+						top	 < t->sign.top + 12 &&
 						right  > t->sign.left &&
-						left   < t->sign.left + t->sign.width_1) {
+						left	 < t->sign.left + t->sign.width_1) {
 					AddStringToDraw(t->sign.left + 1, t->sign.top + 1,
 						_settings_client.gui.population_in_label ? STR_TOWN_LABEL_POP : STR_TOWN_LABEL,
 						t->index, t->population);
@@ -1053,10 +1082,10 @@
 			bottom += 2;
 
 			FOR_ALL_TOWNS(t) {
-				if (bottom > t->sign.top &&
-						top    < t->sign.top + 24 &&
-						right  > t->sign.left &&
-						left   < t->sign.left + t->sign.width_1 * 2) {
+				if (bottom  > t->sign.top &&
+						top   < t->sign.top + 24 &&
+						right > t->sign.left &&
+						left	< t->sign.left + t->sign.width_1*2) {
 					AddStringToDraw(t->sign.left + 1, t->sign.top + 1,
 						_settings_client.gui.population_in_label ? STR_TOWN_LABEL_POP : STR_TOWN_LABEL,
 						t->index, t->population);
@@ -1070,10 +1099,10 @@
 			bottom += ScaleByZoom(1, dpi->zoom) + 1;
 
 			FOR_ALL_TOWNS(t) {
-				if (bottom > t->sign.top &&
-						top    < t->sign.top + ScaleByZoom(12, dpi->zoom) &&
+				if (bottom	 > t->sign.top &&
+						top	 < t->sign.top + ScaleByZoom(12, dpi->zoom) &&
 						right  > t->sign.left &&
-						left   < t->sign.left + ScaleByZoom(t->sign.width_2, dpi->zoom)) {
+						left	 < t->sign.left + ScaleByZoom(t->sign.width_2, dpi->zoom)) {
 					AddStringToDraw(t->sign.left + 5, t->sign.top + 1, STR_TOWN_LABEL_TINY_BLACK, t->index, 0);
 					AddStringToDraw(t->sign.left + 1, t->sign.top - 3, STR_TOWN_LABEL_TINY_WHITE, t->index, 0);
 				}
@@ -1099,18 +1128,46 @@
 	if (!HasBit(_display_opt, DO_SHOW_STATION_NAMES) || _game_mode == GM_MENU)
 		return;
 
-	left = dpi->left;
-	top = dpi->top;
-	right = left + dpi->width;
-	bottom = top + dpi->height;
+	DEBUG(sprite, 1, "dpi l %d  w%d t %d  h%d", dpi->left, dpi->width, dpi->top, dpi->height );
+	DEBUG(sprite, 1, "virt l %d  t%d ", _vd.vp->virtual_left, _vd.vp->virtual_top);
 
+	left = ScaleByZoom(_vd.vp->virtual_left + dpi->left + 32, dpi->zoom) - 32;
+	top =  ScaleByZoom(_vd.vp->virtual_top + dpi->top + 16, dpi->zoom) - 16;
+	right = left + ScaleByZoom(dpi->width, dpi->zoom);
+	bottom = top + ScaleByZoom(dpi->height, dpi->zoom);
+
+	DEBUG(sprite, 1, "left l %d  r%d t %d  b%d", left, right, top, bottom );
+
 	switch (dpi->zoom) {
+		case ZOOM_LVL_IN_4X:
+			FOR_ALL_STATIONS(st) {
+				DEBUG(sprite, 1, "sign l %d  t%d ", st->sign.left, st->sign.top );
+				if (bottom > st->sign.top &&
+						top	 < st->sign.top + 12 &&
+						right  > st->sign.left &&
+						left	 < st->sign.left + st->sign.width_1) {
+					AddStation(st, STR_305C_0, st->sign.width_1);
+				}
+			}
+			break;
+		case ZOOM_LVL_IN_2X:
+			FOR_ALL_STATIONS(st) {
+				if (bottom > st->sign.top &&
+						top	 < st->sign.top + 12 &&
+						right  > st->sign.left &&
+						left	 < st->sign.left + st->sign.width_1) {
+					AddStation(st, STR_305C_0, st->sign.width_1);
+				}
+			}
+			break;
+
 		case ZOOM_LVL_NORMAL:
 			FOR_ALL_STATIONS(st) {
+				DEBUG(sprite, 1, "sign l %d  t%d ", st->sign.left, st->sign.top );			
 				if (bottom > st->sign.top &&
-						top    < st->sign.top + 12 &&
+						top	 < st->sign.top + 12 &&
 						right  > st->sign.left &&
-						left   < st->sign.left + st->sign.width_1) {
+						left	 < st->sign.left + st->sign.width_1) {
 					AddStation(st, STR_305C_0, st->sign.width_1);
 				}
 			}
@@ -1120,10 +1177,11 @@
 			right += 2;
 			bottom += 2;
 			FOR_ALL_STATIONS(st) {
+				DEBUG(sprite, 1, "sign l %d  t%d ", st->sign.left, st->sign.top );
 				if (bottom > st->sign.top &&
-						top    < st->sign.top + 24 &&
+						top	 < st->sign.top + 24 &&
 						right  > st->sign.left &&
-						left   < st->sign.left + st->sign.width_1 * 2) {
+						left	 < st->sign.left + st->sign.width_1*2) {
 					AddStation(st, STR_305C_0, st->sign.width_1);
 				}
 			}
@@ -1169,6 +1227,26 @@
 	bottom = top + dpi->height;
 
 	switch (dpi->zoom) {
+		case ZOOM_LVL_IN_4X:
+			FOR_ALL_SIGNS(si) {
+				if (bottom > si->sign.top &&
+						top    < si->sign.top + 12 &&
+						right  > si->sign.left &&
+						left   < si->sign.left + si->sign.width_1) {
+					AddSign(si, STR_2806, si->sign.width_1);
+				}
+			}
+			break;
+		case ZOOM_LVL_IN_2X:
+			FOR_ALL_SIGNS(si) {
+				if (bottom > si->sign.top &&
+						top    < si->sign.top + 12 &&
+						right  > si->sign.left &&
+						left   < si->sign.left + si->sign.width_1) {
+					AddSign(si, STR_2806, si->sign.width_1);
+				}
+			}
+			break;
 		case ZOOM_LVL_NORMAL:
 			FOR_ALL_SIGNS(si) {
 				if (bottom > si->sign.top &&
@@ -1233,6 +1311,26 @@
 	bottom = top + dpi->height;
 
 	switch (dpi->zoom) {
+		case ZOOM_LVL_IN_4X:
+			FOR_ALL_WAYPOINTS(wp) {
+				if (bottom > wp->sign.top &&
+						top    < wp->sign.top + 12 &&
+						right  > wp->sign.left &&
+						left   < wp->sign.left + wp->sign.width_1) {
+					AddWaypoint(wp, STR_WAYPOINT_VIEWPORT, wp->sign.width_1);
+				}
+			}
+			break;
+		case ZOOM_LVL_IN_2X:
+			FOR_ALL_WAYPOINTS(wp) {
+				if (bottom > wp->sign.top &&
+						top    < wp->sign.top + 12 &&
+						right  > wp->sign.left &&
+						left   < wp->sign.left + wp->sign.width_1) {
+					AddWaypoint(wp, STR_WAYPOINT_VIEWPORT, wp->sign.width_1);
+				}
+			}
+			break;
 		case ZOOM_LVL_NORMAL:
 			FOR_ALL_WAYPOINTS(wp) {
 				if (bottom > wp->sign.top &&
@@ -1301,7 +1399,15 @@
 	const TileSpriteToDraw *tsend = tstdv->End();
 	for (const TileSpriteToDraw *ts = tstdv->Begin(); ts != tsend; ++ts) {
 		Point pt = RemapCoords(ts->x, ts->y, ts->z);
-		DrawSprite(ts->image, ts->pal, pt.x, pt.y, ts->sub);
+		int left = UnScaleByZoom(pt.x,_vd.vp->zoom);
+		int top =  UnScaleByZoom(pt.y,_vd.vp->zoom);
+
+
+		left -= _vd.vp->virtual_left;
+		top  -= _vd.vp->virtual_top;
+
+		DrawSprite(ts->image, ts->pal, left, top, ts->sub);
+
 	}
 }
 
@@ -1365,16 +1471,22 @@
 
 static void ViewportDrawParentSprites(const ParentSpriteToSortVector *psd, const ChildScreenSpriteToDrawVector *csstdv)
 {
+	int  x,y, left, top;
 	const ParentSpriteToDraw * const *psd_end = psd->End();
 	for (const ParentSpriteToDraw * const *it = psd->Begin(); it != psd_end; it++) {
-		const ParentSpriteToDraw *ps = *it;
-		if (ps->image != SPR_EMPTY_BOUNDING_BOX) DrawSprite(ps->image, ps->pal, ps->x, ps->y, ps->sub);
+		const ParentSpriteToDraw* ps = *it;
 
+		x = UnScaleByZoom(ps->x, _cur_dpi->zoom) - _vd.vp->virtual_left;
+		y = UnScaleByZoom(ps->y, _cur_dpi->zoom) - _vd.vp->virtual_top;
+		left = UnScaleByZoom(ps->left, _cur_dpi->zoom) - _vd.vp->virtual_left;
+		top = UnScaleByZoom(ps->top, _cur_dpi->zoom) - _vd.vp->virtual_top;
+		if (ps->image != SPR_EMPTY_BOUNDING_BOX) DrawSprite(ps->image, ps->pal, x, y, ps->sub);
+
 		int child_idx = ps->first_child;
 		while (child_idx >= 0) {
 			const ChildScreenSpriteToDraw *cs = csstdv->Get(child_idx);
 			child_idx = cs->next;
-			DrawSprite(cs->image, cs->pal, ps->left + cs->x, ps->top + cs->y, cs->sub);
+			DrawSprite(cs->image, cs->pal, left + cs->x, top + cs->y, cs->sub);
 		}
 	}
 }
@@ -1385,14 +1497,32 @@
  */
 static void ViewportDrawBoundingBoxes(const ParentSpriteToSortVector *psd)
 {
+	ZoomLevel zoom = _cur_dpi->zoom;
+
 	const ParentSpriteToDraw * const *psd_end = psd->End();
 	for (const ParentSpriteToDraw * const *it = psd->Begin(); it != psd_end; it++) {
 		const ParentSpriteToDraw *ps = *it;
-		Point pt1 = RemapCoords(ps->xmax + 1, ps->ymax + 1, ps->zmax + 1); // top front corner
-		Point pt2 = RemapCoords(ps->xmin    , ps->ymax + 1, ps->zmax + 1); // top left corner
-		Point pt3 = RemapCoords(ps->xmax + 1, ps->ymin    , ps->zmax + 1); // top right corner
-		Point pt4 = RemapCoords(ps->xmax + 1, ps->ymax + 1, ps->zmin    ); // bottom front corner
+//		Point pt1 = RemapCoords(ps->xmax + 1, ps->ymax + 1, ps->zmax + 1); // top front corner
+//		Point pt2 = RemapCoords(ps->xmin    , ps->ymax + 1, ps->zmax + 1); // top left corner
+//		Point pt3 = RemapCoords(ps->xmax + 1, ps->ymin    , ps->zmax + 1); // top right corner
+//		Point pt4 = RemapCoords(ps->xmax + 1, ps->ymax + 1, ps->zmin    ); // bottom front corner
 
+		Point pt1 = RemapCoords(ps->xmax, ps->ymax, ps->zmax); // top front corner
+		Point pt2 = RemapCoords(ps->xmin, ps->ymax, ps->zmax); // top left corner
+		Point pt3 = RemapCoords(ps->xmax, ps->ymin, ps->zmax); // top right corner
+		Point pt4 = RemapCoords(ps->xmax, ps->ymax, ps->zmin); // bottom front corner
+
+
+		pt1.x = UnScaleByZoom(pt1.x, zoom) - _vd.vp->virtual_left;
+		pt1.y = UnScaleByZoom(pt1.y, zoom) - _vd.vp->virtual_top;
+		pt2.x = UnScaleByZoom(pt2.x, zoom) - _vd.vp->virtual_left;
+		pt2.y = UnScaleByZoom(pt2.y, zoom) - _vd.vp->virtual_top;
+		pt3.x = UnScaleByZoom(pt3.x, zoom) - _vd.vp->virtual_left;
+		pt3.y = UnScaleByZoom(pt3.y, zoom) - _vd.vp->virtual_top;
+		pt4.x = UnScaleByZoom(pt4.x, zoom) - _vd.vp->virtual_left;
+		pt4.y = UnScaleByZoom(pt4.y, zoom) - _vd.vp->virtual_top;
+
+
 		DrawBox(        pt1.x,         pt1.y,
 		        pt2.x - pt1.x, pt2.y - pt1.y,
 		        pt3.x - pt1.x, pt3.y - pt1.y,
@@ -1409,23 +1539,20 @@
 	dp = *dpi;
 
 	zoom = dp.zoom;
+	zoom = _vd.vp->zoom;
 	dp.zoom = ZOOM_LVL_NORMAL;
 
-	dp.left   = UnScaleByZoom(dp.left,   zoom);
-	dp.top    = UnScaleByZoom(dp.top,    zoom);
-	dp.width  = UnScaleByZoom(dp.width,  zoom);
-	dp.height = UnScaleByZoom(dp.height, zoom);
-
 	const StringSpriteToDraw *ssend = sstdv->End();
 	for (const StringSpriteToDraw *ss = sstdv->Begin(); ss != ssend; ++ss) {
 		TextColour colour;
+		int x = UnScaleByZoom(ss->x + 32, zoom) - _vd.vp->virtual_left - 32;
+		int y = UnScaleByZoom(ss->y + 16, zoom) - _vd.vp->virtual_top - 16;
 
 		if (ss->width != 0) {
 			/* Do not draw signs nor station names if they are set invisible */
 			if (IsInvisibilitySet(TO_SIGNS) && ss->string != STR_2806) continue;
 
-			int x = UnScaleByZoom(ss->x, zoom) - 1;
-			int y = UnScaleByZoom(ss->y, zoom) - 1;
+
 			int bottom = y + 11;
 			int w = ss->width;
 
@@ -1440,7 +1567,7 @@
 		 * or if we are drawing a general text sign (STR_2806) */
 			if (!IsTransparencySet(TO_SIGNS) || ss->string == STR_2806) {
 				DrawFrameRect(
-					x, y, x + w, bottom, (Colours)ss->colour,
+					x - 1, y - 1, x + w, bottom, (Colours)ss->colour,
 					IsTransparencySet(TO_SIGNS) ? FR_TRANSPARENT : FR_NONE
 				);
 			}
@@ -1457,38 +1584,49 @@
 		} else {
 			colour = TC_BLACK;
 		}
-		DrawString(
-			UnScaleByZoom(ss->x, zoom), UnScaleByZoom(ss->y, zoom) - (ss->width & 0x8000 ? 2 : 0),
-			ss->string, colour
-		);
+		DrawString(x, y - (ss->width & 0x8000 ? 2 : 0),	ss->string, colour);
 	}
 }
 
 void ViewportDoDraw(const ViewPort *vp, int left, int top, int right, int bottom)
 {
 	DrawPixelInfo *old_dpi = _cur_dpi;
+	DrawPixelInfo tmp_dpi;
+	
 	_cur_dpi = &_vd.dpi;
+	_cur_dpi->zoom = vp->zoom;
 
+
+	int x = left;
+	int y = top;
+
+	left = left - vp->left;
+	top  = top - vp->top;
+	right= right - vp->left;
+	bottom = bottom - vp->top;
+
 	_vd.dpi.zoom = vp->zoom;
-	int mask = ScaleByZoom(-1, vp->zoom);
-
 	_vd.combine_sprites = 0;
-
-	_vd.dpi.width = (right - left) & mask;
-	_vd.dpi.height = (bottom - top) & mask;
-	_vd.dpi.left = left & mask;
-	_vd.dpi.top = top & mask;
+	_vd.dpi.width = (right - left) ;
+	_vd.dpi.height = (bottom - top) ;
+	_vd.dpi.left = left ;
+	_vd.dpi.top = top ;
 	_vd.dpi.pitch = old_dpi->pitch;
 	_vd.last_child = NULL;
-
-	int x = UnScaleByZoom(_vd.dpi.left - (vp->virtual_left & mask), vp->zoom) + vp->left;
-	int y = UnScaleByZoom(_vd.dpi.top - (vp->virtual_top & mask), vp->zoom) + vp->top;
-
+	_vd.vp = vp;
 	_vd.dpi.dst_ptr = BlitterFactoryBase::GetCurrentBlitter()->MoveTo(old_dpi->dst_ptr, x - old_dpi->left, y - old_dpi->top);
 
 	ViewportAddLandscape();
-	ViewportAddVehicles(&_vd.dpi);
 
+	tmp_dpi = _vd.dpi;
+	tmp_dpi.left = ScaleByZoom(vp->virtual_left, vp->zoom);
+	tmp_dpi.top = ScaleByZoom(vp->virtual_top, vp->zoom);
+	tmp_dpi.width = ScaleByZoom(vp->width, vp->zoom);
+	tmp_dpi.height = ScaleByZoom(vp->height, vp->zoom);
+
+	ViewportAddVehicles(&tmp_dpi);
+	DrawTextEffects(&tmp_dpi);
+
 	ViewportAddTownNames(&_vd.dpi);
 	ViewportAddStationNames(&_vd.dpi);
 	ViewportAddSigns(&_vd.dpi);
@@ -1523,7 +1661,8 @@
  * If we do, the sprite memory will overflow. */
 static void ViewportDrawChk(const ViewPort *vp, int left, int top, int right, int bottom)
 {
-	if (ScaleByZoom(bottom - top, vp->zoom) * ScaleByZoom(right - left, vp->zoom) > 180000) {
+	if (ScaleByZoom(bottom - top, vp->zoom) * ScaleByZoom(right - left, vp->zoom)
+	> 50000) {
 		if ((bottom - top) > (right - left)) {
 			int t = (top + bottom) >> 1;
 			ViewportDrawChk(vp, left, top, right, t);
@@ -1534,12 +1673,7 @@
 			ViewportDrawChk(vp, t, top, right, bottom);
 		}
 	} else {
-		ViewportDoDraw(vp,
-			ScaleByZoom(left - vp->left, vp->zoom) + vp->virtual_left,
-			ScaleByZoom(top - vp->top, vp->zoom) + vp->virtual_top,
-			ScaleByZoom(right - vp->left, vp->zoom) + vp->virtual_left,
-			ScaleByZoom(bottom - vp->top, vp->zoom) + vp->virtual_top
-		);
+		ViewportDoDraw(vp, left, top,	right, bottom);
 	}
 }
 
@@ -1631,8 +1765,8 @@
 		}
 
 		ClampViewportToMap(vp, w->viewport->scrollpos_x, w->viewport->scrollpos_y);
+		SetViewportPosition(w, w->viewport->scrollpos_x, w->viewport->scrollpos_y);
 
-		SetViewportPosition(w, w->viewport->scrollpos_x, w->viewport->scrollpos_y);
 	}
 }
 
@@ -1647,26 +1781,32 @@
  */
 static void MarkViewportDirty(const ViewPort *vp, int left, int top, int right, int bottom)
 {
-	right -= vp->virtual_left;
-	if (right <= 0) return;
+	int vt, vl, w, h;
 
-	bottom -= vp->virtual_top;
-	if (bottom <= 0) return;
 
-	left = max(0, left - vp->virtual_left);
+	left = UnScaleByZoom(left, vp->zoom);
+	top  = UnScaleByZoom(top, vp->zoom);
+	right = UnScaleByZoom(right, vp->zoom);
+	bottom = UnScaleByZoom(bottom, vp->zoom);
 
-	if (left >= vp->virtual_width) return;
+	vl = vp->virtual_left;
+	vt = vp->virtual_top;
+	w = vp->width;
+	h = vp->height;
 
-	top = max(0, top - vp->virtual_top);
+	left = max(0, left - vl);
+	if (left >= w) return;
 
-	if (top >= vp->virtual_height) return;
+	top = max(0, top - vt);
+	if (top >= h ) return;
 
-	SetDirtyBlocks(
-		UnScaleByZoomLower(left, vp->zoom) + vp->left,
-		UnScaleByZoomLower(top, vp->zoom) + vp->top,
-		UnScaleByZoom(right, vp->zoom) + vp->left + 1,
-		UnScaleByZoom(bottom, vp->zoom) + vp->top + 1
-	);
+	right -= vl;
+	if (right <= 0) return;
+
+	bottom -= vt;
+	if (bottom <= 0) return;
+	
+	SetDirtyBlocks(left + vp->left, top + vp->top, right + vp->left, bottom + vp->top);
 }
 
 /**
@@ -1770,11 +1910,38 @@
 	const Town *t;
 
 	if (!HasBit(_display_opt, DO_SHOW_TOWN_NAMES)) return false;
-
+	x = ScaleByZoom(x - vp->left + vp->virtual_left, vp->zoom);
+	y = ScaleByZoom(y - vp->top + vp->virtual_top, vp->zoom);
 	switch (vp->zoom) {
+		case ZOOM_LVL_IN_4X:
+//			x = x - vp->left + vp->virtual_left;
+//			y = y - vp->top  + vp->virtual_top;
+			FOR_ALL_TOWNS(t) {
+				if (y >= t->sign.top &&
+						y < t->sign.top + 12 &&
+						x >= t->sign.left &&
+						x < t->sign.left + t->sign.width_1) {
+					ShowTownViewWindow(t->index);
+					return true;
+				}
+			}
+			break;
+		case ZOOM_LVL_IN_2X:
+//			x = x - vp->left + vp->virtual_left;
+//			y = y - vp->top  + vp->virtual_top;
+			FOR_ALL_TOWNS(t) {
+				if (y >= t->sign.top &&
+						y < t->sign.top + 12 &&
+						x >= t->sign.left &&
+						x < t->sign.left + t->sign.width_1) {
+					ShowTownViewWindow(t->index);
+					return true;
+				}
+			}
+			break;
 		case ZOOM_LVL_NORMAL:
-			x = x - vp->left + vp->virtual_left;
-			y = y - vp->top  + vp->virtual_top;
+//			x = x - vp->left + vp->virtual_left;
+//			y = y - vp->top  + vp->virtual_top;
 			FOR_ALL_TOWNS(t) {
 				if (y >= t->sign.top &&
 						y < t->sign.top + 12 &&
@@ -1787,8 +1954,8 @@
 			break;
 
 		case ZOOM_LVL_OUT_2X:
-			x = (x - vp->left + 1) * 2 + vp->virtual_left;
-			y = (y - vp->top  + 1) * 2 + vp->virtual_top;
+//			x = (x - vp->left + 1) * 2 + vp->virtual_left;
+//			y = (y - vp->top  + 1) * 2 + vp->virtual_top;
 			FOR_ALL_TOWNS(t) {
 				if (y >= t->sign.top &&
 						y < t->sign.top + 24 &&
@@ -1802,8 +1969,8 @@
 
 		case ZOOM_LVL_OUT_4X:
 		case ZOOM_LVL_OUT_8X:
-			x = ScaleByZoom(x - vp->left + ScaleByZoom(1, vp->zoom) - 1, vp->zoom) + vp->virtual_left;
-			y = ScaleByZoom(y - vp->top  + ScaleByZoom(1, vp->zoom) - 1, vp->zoom) + vp->virtual_top;
+//			x = ScaleByZoom(x - vp->left + ScaleByZoom(1, vp->zoom) - 1, vp->zoom) + vp->virtual_left;
+//			y = ScaleByZoom(y - vp->top  + ScaleByZoom(1, vp->zoom) - 1, vp->zoom) + vp->virtual_top;
 
 			FOR_ALL_TOWNS(t) {
 				if (y >= t->sign.top &&
@@ -1830,6 +1997,32 @@
 	if (!HasBit(_display_opt, DO_SHOW_STATION_NAMES) || IsInvisibilitySet(TO_SIGNS)) return false;
 
 	switch (vp->zoom) {
+		case ZOOM_LVL_IN_4X:
+			x = x - vp->left + vp->virtual_left;
+			y = y - vp->top  + vp->virtual_top;
+			FOR_ALL_STATIONS(st) {
+				if (y >= st->sign.top &&
+						y < st->sign.top + 12 &&
+						x >= st->sign.left &&
+						x < st->sign.left + st->sign.width_1) {
+					ShowStationViewWindow(st->index);
+					return true;
+				}
+			}
+			break;
+		case ZOOM_LVL_IN_2X:
+			x = x - vp->left + vp->virtual_left;
+			y = y - vp->top  + vp->virtual_top;
+			FOR_ALL_STATIONS(st) {
+				if (y >= st->sign.top &&
+						y < st->sign.top + 12 &&
+						x >= st->sign.left &&
+						x < st->sign.left + st->sign.width_1) {
+					ShowStationViewWindow(st->index);
+					return true;
+				}
+			}
+			break;
 		case ZOOM_LVL_NORMAL:
 			x = x - vp->left + vp->virtual_left;
 			y = y - vp->top  + vp->virtual_top;
@@ -1889,6 +2082,32 @@
 	if (!HasBit(_display_opt, DO_SHOW_SIGNS) || IsInvisibilitySet(TO_SIGNS) || _current_company == COMPANY_SPECTATOR) return false;
 
 	switch (vp->zoom) {
+		case ZOOM_LVL_IN_4X:
+			x = x - vp->left + vp->virtual_left;
+			y = y - vp->top  + vp->virtual_top;
+			FOR_ALL_SIGNS(si) {
+				if (y >= si->sign.top &&
+						y <  si->sign.top + 12 &&
+						x >= si->sign.left &&
+						x <  si->sign.left + si->sign.width_1) {
+					ShowRenameSignWindow(si);
+					return true;
+				}
+			}
+			break;
+		case ZOOM_LVL_IN_2X:
+			x = x - vp->left + vp->virtual_left;
+			y = y - vp->top  + vp->virtual_top;
+			FOR_ALL_SIGNS(si) {
+				if (y >= si->sign.top &&
+						y <  si->sign.top + 12 &&
+						x >= si->sign.left &&
+						x <  si->sign.left + si->sign.width_1) {
+					ShowRenameSignWindow(si);
+					return true;
+				}
+			}
+			break;
 		case ZOOM_LVL_NORMAL:
 			x = x - vp->left + vp->virtual_left;
 			y = y - vp->top  + vp->virtual_top;
@@ -1947,6 +2166,32 @@
 	if (!HasBit(_display_opt, DO_WAYPOINTS) || IsInvisibilitySet(TO_SIGNS)) return false;
 
 	switch (vp->zoom) {
+		case ZOOM_LVL_IN_4X:
+			x = x - vp->left + vp->virtual_left;
+			y = y - vp->top  + vp->virtual_top;
+			FOR_ALL_WAYPOINTS(wp) {
+				if (y >= wp->sign.top &&
+						y < wp->sign.top + 12 &&
+						x >= wp->sign.left &&
+						x < wp->sign.left + wp->sign.width_1) {
+					ShowWaypointWindow(wp);
+					return true;
+				}
+			}
+			break;
+		case ZOOM_LVL_IN_2X:
+			x = x - vp->left + vp->virtual_left;
+			y = y - vp->top  + vp->virtual_top;
+			FOR_ALL_WAYPOINTS(wp) {
+				if (y >= wp->sign.top &&
+						y < wp->sign.top + 12 &&
+						x >= wp->sign.left &&
+						x < wp->sign.left + wp->sign.width_1) {
+					ShowWaypointWindow(wp);
+					return true;
+				}
+			}
+			break;
 		case ZOOM_LVL_NORMAL:
 			x = x - vp->left + vp->virtual_left;
 			y = y - vp->top  + vp->virtual_top;
@@ -2774,3 +3019,6 @@
 {
 	SetObjectToPlace(SPR_CURSOR_MOUSE, PAL_NONE, VHM_NONE, WC_MAIN_WINDOW, 0);
 }
+
+
+
Index: src/blitter/32bpp_optimized.cpp
===================================================================
--- src/blitter/32bpp_optimized.cpp	(revision 15770)
+++ src/blitter/32bpp_optimized.cpp	(working copy)
@@ -3,6 +3,7 @@
 /** @file 32bpp_optimized.cpp Implementation of the optimized 32 bpp blitter. */
 
 #include "../stdafx.h"
+#include "../core/alloc_func.hpp"
 #include "../zoom_func.h"
 #include "../gfx_func.h"
 #include "../core/math_func.hpp"
@@ -25,6 +26,7 @@
 
 	/* src_px : each line begins with uint32 n = 'number of bytes in this line',
 	 *          then n times is the Colour struct for this line */
+	zoom = ZOOM_LVL_BEGIN; 
 	const Colour *src_px = (const Colour *)(src->data + src->offset[zoom][0]);
 	/* src_n  : each line begins with uint32 n = 'number of bytes in this line',
 	 *          then interleaved stream of 'm' and 'n' channels. 'm' is remap,
@@ -42,7 +44,8 @@
 
 	/* store so we don't have to access it via bp everytime (compiler assumes pointer aliasing) */
 	const byte *remap = bp->remap;
-
+	uint r = remap[bp->m];
+	uint bc = this->LookupColourInPalette(r);
 	for (int y = 0; y < bp->height; y++) {
 		/* next dst line begins here */
 		uint32 *dst_ln = dst + bp->pitch;
@@ -112,8 +115,11 @@
 							if (m == 0) {
 								*dst = *src_px;
 							} else {
-								uint r = remap[m];
-								if (r != 0) *dst = this->LookupColourInPalette(r);
+//								uint r = remap[m];
+								if (r != 0) {
+									*dst = ComposeColourRGBA(src_px->r, src_px->g, src_px->b, src_px->a, *dst);
+									*dst = ComposeColourBlend(bc, *dst, bp->hue);
+								}
 							}
 							dst++;
 							src_px++;
@@ -126,7 +132,10 @@
 								*dst = ComposeColourRGBANoCheck(src_px->r, src_px->g, src_px->b, src_px->a, *dst);
 							} else {
 								uint r = remap[m];
-								if (r != 0) *dst = ComposeColourPANoCheck(this->LookupColourInPalette(r), src_px->a, *dst);
+								if (r != 0) {
+									*dst = ComposeColourRGBA(src_px->r, src_px->g, src_px->b, src_px->a, *dst);
+									*dst = ComposeColourBlend(this->LookupColourInPalette(r), *dst, 0);
+								}
 							}
 							dst++;
 							src_px++;
@@ -134,12 +143,47 @@
 						} while (--n != 0);
 					}
 					break;
-
+				case BM_COLOUR_OPAQUE:
+					do {
+						uint m = *src_n;
+				  		/* In case the m-channel is zero, do not remap this pixel in any way */
+						if (m == 0) {
+							*dst = ComposeColourRGBA(src_px->r, src_px->g, src_px->b, src_px->a, *dst);
+						} else {
+							uint r = remap[m];
+							if (r != 0) *dst = ComposeColourPA(this->LookupColourInPalette(r), src_px->a, *dst);
+						}
+						dst++;
+						src_px++;
+						src_n++;
+					} while (--n != 0);
+					break;
 				case BM_TRANSPARENT:
+					/* Make the current color a bit more black, so it looks like this image is transparent */
+					do {
+						uint m = *src_n;
+	  					if (m == 0) {
+							*dst = ComposeColourRGBA(src_px->r, src_px->g, src_px->b, src_px->a / 2, *dst);
+						} else {
+							if (remap){
+								uint r = remap[m];
+								if (r != 0) *dst = ComposeColourPA(this->LookupColourInPalette(r), src_px->a / 2, *dst);
+							}
+							else {
+								*dst = ComposeColourRGBA(src_px->r, src_px->g, src_px->b, src_px->a / 2, *dst);
+							}
+						} 
+					
+//						*dst = MakeTransparent(*dst, 192);
+						dst++;
+						src_px++;
+						src_n++;
 					/* TODO -- We make an assumption here that the remap in fact is transparency, not some colour.
 					 *  This is never a problem with the code we produce, but newgrfs can make it fail... or at least:
 					 *  we produce a result the newgrf maker didn't expect ;) */
-
+					} while (--n != 0);
+					break;
+				case BM_SHADOW:
 					/* Make the current colour a bit more black, so it looks like this image is transparent */
 					src_n += n;
 					if (src_px->a == 255) {
@@ -155,8 +199,8 @@
 							src_px++;
 						} while (--n != 0);
 					}
+					
 					break;
-
 				default:
 					if (src_px->a == 255) {
 						/* faster than memcpy(), n is usually low */
@@ -175,7 +219,6 @@
 					break;
 			}
 		}
-
 		dst = dst_ln;
 		src_px = src_px_ln;
 		src_n  = src_n_ln;
@@ -191,11 +234,13 @@
  */
 void Blitter_32bppOptimized::Draw(Blitter::BlitterParams *bp, BlitterMode mode, ZoomLevel zoom)
 {
-	switch (mode) {
+		switch (mode) {
 		default: NOT_REACHED();
-		case BM_NORMAL:       Draw<BM_NORMAL>      (bp, zoom); return;
-		case BM_COLOUR_REMAP: Draw<BM_COLOUR_REMAP>(bp, zoom); return;
-		case BM_TRANSPARENT:  Draw<BM_TRANSPARENT> (bp, zoom); return;
+		case BM_NORMAL:        Draw<BM_NORMAL>       (bp, zoom); return;
+		case BM_COLOUR_REMAP:  Draw<BM_COLOUR_REMAP> (bp, zoom); return;
+		case BM_COLOUR_OPAQUE: Draw<BM_COLOUR_OPAQUE>(bp, zoom); return;
+		case BM_TRANSPARENT:   Draw<BM_TRANSPARENT>  (bp, zoom); return;
+		case BM_SHADOW:        Draw<BM_SHADOW>       (bp, zoom); return;
 	}
 }
 
@@ -208,16 +253,18 @@
  */
 static const SpriteLoader::Sprite *ResizeSprite(const SpriteLoader::Sprite *sprite_src, ZoomLevel zoom)
 {
-	SpriteLoader::Sprite *sprite = MallocT<SpriteLoader::Sprite>(1);
 
-	if (zoom == ZOOM_LVL_NORMAL) {
-		memcpy(sprite, sprite_src, sizeof(*sprite));
-		uint size = sprite_src->height * sprite_src->width;
-		sprite->data = MallocT<SpriteLoader::CommonPixel>(size);
-		memcpy(sprite->data, sprite_src->data, size * sizeof(SpriteLoader::CommonPixel));
-		return sprite;
-	}
+	return sprite_src;
+//	if (zoom == ZOOM_LVL_NORMAL) {
+//		memcpy(sprite, sprite_src, sizeof(*sprite));
+//		uint size = sprite_src->height * sprite_src->width;
+//		sprite->data = MallocT<SpriteLoader::CommonPixel>(size);
+//		memcpy(sprite->data, sprite_src->data, size * sizeof(SpriteLoader::CommonPixel));
+//		return sprite_src;
+//	}
 
+	SpriteLoader::Sprite *sprite = MallocT<SpriteLoader::Sprite>(1);
+	
 	sprite->height = UnScaleByZoom(sprite_src->height, zoom);
 	sprite->width  = UnScaleByZoom(sprite_src->width,  zoom);
 	sprite->x_offs = UnScaleByZoom(sprite_src->x_offs, zoom);
@@ -262,11 +309,14 @@
 	 * it has to be stored in one stream so fewer registers are used -
 	 * x86 has problems with register allocation even with this solution */
 	uint8  *dst_n_orig[ZOOM_LVL_COUNT];
-
+	uint    avg_r = 0;
+	uint    avg_g = 0;
+	uint    avg_b = 0;
+	int16	m = 0;
 	/* lengths of streams */
 	uint32 lengths[ZOOM_LVL_COUNT][2];
 
-	for (ZoomLevel z = ZOOM_LVL_BEGIN; z < ZOOM_LVL_END; z++) {
+	for (ZoomLevel z = ZOOM_LVL_BEGIN; z <= ZOOM_LVL_BEGIN; z++) {
 		const SpriteLoader::Sprite *src_orig = ResizeSprite(sprite, z);
 
 		uint size = src_orig->height * src_orig->width;
@@ -308,15 +358,19 @@
 					*dst_n = src->m;
 					if (src->m != 0) {
 						/* Pre-convert the mapping channel to a RGB value */
-						uint32 colour = this->LookupColourInPalette(src->m);
-						dst_px->r = GB(colour, 16, 8);
-						dst_px->g = GB(colour, 8,  8);
-						dst_px->b = GB(colour, 0,  8);
-					} else {
-						dst_px->r = src->r;
-						dst_px->g = src->g;
-						dst_px->b = src->b;
+//						uint32 colour = this->LookupColourInPalette(src->m);
+//						dst_px->r = GB(colour, 16, 8);
+//						dst_px->g = GB(colour, 8,  8);
+//						dst_px->b = GB(colour, 0,  8);
+						avg_r = (avg_r + src->r) >> 1;
+						avg_g = (avg_g + src->g) >> 1;
+						avg_b = (avg_b + src->b) >> 1;
+						m = src->m;
 					}
+					dst_px->r = src->r;
+					dst_px->g = src->g;
+					dst_px->b = src->b;
+
 					dst_px++;
 					dst_n++;
 				} else if (len == 1) {
@@ -345,12 +399,12 @@
 		lengths[z][0] = (byte *)dst_px_ln - (byte *)dst_px_orig[z]; // all are aligned to 4B boundary
 		lengths[z][1] = (byte *)dst_n_ln  - (byte *)dst_n_orig[z];
 
-		free(src_orig->data);
-		free((void *)src_orig);
+//		free(src_orig->data);
+//		free((void *)src_orig);
 	}
 
 	uint len = 0; // total length of data
-	for (ZoomLevel z = ZOOM_LVL_BEGIN; z < ZOOM_LVL_END; z++) {
+	for (ZoomLevel z = ZOOM_LVL_BEGIN; z <= ZOOM_LVL_BEGIN; z++) {
 		len += lengths[z][0] + lengths[z][1];
 	}
 
@@ -360,10 +414,10 @@
 	dest_sprite->width  = sprite->width;
 	dest_sprite->x_offs = sprite->x_offs;
 	dest_sprite->y_offs = sprite->y_offs;
-
+	dest_sprite->m 		= m;
 	SpriteData *dst = (SpriteData *)dest_sprite->data;
 
-	for (ZoomLevel z = ZOOM_LVL_BEGIN; z < ZOOM_LVL_END; z++) {
+	for (ZoomLevel z = ZOOM_LVL_BEGIN; z <= ZOOM_LVL_BEGIN; z++) {
 		dst->offset[z][0] = z == ZOOM_LVL_BEGIN ? 0 : lengths[z - 1][1] + dst->offset[z - 1][1];
 		dst->offset[z][1] = lengths[z][0] + dst->offset[z][0];
 
@@ -373,6 +427,238 @@
 		free(dst_px_orig[z]);
 		free(dst_n_orig[z]);
 	}
-
+	if (avg_r < avg_g) Swap(avg_r, avg_g);
+	if (avg_g < avg_b) Swap(avg_g, avg_b);
+	if (avg_r < avg_g) Swap(avg_r, avg_g);
+	if (avg_r != avg_b){
+		dest_sprite->hue = 256 * (avg_g - avg_b) / (avg_r - avg_b);
+	} else {
+		dest_sprite->hue = 0;
+	}		
 	return dest_sprite;
 }
+
+void Blitter_32bppOptimized::RescaleSpriteHalfSize(const SpriteLoader::Sprite *src_sprite,
+																			SpriteLoader::Sprite *dest_sprite,
+																			bool					  prevent_alpha_bleeding)
+{
+	SpriteLoader::CommonPixel *dst;
+	SpriteLoader::CommonPixel *src;
+	int width, height;
+	int x, y;
+	bool  extra_px_x	= false;
+	bool  extra_px_y	= false;
+	
+	SpriteLoader::CommonPixel clr;
+
+	width = (src_sprite->width + 1) / 2;
+	height = (src_sprite->height + 1) / 2;
+
+	/* src sprite width is odd, just copy last pixel iso taking average */
+	if (src_sprite->width & 1) {
+		extra_px_x = true;
+	}
+	/* src sprite height is odd, just copy last pixel iso taking average */
+	if (src_sprite->height & 1) {
+		extra_px_y = true;
+	}
+
+
+	dest_sprite->data = CallocT<SpriteLoader::CommonPixel>(height * width);
+	dst = (SpriteLoader::CommonPixel *)dest_sprite->data;
+	src = (SpriteLoader::CommonPixel *)src_sprite->data;
+	
+	dest_sprite->width = width ;
+	dest_sprite->height = height;
+
+	dest_sprite->x_offs = src_sprite->x_offs / 2;
+	dest_sprite->y_offs = src_sprite->y_offs / 2;
+
+	for (y = 0; y < height + (extra_px_y ? -1 : 0); y++) {
+		for (x = 0; x < width + (extra_px_x ? -1 : 0); x++) {
+				uint ma = 0;
+				uint a = 0;
+				uint r = 0;
+				uint g = 0;
+				uint b = 0;
+				uint i;
+				uint j;
+
+				for (i = 0; i < 2; i++) {
+					for (j = 0; j < 2; j++) {
+						uint ca;
+						uint cr;
+						uint cg;
+						uint cb;
+
+						clr = src[((2 * y + i ) * src_sprite->width) + (2 * x + j )];
+						ca = clr.a;
+						cr = clr.r;
+						cg = clr.g;
+						cb = clr.b;
+
+						a += ca;
+						r += ca * cr;
+						g += ca * cg;
+						b += ca * cb;
+						if (prevent_alpha_bleeding) {
+							if (ca > ma) ma = ca;
+						} else {
+							ma += ca;
+						}
+					}
+				}
+
+				if (a == 0) {
+  					dst[y * width + x].r = 0;
+  					dst[y * width + x].g = 0;
+  					dst[y * width + x].b = 0;
+  					dst[y * width + x].a = 0;
+  					dst[y * width + x].m = 0;
+				} else {
+					r /= a;
+					g /= a;
+					b /= a;
+					if (prevent_alpha_bleeding) {
+						a = ma;
+					} else {
+						a /= 4;
+					}
+  					dst[y * width + x].r = r;
+  					dst[y * width + x].g = g;
+  					dst[y * width + x].b = b;
+  					dst[y * width + x].a = a;
+  					dst[y * width + x].m = clr.m;
+				}
+		}
+		if (extra_px_x) {
+			clr = src[((2 * y ) * src_sprite->width) + (2 * x)];
+			dst[y * width + x] = clr;
+		}
+	}
+
+}
+
+void Blitter_32bppOptimized::RescaleSpriteDoubleSize(const SpriteLoader::Sprite *src_sprite,
+																			  SpriteLoader::Sprite *dest_sprite)
+{
+	int width, height;
+	SpriteLoader::CommonPixel *dst;
+	SpriteLoader::CommonPixel *src;
+	
+	width = src_sprite->width * 2;
+	height = src_sprite->height * 2;
+
+	dest_sprite->data = CallocT<SpriteLoader::CommonPixel>(height * width);
+	dst = (SpriteLoader::CommonPixel *)dest_sprite->data;
+	src = (SpriteLoader::CommonPixel *)src_sprite->data;
+
+	dest_sprite->width = width;
+	dest_sprite->height = height;
+	dest_sprite->x_offs = src_sprite->x_offs * 2;
+	dest_sprite->y_offs = src_sprite->y_offs * 2;
+
+	uint dst_y = 0;
+	uint src_y_idx = 0;
+	for (int y = 0; y < src_sprite->height - 1; y++) {
+	   int x;
+
+		uint dst_x = 0;
+		for (x = 0; x < src_sprite->width - 1; x++) {
+			dst[dst_y + dst_x] = src[src_y_idx + x];
+			dst_x++;
+			dst[dst_y + dst_x].r = (src[src_y_idx + x + 1].r + src[src_y_idx + x].r) / 2;
+			dst[dst_y + dst_x].g = (src[src_y_idx + x + 1].g + src[src_y_idx + x].g) / 2;
+			dst[dst_y + dst_x].b = (src[src_y_idx + x + 1].b + src[src_y_idx + x].b) / 2;
+			dst[dst_y + dst_x].a = (src[src_y_idx + x + 1].a + src[src_y_idx + x].a) / 2;
+			dst[dst_y + dst_x].m =  src[src_y_idx + x].m;
+			dst_x--;
+			dst_y += width;
+			dst[dst_y + dst_x].r = (src[src_y_idx + x].r + src[src_y_idx +	src_sprite->width + x].r) / 2;
+			dst[dst_y + dst_x].g = (src[src_y_idx + x].g + src[src_y_idx +	src_sprite->width + x].g) / 2;
+			dst[dst_y + dst_x].b = (src[src_y_idx + x].b + src[src_y_idx +	src_sprite->width + x].b) / 2;
+			dst[dst_y + dst_x].a = (src[src_y_idx + x].a + src[src_y_idx + src_sprite->width + x].a) / 2;
+			dst[dst_y + dst_x].m =  src[src_y_idx + x].m;
+			dst_x++;
+			dst[dst_y + dst_x].r = (src[src_y_idx + x].r + src[src_y_idx +	src_sprite->width + x].r +
+			                        src[src_y_idx + x + 1].r + src[src_y_idx + src_sprite->width + x + 1].r ) / 4;
+			dst[dst_y + dst_x].g = (src[src_y_idx + x].g + src[src_y_idx +	src_sprite->width + x].g +
+			                        src[src_y_idx + x + 1].g + src[src_y_idx + src_sprite->width + x + 1].g ) / 4;
+			dst[dst_y + dst_x].b = (src[src_y_idx + x].b + src[src_y_idx +	src_sprite->width + x].b +
+			                        src[src_y_idx + x + 1].b + src[src_y_idx + src_sprite->width + x + 1].b ) / 4;
+			dst[dst_y + dst_x].a = (src[src_y_idx + x].a + src[src_y_idx +	src_sprite->width + x].a +
+			                        src[src_y_idx + x + 1].a + src[src_y_idx + src_sprite->width + x + 1].a ) / 4;
+			dst[dst_y + dst_x].m =  src[src_y_idx + x].m;
+			dst_y -= width;
+			dst_x++;
+		}
+		
+		/* last pixels in row cannot be interpolated */
+		dst[dst_y + dst_x] = src[src_y_idx + x];
+		dst_x++;
+		dst[dst_y + dst_x] = src[src_y_idx + x];
+		dst_x--;
+		dst_y += width;
+		dst[dst_y + dst_x].r = (src[src_y_idx + x].r + src[src_y_idx +	src_sprite->width + x].r) / 2;
+		dst[dst_y + dst_x].g = (src[src_y_idx + x].g + src[src_y_idx +	src_sprite->width + x].g) / 2;
+		dst[dst_y + dst_x].b = (src[src_y_idx + x].b + src[src_y_idx +	src_sprite->width + x].b) / 2;
+		dst[dst_y + dst_x].a = (src[src_y_idx + x].a + src[src_y_idx + src_sprite->width + x].a) / 2;
+		dst[dst_y + dst_x].m =  src[src_y_idx + x].m;
+		dst_x++;
+		dst[dst_y + dst_x].r = (src[src_y_idx + x].r + src[src_y_idx +	src_sprite->width + x].r) / 2;
+		dst[dst_y + dst_x].g = (src[src_y_idx + x].g + src[src_y_idx +	src_sprite->width + x].g) / 2;
+		dst[dst_y + dst_x].b = (src[src_y_idx + x].b + src[src_y_idx +	src_sprite->width + x].b) / 2;
+		dst[dst_y + dst_x].a = (src[src_y_idx + x].a + src[src_y_idx + src_sprite->width + x].a) / 2;
+		dst[dst_y + dst_x].m =  src[src_y_idx + x].m;
+
+		dst_y += width;
+		src_y_idx += src_sprite->width;
+	}
+	/* last row can not be interpolated */
+	uint dst_x = 0;
+	for (int x = 0; x < src_sprite->width - 1; x++) {
+		dst[dst_y + dst_x] = src[src_y_idx + x];
+		dst_x++;
+		dst[dst_y + dst_x].r = (src[src_y_idx + x + 1].r + src[src_y_idx + x].r) / 2;
+		dst[dst_y + dst_x].g = (src[src_y_idx + x + 1].g + src[src_y_idx + x].g) / 2;
+		dst[dst_y + dst_x].b = (src[src_y_idx + x + 1].b + src[src_y_idx + x].b) / 2;
+		dst[dst_y + dst_x].a = (src[src_y_idx + x + 1].a + src[src_y_idx + x].a) / 2;
+		dst[dst_y + dst_x].m =  src[src_y_idx + x].m;
+		dst_x--;
+		dst_y += width;
+		dst[dst_y + dst_x] = src[src_y_idx + x];
+		dst_x++;
+		dst[dst_y + dst_x].r = (src[src_y_idx + x + 1].r + src[src_y_idx + x].r) / 2;
+		dst[dst_y + dst_x].g = (src[src_y_idx + x + 1].g + src[src_y_idx + x].g) / 2;
+		dst[dst_y + dst_x].b = (src[src_y_idx + x + 1].b + src[src_y_idx + x].b) / 2;
+		dst[dst_y + dst_x].a = (src[src_y_idx + x + 1].a + src[src_y_idx + x].a) / 2;
+		dst[dst_y + dst_x].m =  src[src_y_idx + x].m;
+		dst_y -= width;
+		dst_x++;
+	}
+}
+
+void Blitter_32bppOptimized::FillRGBFromPalette(SpriteLoader::Sprite *sprite)
+{
+	SpriteLoader::CommonPixel *spr = sprite->data;
+	
+	for (uint y = 0; y < sprite->height; y++) {
+		uint y_idx  = y * sprite->width; 
+		for (uint x = 0; x < sprite->width; x++) {
+			if (spr[y_idx + x].a == 0) {
+				spr[y_idx + x].r = 0;
+				spr[y_idx + x].g = 0;
+				spr[y_idx + x].b = 0;
+				spr[y_idx + x].m = 0;
+			} else {
+				if (spr[y_idx + x].m != 0) {
+					/* Pre-convert the mapping channel to a RGB value */
+					uint color = this->LookupColourInPalette(spr[y_idx + x].m);
+					spr[y_idx + x].r = GB(color, 16, 8);
+					spr[y_idx + x].g = GB(color, 8,  8);
+					spr[y_idx + x].b = GB(color, 0,  8);
+				}
+			}
+		}
+	}
+}
Index: src/blitter/32bpp_optimized.hpp
===================================================================
--- src/blitter/32bpp_optimized.hpp	(revision 15770)
+++ src/blitter/32bpp_optimized.hpp	(working copy)
@@ -17,6 +17,12 @@
 
 	/* virtual */ void Draw(Blitter::BlitterParams *bp, BlitterMode mode, ZoomLevel zoom);
 	/* virtual */ Sprite *Encode(SpriteLoader::Sprite *sprite, Blitter::AllocatorProc *allocator);
+					  void RescaleSpriteHalfSize( const SpriteLoader::Sprite *src_sprite, 
+															SpriteLoader::Sprite 		*dest_sprite,
+															bool						 		prevent_alpha_bleeding);
+					  void RescaleSpriteDoubleSize(const SpriteLoader::Sprite	*src_sprite,
+															 SpriteLoader::Sprite 			*dest_sprite);                                               
+					  void FillRGBFromPalette(SpriteLoader::Sprite *sprite);
 
 	/* virtual */ const char *GetName() { return "32bpp-optimized"; }
 
Index: src/blitter/base.hpp
===================================================================
--- src/blitter/base.hpp	(revision 15770)
+++ src/blitter/base.hpp	(working copy)
@@ -13,6 +13,8 @@
 	BM_NORMAL,
 	BM_COLOUR_REMAP,
 	BM_TRANSPARENT,
+   BM_COLOUR_OPAQUE,
+   BM_SHADOW
 };
 
 /**
@@ -32,6 +34,8 @@
 
 		void *dst;               ///< Destination buffer
 		int pitch;               ///< The pitch of the destination buffer
+		uint hue;
+		uint m;
 	};
 
 	enum PaletteAnimation {
Index: src/blitter/32bpp_base.hpp
===================================================================
--- src/blitter/32bpp_base.hpp	(revision 15770)
+++ src/blitter/32bpp_base.hpp	(working copy)
@@ -7,6 +7,7 @@
 
 #include "base.hpp"
 #include "../core/bitmath_func.hpp"
+#include "../core/math_func.hpp"
 
 class Blitter_32bppBase : public Blitter {
 public:
@@ -96,6 +97,80 @@
 		return ComposeColourPANoCheck(colour, a, current);
 	}
 
+/**
+	* Blend a colour based on Pixel value and the current pixel value.
+	*/
+	static inline uint ComposeColourBlend(uint colour, uint current, uint hue)
+	{
+		int r, g, b, cr, cg, cb;
+
+		if (colour == current) {
+			return colour;
+		}
+
+		r  = GB(colour,  16, 8);
+		g  = GB(colour,  8,  8);
+		b  = GB(colour,  0,  8);
+
+		cr = GB(current, 16, 8);
+		cg = GB(current, 8,  8);
+		cb = GB(current, 0,  8);
+		// if the original is a grey tone, don't recolour  
+		if ( (abs(cg - cr) < 5) && ( abs(cb - cr) < 5)){
+			return current;
+		}
+		if (cr < cg) Swap(cr,cg);
+		if (cg < cb) Swap(cg,cb);
+		if (cr < cg) Swap(cr,cg);
+
+		if (r>g) {
+			if(r>b) {
+				r = cr;
+				if(b>g) {	//rbg
+					b = cg - (((cr - cb) * hue) >> 9);
+					g = cb;
+				}	
+				else {		//rgb
+					g = cg - (((cr - cb) * hue) >> 9);
+					b = cb;
+				}
+			}	
+			else {			// brg
+				b = cr;
+				r = cg - (((cr - cb) * hue) >> 9);
+				g = cb;
+			}
+		}	
+		else {
+			if(r>b) {	// grb
+				g = cr;
+				r = cg - (((cr - cb) * hue) >> 9);
+				b = cb;
+			}
+			else {
+				if(b>g) {	// brg
+					b = cr;
+					g = cg - (((cr - cb) * hue) >> 9);
+					r = cb;
+				}
+				else {
+					if (b<g) {		// gbr
+						g = cr;
+						b = cg - (((cr - cb) * hue) >> 9);
+						r = cb;
+					} else {		// fallback if target col is grey
+						g = (cr + cb) >> 1;
+						b = (cr + cb) >> 1;
+						r = (cr + cb) >> 1;
+					}	
+				}
+			}
+		}
+			
+  		return ComposeColour(0xff,r,g,b);		
+	}
+
+
 	/**
 	 * Make a pixel looks like it is transparent.
 	 * @param colour the colour already on the screen.
Index: src/blitter/32bpp_anim.cpp
===================================================================
--- src/blitter/32bpp_anim.cpp	(revision 15770)
+++ src/blitter/32bpp_anim.cpp	(working copy)
@@ -135,6 +135,7 @@
 
 					/* Make the current colour a bit more black, so it looks like this image is transparent */
 					src_n += n;
+
 					if (src_px->a == 255) {
 						src_px += n;
 						do {
@@ -152,6 +153,7 @@
 							src_px++;
 						} while (--n != 0);
 					}
+
 					break;
 
 				default:
Index: src/gfx.cpp
===================================================================
--- src/gfx.cpp	(revision 15770)
+++ src/gfx.cpp	(working copy)
@@ -223,16 +223,17 @@
 
 	static const byte colour = 255;
 
-	GfxDrawLineUnscaled(x, y, x + dx1, y + dy1, colour);
-	GfxDrawLineUnscaled(x, y, x + dx2, y + dy2, colour);
-	GfxDrawLineUnscaled(x, y, x + dx3, y + dy3, colour);
 
-	GfxDrawLineUnscaled(x + dx1, y + dy1, x + dx1 + dx2, y + dy1 + dy2, colour);
-	GfxDrawLineUnscaled(x + dx1, y + dy1, x + dx1 + dx3, y + dy1 + dy3, colour);
-	GfxDrawLineUnscaled(x + dx2, y + dy2, x + dx2 + dx1, y + dy2 + dy1, colour);
-	GfxDrawLineUnscaled(x + dx2, y + dy2, x + dx2 + dx3, y + dy2 + dy3, colour);
-	GfxDrawLineUnscaled(x + dx3, y + dy3, x + dx3 + dx1, y + dy3 + dy1, colour);
-	GfxDrawLineUnscaled(x + dx3, y + dy3, x + dx3 + dx2, y + dy3 + dy2, colour);
+	GfxDrawLine(x, y, x + dx1, y + dy1, colour);
+	GfxDrawLine(x, y, x + dx2, y + dy2, colour);
+	GfxDrawLine(x, y, x + dx3, y + dy3, colour);
+
+	GfxDrawLine(x + dx1, y + dy1, x + dx1 + dx2, y + dy1 + dy2, colour);
+	GfxDrawLine(x + dx1, y + dy1, x + dx1 + dx3, y + dy1 + dy3, colour);
+	GfxDrawLine(x + dx2, y + dy2, x + dx2 + dx1, y + dy2 + dy1, colour);
+	GfxDrawLine(x + dx2, y + dy2, x + dx2 + dx3, y + dy2 + dy3, colour);
+	GfxDrawLine(x + dx3, y + dy3, x + dx3 + dx1, y + dy3 + dy1, colour);
+	GfxDrawLine(x + dx3, y + dy3, x + dx3 + dx2, y + dy3 + dy2, colour);
 }
 
 /**
@@ -941,7 +942,7 @@
 		if (IsPrintable(c)) {
 			if (x >= dpi->left + dpi->width) goto skip_char;
 			if (x + 26 >= dpi->left) {
-				GfxMainBlitter(GetGlyph(size, c), x, y, BM_COLOUR_REMAP);
+				GfxMainBlitter(GetGlyph(size, c), x, y, BM_COLOUR_OPAQUE);
 			}
 			x += GetCharacterWidth(size, c);
 		} else if (c == '\n') { // newline = {}
@@ -1001,8 +1002,15 @@
 void DrawSprite(SpriteID img, SpriteID pal, int x, int y, const SubSprite *sub)
 {
 	if (HasBit(img, PALETTE_MODIFIER_TRANSPARENT)) {
-		_colour_remap_ptr = GetNonSprite(GB(pal, 0, PALETTE_WIDTH), ST_RECOLOUR) + 1;
+      if (pal != PAL_NONE) {
+	   	_colour_remap_ptr = GetNonSprite(GB(pal, 0, PALETTE_WIDTH), ST_RECOLOUR) + 1;
+		}
+    	else {
+        	_colour_remap_ptr = NULL;
+    	}
 		GfxMainBlitter(GetSprite(GB(img, 0, SPRITE_WIDTH), ST_NORMAL), x, y, BM_TRANSPARENT, sub);
+	} else if (HasBit(img, PALETTE_MODIFIER_SHADOW)){
+		GfxMainBlitter(GetSprite(GB(img, 0, SPRITE_WIDTH), ST_NORMAL), x, y, BM_SHADOW, sub);
 	} else if (pal != PAL_NONE) {
 		_colour_remap_ptr = GetNonSprite(GB(pal, 0, PALETTE_WIDTH), ST_RECOLOUR) + 1;
 		GfxMainBlitter(GetSprite(GB(img, 0, SPRITE_WIDTH), ST_NORMAL), x, y, BM_COLOUR_REMAP, sub);
@@ -1033,15 +1041,18 @@
 	bp.sprite = sprite->data;
 	bp.sprite_width = sprite->width;
 	bp.sprite_height = sprite->height;
-	bp.width = UnScaleByZoom(sprite->width - clip_left - clip_right, dpi->zoom);
-	bp.height = UnScaleByZoom(sprite->height - clip_top - clip_bottom, dpi->zoom);
+
+	bp.hue = sprite->hue;
+	bp.m = sprite->m;
+	bp.width = (sprite->width - clip_left - clip_right) ;
+	bp.height = (sprite->height - clip_top - clip_bottom) ;
 	bp.top = 0;
 	bp.left = 0;
-	bp.skip_left = UnScaleByZoomLower(clip_left, dpi->zoom);
-	bp.skip_top = UnScaleByZoomLower(clip_top, dpi->zoom);
+	bp.skip_left = clip_left ;
+	bp.skip_top = clip_top ;
 
-	x += ScaleByZoom(bp.skip_left, dpi->zoom);
-	y += ScaleByZoom(bp.skip_top, dpi->zoom);
+	x += bp.skip_left;
+	y += bp.skip_top;
 
 	bp.dst = dpi->dst_ptr;
 	bp.pitch = dpi->pitch;
@@ -1055,42 +1066,45 @@
 
 	y -= dpi->top;
 	/* Check for top overflow */
+
 	if (y < 0) {
-		bp.height -= -UnScaleByZoom(y, dpi->zoom);
+		bp.height -= -y;
 		if (bp.height <= 0) return;
-		bp.skip_top += -UnScaleByZoom(y, dpi->zoom);
+		bp.skip_top += -y;
 		y = 0;
 	} else {
-		bp.top = UnScaleByZoom(y, dpi->zoom);
+		bp.top = y;
 	}
 
 	/* Check for bottom overflow */
-	y += ScaleByZoom(bp.height, dpi->zoom) - dpi->height;
+
+	y += bp.height - dpi->height;
+
 	if (y > 0) {
-		bp.height -= UnScaleByZoom(y, dpi->zoom);
+		bp.height -= y; //UnScaleByZoom(y, dpi->zoom);
 		if (bp.height <= 0) return;
 	}
 
 	x -= dpi->left;
 	/* Check for left overflow */
 	if (x < 0) {
-		bp.width -= -UnScaleByZoom(x, dpi->zoom);
+		bp.width -= -x;
 		if (bp.width <= 0) return;
-		bp.skip_left += -UnScaleByZoom(x, dpi->zoom);
+		bp.skip_left += -x ;
 		x = 0;
 	} else {
-		bp.left = UnScaleByZoom(x, dpi->zoom);
+		bp.left = x;
 	}
 
 	/* Check for right overflow */
-	x += ScaleByZoom(bp.width, dpi->zoom) - dpi->width;
+	x += bp.width - dpi->width;
 	if (x > 0) {
-		bp.width -= UnScaleByZoom(x, dpi->zoom);
+		bp.width -= x;
 		if (bp.width <= 0) return;
 	}
 
-	assert(bp.skip_left + bp.width <= UnScaleByZoom(sprite->width, dpi->zoom));
-	assert(bp.skip_top + bp.height <= UnScaleByZoom(sprite->height, dpi->zoom));
+//	assert(bp.skip_left + bp.width <= UnScaleByZoom(sprite->width, dpi->zoom));
+//	assert(bp.skip_top + bp.height <= UnScaleByZoom(sprite->height, dpi->zoom));
 
 	BlitterFactoryBase::GetCurrentBlitter()->Draw(&bp, mode, dpi->zoom);
 }
@@ -1488,7 +1502,10 @@
 	byte *b;
 	int width;
 	int height;
-
+   left -=7;
+   right += 7;
+   top -= 7;
+   bottom += 7;
 	if (left < 0) left = 0;
 	if (top < 0) top = 0;
 	if (right > _screen.width) right = _screen.width;
Index: src/newgrf_commons.h
===================================================================
--- src/newgrf_commons.h	(revision 15770)
+++ src/newgrf_commons.h	(working copy)
@@ -113,7 +113,7 @@
  */
 static inline SpriteID SpriteLayoutPaletteTransform(SpriteID image, SpriteID pal, SpriteID default_pal)
 {
-	if (HasBit(image, PALETTE_MODIFIER_TRANSPARENT) || HasBit(image, PALETTE_MODIFIER_COLOUR)) {
+	if (/*HasBit(image, PALETTE_MODIFIER_TRANSPARENT) || */ HasBit(image, PALETTE_MODIFIER_COLOUR)) {
 		return (pal != 0 ? pal : default_pal);
 	} else {
 		return PAL_NONE;
Index: src/openttd.cpp
===================================================================
--- src/openttd.cpp	(revision 15770)
+++ src/openttd.cpp	(working copy)
@@ -341,7 +341,7 @@
 	/* Setup main window */
 	ResetWindowSystem();
 	SetupColoursAndInitialWindow();
-
+    
 	/* Load the default opening screen savegame */
 	if (SaveOrLoad("opntitle.dat", SL_LOAD, DATA_DIR) != SL_OK) {
 		GenerateWorld(GW_EMPTY, 64, 64); // if failed loading, make empty world.
@@ -421,6 +421,10 @@
 #endif
 	;
 
+	DrawPixelInfo dpi;
+	_cur_dpi = &dpi;
+	_cur_dpi->zoom = ZOOM_LVL_NORMAL;
+
 	MyGetOptData mgo(argc - 1, argv + 1, optformat);
 
 	while ((i = MyGetOpt(&mgo)) != -1) {
