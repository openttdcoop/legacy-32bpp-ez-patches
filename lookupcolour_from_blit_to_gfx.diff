diff --git a/src/blitter/32bpp_optimized.cpp b/src/blitter/32bpp_optimized.cpp
--- a/src/blitter/32bpp_optimized.cpp
+++ b/src/blitter/32bpp_optimized.cpp
@@ -15,6 +15,15 @@
 #include "../core/math_func.hpp"
 #include "32bpp_optimized.hpp"
 
+static const int MAX_PALETTE_TABLES = 50;
+
+struct RecolourTable {
+	SpriteID   id;
+	Colour     tables[256];
+} _rgb_palettes[MAX_PALETTE_TABLES] = {{0,{{0}}}};
+
+Colour _rgb_stringremap[3] = {{0}};
+
 /** Instantiation of the optimized 32bpp blitter factory. */
 static FBlitter_32bppOptimized iFBlitter_32bppOptimized;
 
@@ -49,8 +58,7 @@
 	uint32 *dst = (uint32 *)bp->dst + bp->top * bp->pitch + bp->left;
 
 	/* store so we don't have to access it via bp everytime (compiler assumes pointer aliasing) */
-	const byte *remap = bp->remap;
-
+	const Colour *remap = (const Colour *)bp->remap;
 	for (int y = 0; y < bp->height; y++) {
 		/* next dst line begins here */
 		uint32 *dst_ln = dst + bp->pitch;
@@ -123,10 +131,10 @@
 								*dst = ComposeColourRGBANoCheck(src_px->r, src_px->g, src_px->b, src_px->a, *dst);
 							}
 						} else {
-							uint r = remap[m];
-							if (r != 0) {
+							Colour r = remap[m];
+							if (r.a != 0) {
 								uint src_col = ComposeColour(src_px->a, src_px->r, src_px->g, src_px->b);
-								uint comp_col = ComposeColourBlend(this->LookupColourInPalette(r), src_col);
+								uint comp_col = ComposeColourBlend(r.data, src_col);
 								*dst = ComposeColourPA(comp_col, src_px->a, *dst);
 							}
 						}
@@ -142,8 +150,10 @@
 						if (m == 0) {
 							*dst = ComposeColourRGBA(src_px->r, src_px->g, src_px->b, src_px->a, *dst);
 						} else {
-							uint r = remap[m];
-							if (r != 0) *dst = ComposeColourPA(this->LookupColourInPalette(r), src_px->a, *dst);
+							Colour r = remap[m];
+							if (r.a != 0) {
+								*dst = ComposeColourPA(r.data, src_px->a, *dst);
+							}
 						}
 						dst++;
 						src_px++;
@@ -151,15 +161,14 @@
 					} while (--n != 0);
 					break;
 				case BM_TRANSPARENT:
-					/* Make the current color a bit more black, so it looks like this image is transparent */
 					do {
 						uint m = *src_n;
 						if (m == 0) {
 							*dst = ComposeColourRGBA(src_px->r, src_px->g, src_px->b, src_px->a / 2, *dst);
 						} else {
 							if (remap){
-								uint r = remap[m];
-								if (r != 0) *dst = ComposeColourPA(this->LookupColourInPalette(r), src_px->a / 2, *dst);
+								Colour r = remap[m];
+								if (r.a != 0) *dst = ComposeColourPA(r.data, src_px->a / 2, *dst);
 							}
 							else {
 								*dst = ComposeColourRGBA(src_px->r, src_px->g, src_px->b, src_px->a / 2, *dst);
@@ -704,3 +713,19 @@
 		}
 	}
 }
+
+byte *Blitter_32bppOptimized::FillRGBPalette(SpriteID id, byte *remap_data)
+{
+	for (int idx = 0; (idx < MAX_PALETTE_TABLES); idx++) {
+		if ((id == _rgb_palettes[idx].id) || (_rgb_palettes[idx].id == 0)) { 
+			_rgb_palettes[idx].id = id;
+			for (int col_idx = 0; col_idx < 256; col_idx++) { 
+				_rgb_palettes[idx].tables[col_idx].data = this->LookupColourInPalette(remap_data[col_idx + 1]);
+			}
+			return (byte *)&(_rgb_palettes[idx].tables[0]);
+		}
+	}
+	error("No more rgb palette tables available");
+	return NULL;
+}
+
diff --git a/src/blitter/32bpp_optimized.hpp b/src/blitter/32bpp_optimized.hpp
--- a/src/blitter/32bpp_optimized.hpp
+++ b/src/blitter/32bpp_optimized.hpp
@@ -31,7 +31,7 @@
 					  void RescaleSpriteDoubleSize(const SpriteLoader::Sprite *src_sprite,
 															 SpriteLoader::Sprite *dest_sprite);
 					  void FillRGBFromPalette(SpriteLoader::Sprite *sprite);
-
+					  byte *FillRGBPalette(SpriteID id, byte *remap_data);
 	/* virtual */ const char *GetName() { return "32bpp-optimized"; }
 
 	template <BlitterMode mode> void Draw(const Blitter::BlitterParams *bp, ZoomLevel zoom);
diff --git a/src/gfx.cpp b/src/gfx.cpp
--- a/src/gfx.cpp
+++ b/src/gfx.cpp
@@ -15,6 +15,7 @@
 #include "progress.h"
 #include "zoom_func.h"
 #include "blitter/factory.hpp"
+#include "blitter/32bpp_optimized.hpp"
 #include "video/video_driver.hpp"
 #include "strings_func.h"
 #include "settings_type.h"
@@ -147,7 +148,7 @@
  */
 void GfxFillRect(int left, int top, int right, int bottom, int colour, FillRectMode mode)
 {
-	Blitter *blitter = BlitterFactoryBase::GetCurrentBlitter();
+	Blitter_32bppOptimized *blitter = (Blitter_32bppOptimized *)BlitterFactoryBase::GetCurrentBlitter();
 	const DrawPixelInfo *dpi = _cur_dpi;
 	void *dst;
 	const int otop = top;
@@ -279,6 +280,7 @@
 	GfxDrawLine(x + dx3, y + dy3, x + dx3 + dx2, y + dy3 + dy2, colour);
 }
 
+Colour _string_colourremap_32bpp[3];
 /**
  * Set the colour remap to be for the given colour.
  * @param colour the new colour of the remap.
@@ -295,7 +297,12 @@
 
 	_string_colourremap[1] = raw_colour ? (byte)colour : _string_colourmap[colour];
 	_string_colourremap[2] = no_shade ? 0 : 1;
-	_colour_remap_ptr = _string_colourremap;
+
+	for (int i = 0; i < 3; i++) {
+		_string_colourremap_32bpp[i].data = _cur_palette[_string_colourremap[i]].data;
+	}
+
+	_colour_remap_ptr = (byte *)_string_colourremap_32bpp;
 }
 
 #if !defined(WITH_ICU)
@@ -1070,7 +1077,6 @@
 
 switch_colour:;
 	SetColourRemap(params.cur_colour);
-
 check_bounds:
 	if (y + _max_char_height <= dpi->top || dpi->top + dpi->height <= y) {
 skip_char:;
@@ -1151,12 +1157,12 @@
  * @param y    Top coordinate of image
  * @param sub  If available, draw only specified part of the sprite
  */
-void DrawSprite(SpriteID img, PaletteID pal, int x, int y, const SubSprite *sub)
+ void DrawSprite(SpriteID img, PaletteID pal, int x, int y, const SubSprite *sub)
 {
 	SpriteID real_sprite = GB(img, 0, SPRITE_WIDTH);
 	if (HasBit(img, PALETTE_MODIFIER_TRANSPARENT)) {
 		if (pal != PAL_NONE) {
-			_colour_remap_ptr = GetNonSprite(GB(pal, 0, PALETTE_WIDTH), ST_RECOLOUR) + 1;
+			_colour_remap_ptr = GetNonSprite(GB(pal, 0, PALETTE_WIDTH), ST_RECOLOUR);
 		}
 		else {
 			_colour_remap_ptr = NULL;
@@ -1165,7 +1171,8 @@
 	} else if (HasBit(img, PALETTE_MODIFIER_SHADOW)){
 		GfxMainBlitter(GetSprite(real_sprite, ST_NORMAL), x, y, BM_SHADOW, sub, real_sprite);
 	} else if (pal != PAL_NONE) {
-		_colour_remap_ptr = GetNonSprite(GB(pal, 0, PALETTE_WIDTH), ST_RECOLOUR) + 1;
+		_colour_remap_ptr = GetNonSprite(GB(pal, 0, PALETTE_WIDTH), ST_RECOLOUR);
+		memcpy(&_colour_remap_ptr, _colour_remap_ptr + 257, sizeof(_colour_remap_ptr));
 		if(pal >= PALETTE_RECOLOUR_START) {
 			GfxMainBlitter(GetSprite(real_sprite, ST_NORMAL), x, y, BM_COLOUR_REMAP, sub, real_sprite);
 		} else {
diff --git a/src/spritecache.cpp b/src/spritecache.cpp
--- a/src/spritecache.cpp
+++ b/src/spritecache.cpp
@@ -259,7 +259,7 @@
 		 * GRFs which are the same as 257 byte recolour sprites, but with the last
 		 * 240 bytes zeroed.  */
 		static const int RECOLOUR_SPRITE_SIZE = 257;
-		byte *dest = (byte *)allocator(max(RECOLOUR_SPRITE_SIZE, num));
+		byte *dest = (byte *)allocator(max(RECOLOUR_SPRITE_SIZE, num) + sizeof(byte *));
 
 		if (_palette_remap_grf[sc->file_slot]) {
 			byte *dest_tmp = AllocaM(byte, max(RECOLOUR_SPRITE_SIZE, num));
@@ -276,6 +276,11 @@
 			FioReadBlock(dest, num);
 		}
 
+		if (BlitterFactoryBase::GetCurrentBlitter()->GetScreenDepth() == 32){
+			Blitter_32bppOptimized *blitter = (Blitter_32bppOptimized *)BlitterFactoryBase::GetCurrentBlitter();
+			byte *tmp_ptr = blitter->FillRGBPalette(id, dest);
+			memcpy(&dest[257], &tmp_ptr, sizeof (tmp_ptr));
+		}
 		return dest;
 	}
 
@@ -323,8 +328,6 @@
 	SpriteLoaderGrf sprite_loader;
 	SpriteLoader::Sprite sprite, dst_sprite;
 
-
-	sc->type = sprite_type;
 	if (!sprite_loader.LoadSprite(&sprite, file_slot, file_pos, sprite_type, ZOOM_LVL_NORMAL)) {
 		return NULL;
 	}
@@ -349,7 +352,7 @@
 		} while (zoom_idx < zoom);
 	}
 
-	return BlitterFactoryBase::GetCurrentBlitter()->Encode(&sprite, &AllocSprite);
+	return BlitterFactoryBase::GetCurrentBlitter()->Encode(&sprite, allocator);
 }
 
 
@@ -677,12 +680,12 @@
 		/* Update LRU */
 		sc->lru = ++_sprite_lru_counter;
 
-	zoom = ZoomLevel(_cur_dpi->zoom);
-	void *p = sc->ptr[zoom];
+		zoom = ZoomLevel(_cur_dpi->zoom);
+
 		/* Load the sprite, if it is not loaded, yet */
-		if (p == NULL) p = ReadSprite(sc, sprite, type, AllocSprite);
+		if (sc->ptr[zoom] == NULL) sc->ptr[zoom] = ReadSprite(sc, sprite, type, AllocSprite);
 
-		return p;
+		return sc->ptr[zoom];
 	} else {
 		/* Do not use the spritecache, but a different allocator. */
 		return ReadSprite(sc, sprite, type, allocator);
